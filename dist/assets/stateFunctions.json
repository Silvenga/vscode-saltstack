[
  {
    "functionId": "salt.states.acme.cert",
    "description": "Obtain/renew a certificate from an ACME CA, probably Let's Encrypt.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "aliases",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "email",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "webroot",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "test_cert",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "renew",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "keysize",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "server",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "owner",
        "defaultValue": "'root'",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "group",
        "defaultValue": "'root'",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.alias.absent",
    "description": "Ensure that the named alias is absent",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The alias to remove"
      }
    ]
  },
  {
    "functionId": "salt.states.alias.present",
    "description": "Ensures that the named alias is present with the given target or list of\ntargets. If the alias exists but the target differs from the previous\nentry, the target(s) will be overwritten. If the alias does not exist, the\nalias will be created.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The local user/address to assign an alias to"
      },
      {
        "name": "target",
        "defaultValue": null,
        "isRequired": true,
        "description": "The forwarding address"
      }
    ]
  },
  {
    "functionId": "salt.states.alternatives.auto",
    "description": "Instruct alternatives to use the highest priority\npath for <name>",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "is the master name for this link group\n(e.g. pager)"
      }
    ]
  },
  {
    "functionId": "salt.states.alternatives.install",
    "description": "Install new alternative for defined <name>",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "is the master name for this link group\n(e.g. pager)"
      },
      {
        "name": "link",
        "defaultValue": null,
        "isRequired": true,
        "description": "is the symlink pointing to /etc/alternatives/.\n(e.g. /usr/bin/pager)"
      },
      {
        "name": "path",
        "defaultValue": null,
        "isRequired": true,
        "description": "is the location of the new alternative target.\nNB: This file / directory must already exist.\n(e.g. /usr/bin/less)"
      },
      {
        "name": "priority",
        "defaultValue": null,
        "isRequired": true,
        "description": "is an integer; options with higher numbers have higher priority in\nautomatic mode."
      }
    ]
  },
  {
    "functionId": "salt.states.alternatives.remove",
    "description": "Removes installed alternative for defined <name> and <path>\nor fallback to default alternative, if some defined before.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "is the master name for this link group\n(e.g. pager)"
      },
      {
        "name": "path",
        "defaultValue": null,
        "isRequired": true,
        "description": "is the location of one of the alternative target files.\n(e.g. /usr/bin/less)"
      }
    ]
  },
  {
    "functionId": "salt.states.alternatives.set",
    "description": "Sets alternative for <name> to <path>, if <path> is defined\nas an alternative for <name>.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "is the master name for this link group\n(e.g. pager)"
      },
      {
        "name": "path",
        "defaultValue": null,
        "isRequired": true,
        "description": "is the location of one of the alternative target files.\n(e.g. /usr/bin/less)"
      }
    ]
  },
  {
    "functionId": "salt.states.apache_conf.disable",
    "description": "Ensure an Apache conf is disabled.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Name of the Apache conf"
      }
    ]
  },
  {
    "functionId": "salt.states.apache_conf.disabled",
    "description": "Ensure an Apache conf is disabled.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Name of the Apache conf"
      }
    ]
  },
  {
    "functionId": "salt.states.apache_conf.enable",
    "description": "Ensure an Apache conf is enabled.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Name of the Apache conf"
      }
    ]
  },
  {
    "functionId": "salt.states.apache_conf.enabled",
    "description": "Ensure an Apache conf is enabled.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Name of the Apache conf"
      }
    ]
  },
  {
    "functionId": "salt.states.apache_module.disable",
    "description": "Ensure an Apache module is disabled.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Name of the Apache module"
      }
    ]
  },
  {
    "functionId": "salt.states.apache_module.disabled",
    "description": "Ensure an Apache module is disabled.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Name of the Apache module"
      }
    ]
  },
  {
    "functionId": "salt.states.apache_module.enable",
    "description": "Ensure an Apache module is enabled. This function is deprecated and will be\nremoved in Salt Nitrogen. Please use the enabled state function instead.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Name of the Apache module"
      }
    ]
  },
  {
    "functionId": "salt.states.apache_module.enabled",
    "description": "Ensure an Apache module is enabled.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Name of the Apache module"
      }
    ]
  },
  {
    "functionId": "salt.states.apache_site.disable",
    "description": "Ensure an Apache site is disabled.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Name of the Apache site"
      }
    ]
  },
  {
    "functionId": "salt.states.apache_site.disabled",
    "description": "Ensure an Apache site is disabled.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Name of the Apache site"
      }
    ]
  },
  {
    "functionId": "salt.states.apache_site.enable",
    "description": "Ensure an Apache site is enabled.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Name of the Apache site"
      }
    ]
  },
  {
    "functionId": "salt.states.apache_site.enabled",
    "description": "Ensure an Apache site is enabled.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Name of the Apache site"
      }
    ]
  },
  {
    "functionId": "salt.states.aptpkg.held",
    "description": "Set package in 'hold' state, meaning it will not be upgraded.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the package, e.g., 'tmux'"
      }
    ]
  },
  {
    "functionId": "salt.states.archive.extracted",
    "description": "Ensure that an archive is extracted to a specific directory.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Directory into which the archive should be extracted"
      },
      {
        "name": "source",
        "defaultValue": null,
        "isRequired": true,
        "description": "Archive to be extracted\n\n\n\n\nNote\n\nThis argument uses the same syntax as its counterpart in the [file.managed](salt.states.file.html#salt.states.file.managed \"salt.states.file.managed\") state.\n\n\n"
      },
      {
        "name": "source_hash",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Hash of source file, or file with list of hash-to-file mappings\n\n\n\n\nNote\n\nThis argument uses the same syntax as its counterpart in the [file.managed](salt.states.file.html#salt.states.file.managed \"salt.states.file.managed\") state.\n\n\n\n\n\nChanged in version 2016.11.0: If this argument specifies the hash itself, instead of a URI to a file containing hashes, the hash type can now be omitted and Salt will determine the hash type based on the length of the hash. For example, both of the below states are now valid, while before only the second one would be:\n\n\n\n\nfoo_app:\n  archive.extracted:\n    - name: /var/www\n    - source: https://mydomain.tld/foo.tar.gz\n    - source_hash: 3360db35e682f1c5f9c58aa307de16d41361618c\n\nbar_app:\n  archive.extracted:\n    - name: /var/www\n    - source: https://mydomain.tld/bar.tar.gz\n    - source_hash: sha1=5edb7d584b82ddcbf76e311601f5d4442974aaa5\n\n\n\n"
      },
      {
        "name": "source_hash_name",
        "defaultValue": "None",
        "isRequired": false,
        "description": "When source_hash refers to a hash file, Salt will try to find the correct hash by matching the filename part of the source URI. When managing a file with a source of salt://files/foo.tar.gz, then the following line in a hash file would match:\n\n\n\nacbd18db4cc2f85cedef654fccc4a4d8    foo.tar.gz\n\n\n\n\n\nThis line would also match:\n\n\n\nacbd18db4cc2f85cedef654fccc4a4d8    ./dir1/foo.tar.gz\n\n\n\n\n\nHowever, sometimes a hash file will include multiple similar paths:\n\n\n\n37b51d194a7513e45b56f6524f2d51f2    ./dir1/foo.txt\nacbd18db4cc2f85cedef654fccc4a4d8    ./dir2/foo.txt\n73feffa4b7f6bb68e44cf984c85f6e88    ./dir3/foo.txt\n\n\n\n\n\nIn cases like this, Salt may match the incorrect hash. This argument can be used to tell Salt which filename to match, to ensure that the correct hash is identified. For example:\n\n\n\n/var/www:\n  archive.extracted:\n    - source: https://mydomain.tld/dir2/foo.tar.gz\n    - source_hash: https://mydomain.tld/hashes\n    - source_hash_name: ./dir2/foo.tar.gz\n\n\n\n\n\n\nNote\n\nThis argument must contain the full filename entry from the checksum file, as this argument is meant to disambiguate matches for multiple files that have the same basename. So, in the example above, simply using foo.txt would not match.\n\n\n\n\n\nNew in version 2016.11.0.\n\n\n"
      },
      {
        "name": "source_hash_update",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Set this to True if archive should be extracted if source_hash has changed. This would extract regardless of the if_missing parameter.\n\n\n\n\nNew in version 2016.3.0.\n\n\n"
      },
      {
        "name": "skip_verify",
        "defaultValue": "False",
        "isRequired": false,
        "description": "If True, hash verification of remote file sources (http://, https://, ftp://) will be skipped, and the source_hash argument will be ignored.\n\n\n\n\nNew in version 2016.3.4.\n\n\n"
      },
      {
        "name": "password",
        "defaultValue": "None",
        "isRequired": false,
        "description": "**For ZIP archives only.** Password used for extraction.\n\n\n\n\nNew in version 2016.3.0.\n\n\n\n\n\nChanged in version 2016.11.0: The newly-added [archive.is_encrypted](../../modules/all/salt.modules.archive.html#salt.modules.archive.is_encrypted \"salt.modules.archive.is_encrypted\") function will be used to determine if the archive is password-protected. If it is, then the password argument will be required for the state to proceed.\n\n\n"
      },
      {
        "name": "options",
        "defaultValue": "None",
        "isRequired": false,
        "description": "**For tar and zip archives only.** This option can be used to specify a string of additional arguments to pass to the tar/zip command.\n\nIf this argument is not used, then the minion will attempt to use Python's native [tarfile](https://docs.python.org/2/library/tarfile.html)/[zipfile](https://docs.python.org/2/library/zipfile.html) support to extract it. For zip archives, this argument is mostly used to overwrite exsiting files with o.\n\nUsing this argument means that the tar or unzip command will be used, which is less platform-independent, so keep this in mind when using this option; the CLI options must be valid options for the tar/unzip implementation on the minion's OS.\n\n\n\n\nNew in version 2016.11.0: The tar_options and zip_options parameters have been deprecated in favor of a single argument name.\n\n\n\n\n\nChanged in version 2015.8.11,2016.3.2: XZ-compressed tar archives no longer require J to manually be set in the options, they are now detected automatically and decompressed using the [xz](http://tukaani.org/xz/) CLI command and extracted using tar xvf. This is a more platform-independent solution, as not all tar implementations support the J argument for extracting archives.\n\n\n\n\n\nNote\n\nFor tar archives, main operators like -x, --extract, --get, -c and -f/--file should *not* be used here.\n\n\n"
      },
      {
        "name": "list_options",
        "defaultValue": "None",
        "isRequired": false,
        "description": "**For tar archives only.** This state uses archive.list to discover the contents of the source archive so that it knows which file paths should exist on the minion if the archive has already been extracted. For the vast majority of tar archives, archive.list \"just works\". Archives compressed using gzip, bzip2, and xz/lzma (with the help of the [xz](http://tukaani.org/xz/) CLI command) are supported automatically. However, for archives compressed using other compression types, CLI options must be passed to archive.list.\n\nThis argument will be passed through to archive.list as its options argument, to allow it to successfully list the archive's contents. For the vast majority of archives, this argument should not need to be used, it should only be needed in cases where the state fails with an error stating that the archive's contents could not be listed.\n\n\n\n\nNew in version 2016.11.0.\n\n\n"
      },
      {
        "name": "force",
        "defaultValue": "False",
        "isRequired": false,
        "description": "If a path that should be occupied by a file in the extracted result is instead a directory (or vice-versa), the state will fail. Set this argument to True to force these paths to be removed in order to allow the archive to be extracted.\n\n\n\n\nWarning\n\nUse this option *very* carefully.\n\n\n\n\n\nNew in version 2016.11.0.\n\n\n"
      },
      {
        "name": "overwrite",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Set this to True to force the archive to be extracted. This is useful for cases where the filenames/directories have not changed, but the content of the files have.\n\n\n\n\nNew in version 2016.11.1.\n\n\n"
      },
      {
        "name": "clean",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Set this to True to remove any top-level files and recursively remove any top-level directory paths before extracting.\n\n\n\n\nNote\n\nFiles will only be cleaned first if extracting the archive is deemed necessary, either by paths missing on the minion, or if overwrite is set to True.\n\n\n\n\n\nNew in version 2016.11.1.\n\n\n"
      },
      {
        "name": "user",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The user to own each extracted file. Not available on Windows.\n\n\n\n\nNew in version 2015.8.0.\n\n\n\n\n\nChanged in version 2016.3.0: When used in combination with if_missing, ownership will only be enforced if if_missing is a directory.\n\n\n\n\n\nChanged in version 2016.11.0: Ownership will be enforced only on the file/directory paths found by running archive.list on the source archive. An alternative root directory on which to enforce ownership can be specified using the enforce_ownership_on argument.\n\n\n"
      },
      {
        "name": "group",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The group to own each extracted file. Not available on Windows.\n\n\n\n\nNew in version 2015.8.0.\n\n\n\n\n\nChanged in version 2016.3.0: When used in combination with if_missing, ownership will only be enforced if if_missing is a directory.\n\n\n\n\n\nChanged in version 2016.11.0: Ownership will be enforced only on the file/directory paths found by running archive.list on the source archive. An alternative root directory on which to enforce ownership can be specified using the enforce_ownership_on argument.\n\n\n"
      },
      {
        "name": "if_missing",
        "defaultValue": "None",
        "isRequired": false,
        "description": "If specified, this path will be checked, and if it exists then the archive will not be extracted. This path can be either a directory or a file, so this option can also be used to check for a semaphore file and conditionally skip extraction.\n\n\n\n\nChanged in version 2016.3.0: When used in combination with either user or group, ownership will only be enforced when if_missing is a directory.\n\n\n\n\n\nChanged in version 2016.11.0: Ownership enforcement is no longer tied to this argument, it is simply checked for existence and extraction will be skipped if if is present.\n\n\n"
      },
      {
        "name": "keep",
        "defaultValue": "False",
        "isRequired": false,
        "description": "For source archives not local to the minion (i.e. from the Salt\nfileserver or a remote source such as http(s) or ftp), Salt\nwill need to download the archive to the minion cache before they can\nbe extracted. After extraction, these source archives will be removed\nunless this argument is set to True."
      },
      {
        "name": "trim_output",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Useful for archives with many files in them. This can either be set to True (in which case only the first 100 files extracted will be in the state results), or it can be set to an integer for more exact control over the max number of files to include in the state results.\n\n\n\n\nNew in version 2016.3.0.\n\n\n"
      },
      {
        "name": "use_cmd_unzip",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Set to True for zip files to force usage of the [archive.cmd_unzip](../../modules/all/salt.modules.archive.html#salt.modules.archive.cmd_unzip \"salt.modules.archive.cmd_unzip\") function to extract.\n\n\n\n\nNew in version 2016.11.0.\n\n\n"
      },
      {
        "name": "extract_perms",
        "defaultValue": "True",
        "isRequired": false,
        "description": "**For ZIP archives only.** When using [archive.unzip](../../modules/all/salt.modules.archive.html#salt.modules.archive.unzip \"salt.modules.archive.unzip\") to extract ZIP archives, Salt works around an [upstream bug in Python](https://bugs.python.org/issue15795) to set the permissions on extracted files/directories to match those encoded into the ZIP archive. Set this argument to False to skip this workaround.\n\n\n\n\nNew in version 2016.11.0.\n\n\n"
      },
      {
        "name": "enforce_toplevel",
        "defaultValue": "True",
        "isRequired": false,
        "description": "This option will enforce a single directory at the top level of the source archive, to prevent extracting a 'tar-bomb'. Set this argument to False to allow archives with files (or multiple directories) at the top level to be extracted.\n\n\n\n\nNew in version 2016.11.0.\n\n\n"
      },
      {
        "name": "enforce_ownership_on",
        "defaultValue": "None",
        "isRequired": false,
        "description": "When user or group is specified, Salt will default to enforcing permissions on the file/directory paths detected by running archive.list on the source archive. Use this argument to specify an alternate directory on which ownership should be enforced.\n\n\n\n\nNote\n\nThis path must be within the path specified by the name argument.\n\n\n\n\n\nNew in version 2016.11.0.\n\n\n"
      },
      {
        "name": "archive_format",
        "defaultValue": "None",
        "isRequired": false,
        "description": "One of tar, zip, or rar.\n\n\n\n\nChanged in version 2016.11.0: If omitted, the archive format will be guessed based on the value of the source argument.\n\n\n"
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.artifactory.downloaded",
    "description": "Ensures that the artifact from artifactory exists at given location. If it doesn't exist, then\nit will be downloaded. It it already exists then the checksum of existing file is checked against checksum\nin artifactory. If it is different then the step will fail.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "artifact",
        "defaultValue": null,
        "isRequired": true,
        "description": "Details of the artifact to be downloaded from artifactory. Various options are:\n\n*   \n\nartifactory_url: URL of the artifactory instance\n\n*   \n\nrepository: Repository in artifactory\n\n*   \n\nartifact_id: Artifact ID\n\n*   \n\ngroup_id: Group ID\n\n*   \n\npackaging: Packaging\n\n*   \n\nclassifier: Classifier .. versionadded:: 2015.8.0\n\n*   \nversion: Version\n\n\nOne of the following: - Version to download - latest - Download the latest release of this artifact - latest_snapshot - Download the latest snapshot for this artifact\n\n\n\n\n*   \n\nusername: Artifactory username .. versionadded:: 2015.8.0\n\n*   \n\npassword: Artifactory password .. versionadded:: 2015.8.0\n\n\n"
      },
      {
        "name": "target_dir",
        "defaultValue": "'/tmp'",
        "isRequired": false,
        "description": "Directory where the artifact should be downloaded. By default it is downloaded to /tmp directory."
      },
      {
        "name": "target_file",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Target file to download artifact to. By default file name is resolved by artifactory."
      }
    ]
  },
  {
    "functionId": "salt.states.at.absent",
    "description": "Remove a job from queue\nThe 'kwargs' can include hour. minute. day. month. year",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "jobid",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.at.present",
    "description": "Add a job to queue.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "timespec",
        "defaultValue": null,
        "isRequired": true,
        "description": "The 'timespec' follows the format documented in the at(1) manpage."
      },
      {
        "name": "tag",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Make a tag for the job."
      },
      {
        "name": "user",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The user to run the at job\n\n\n\n\nNew in version 2014.1.4.\n\n\n"
      },
      {
        "name": "job",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Command to run."
      }
    ]
  },
  {
    "functionId": "salt.states.augeas.change",
    "description": "This state replaces setvalue().",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "State name"
      },
      {
        "name": "context",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A file path, prefixed by /files. Should resolve to an actual file (not an arbitrary augeas path). This is used to avoid duplicating the file name for each item in the changes list (for example, set bind 0.0.0.0 in the example below operates on the file specified by context). If context is not specified, a file path prefixed by /files should be included with the set command.\n\nThe file path is examined to determine if the specified changes are already present.\n\n\n\nredis-conf:\n  augeas.change:\n    - context: /files/etc/redis/redis.conf\n    - changes:\n      - set bind 0.0.0.0\n      - set maxmemory 1G\n\n\n\n"
      },
      {
        "name": "changes",
        "defaultValue": "None",
        "isRequired": false,
        "description": "List of changes that are issued to Augeas. Available commands are\nset, setm, mv/move, ins/insert, and\nrm/remove."
      },
      {
        "name": "lens",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The lens to use, needs to be suffixed with .lns, e.g.: Nginx.lns.\nSee the [list of stock lenses](http://augeas.net/stock_lenses.html)\nshipped with Augeas."
      },
      {
        "name": "load_path",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.aws_sqs.absent",
    "description": "Remove the named SQS queue if it exists.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Name of the SQS queue."
      },
      {
        "name": "region",
        "defaultValue": null,
        "isRequired": true,
        "description": "Region to remove the queue from"
      },
      {
        "name": "user",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Name of the user performing the SQS operations"
      },
      {
        "name": "opts",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Include additional arguments and options to the aws command line"
      }
    ]
  },
  {
    "functionId": "salt.states.aws_sqs.exists",
    "description": "Ensure the SQS queue exists.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Name of the SQS queue."
      },
      {
        "name": "region",
        "defaultValue": null,
        "isRequired": true,
        "description": "Region to create the queue"
      },
      {
        "name": "user",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Name of the user performing the SQS operations"
      },
      {
        "name": "opts",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Include additional arguments and options to the aws command line"
      }
    ]
  },
  {
    "functionId": "salt.states.beacon.absent",
    "description": "Ensure beacon is absent.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the beacon ensured absent."
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.beacon.disabled",
    "description": "Disable a beacon.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the beacon to enable."
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.beacon.enabled",
    "description": "Enable a beacon.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the beacon to enable."
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.beacon.present",
    "description": "Ensure beacon is configured with the included beacon data.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the beacon ensure is configured."
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.bigip.add_pool_member",
    "description": "A function to connect to a bigip device and add a new member to an existing pool.",
    "arguments": [
      {
        "name": "hostname",
        "defaultValue": null,
        "isRequired": true,
        "description": "The host/address of the bigip device"
      },
      {
        "name": "username",
        "defaultValue": null,
        "isRequired": true,
        "description": "The iControl REST username"
      },
      {
        "name": "password",
        "defaultValue": null,
        "isRequired": true,
        "description": "The iControl REST password"
      },
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the pool to modify"
      },
      {
        "name": "member",
        "defaultValue": null,
        "isRequired": true,
        "description": "The member to add to the pool"
      }
    ]
  },
  {
    "functionId": "salt.states.bigip.create_monitor",
    "description": "A function to connect to a bigip device and create a monitor.",
    "arguments": [
      {
        "name": "hostname",
        "defaultValue": null,
        "isRequired": true,
        "description": "The host/address of the bigip device"
      },
      {
        "name": "username",
        "defaultValue": null,
        "isRequired": true,
        "description": "The iControl REST username"
      },
      {
        "name": "password",
        "defaultValue": null,
        "isRequired": true,
        "description": "The iControl REST password"
      },
      {
        "name": "monitor_type",
        "defaultValue": null,
        "isRequired": true,
        "description": "The type of monitor to create"
      },
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the monitor to create"
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.bigip.create_node",
    "description": "Create a new node if it does not already exist.",
    "arguments": [
      {
        "name": "hostname",
        "defaultValue": null,
        "isRequired": true,
        "description": "The host/address of the bigip device"
      },
      {
        "name": "username",
        "defaultValue": null,
        "isRequired": true,
        "description": "The iControl REST username"
      },
      {
        "name": "password",
        "defaultValue": null,
        "isRequired": true,
        "description": "The iControl REST password"
      },
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the node to create"
      },
      {
        "name": "address",
        "defaultValue": null,
        "isRequired": true,
        "description": "The address of the node"
      }
    ]
  },
  {
    "functionId": "salt.states.bigip.create_pool",
    "description": "Create a new node if it does not already exist.",
    "arguments": [
      {
        "name": "hostname",
        "defaultValue": null,
        "isRequired": true,
        "description": "The host/address of the bigip device"
      },
      {
        "name": "username",
        "defaultValue": null,
        "isRequired": true,
        "description": "The iControl REST username"
      },
      {
        "name": "password",
        "defaultValue": null,
        "isRequired": true,
        "description": "The iControl REST password"
      },
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the pool to create"
      },
      {
        "name": "members",
        "defaultValue": "None",
        "isRequired": false,
        "description": "List of members to be added to the pool"
      },
      {
        "name": "allow_nat",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[yes | no]"
      },
      {
        "name": "allow_snat",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[yes | no]"
      },
      {
        "name": "description",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[string]"
      },
      {
        "name": "gateway_failsafe_device",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[string]"
      },
      {
        "name": "ignore_persisted_weight",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[enabled | disabled]"
      },
      {
        "name": "ip_tos_to_client",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[pass-through | [integer]]"
      },
      {
        "name": "ip_tos_to_server",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[pass-through | [integer]]"
      },
      {
        "name": "link_qos_to_client",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[pass-through | [integer]]"
      },
      {
        "name": "link_qos_to_server",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[pass-through | [integer]]"
      },
      {
        "name": "load_balancing_mode",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[dynamic-ratio-member | dynamic-ratio-node |\nfastest-app-response | fastest-node |\nleast-connections-members |\nleast-connections-node |\nleast-sessions |\nobserved-member | observed-node |\npredictive-member | predictive-node |\nratio-least-connections-member |\nratio-least-connections-node |\nratio-member | ratio-node | ratio-session |\nround-robin | weighted-least-connections-member |\nweighted-least-connections-node]"
      },
      {
        "name": "min_active_members",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[integer]"
      },
      {
        "name": "min_up_members",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[integer]"
      },
      {
        "name": "min_up_members_action",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[failover | reboot | restart-all]"
      },
      {
        "name": "min_up_members_checking",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[enabled | disabled]"
      },
      {
        "name": "monitor",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[name]"
      },
      {
        "name": "profiles",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[none | profile_name]"
      },
      {
        "name": "queue_depth_limit",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[integer]"
      },
      {
        "name": "queue_on_connection_limit",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[enabled | disabled]"
      },
      {
        "name": "queue_time_limit",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[integer]"
      },
      {
        "name": "reselect_tries",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[integer]"
      },
      {
        "name": "service_down_action",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[drop | none | reselect | reset]"
      },
      {
        "name": "slow_ramp_time",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[integer]"
      }
    ]
  },
  {
    "functionId": "salt.states.bigip.create_profile",
    "description": "A function to connect to a bigip device and create a profile.",
    "arguments": [
      {
        "name": "hostname",
        "defaultValue": null,
        "isRequired": true,
        "description": "The host/address of the bigip device"
      },
      {
        "name": "username",
        "defaultValue": null,
        "isRequired": true,
        "description": "The iControl REST username"
      },
      {
        "name": "password",
        "defaultValue": null,
        "isRequired": true,
        "description": "The iControl REST password"
      },
      {
        "name": "profile_type",
        "defaultValue": null,
        "isRequired": true,
        "description": "The type of profile to create"
      },
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the profile to create"
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.bigip.create_virtual",
    "description": "A function to connect to a bigip device and create a virtual server if it does not already exists.",
    "arguments": [
      {
        "name": "hostname",
        "defaultValue": null,
        "isRequired": true,
        "description": "The host/address of the bigip device"
      },
      {
        "name": "username",
        "defaultValue": null,
        "isRequired": true,
        "description": "The iControl REST username"
      },
      {
        "name": "password",
        "defaultValue": null,
        "isRequired": true,
        "description": "The iControl REST password"
      },
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the virtual to create"
      },
      {
        "name": "destination",
        "defaultValue": null,
        "isRequired": true,
        "description": "[ [virtual_address_name:port] | [ipv4:port] | [ipv6.port] ]"
      },
      {
        "name": "pool",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[ [pool_name] | none]"
      },
      {
        "name": "address_status",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[yes | no]"
      },
      {
        "name": "auto_lasthop",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[default | enabled | disabled ]"
      },
      {
        "name": "bwc_policy",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[none] | string]"
      },
      {
        "name": "cmp_enabled",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[yes | no]"
      },
      {
        "name": "connection_limit",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[integer]"
      },
      {
        "name": "dhcp_relay",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[yes | no}"
      },
      {
        "name": "description",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[string]"
      },
      {
        "name": "fallback_persistence",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[none | [profile name] ]"
      },
      {
        "name": "flow_eviction_policy",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[none | [eviction policy name] ]"
      },
      {
        "name": "gtm_score",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[integer]"
      },
      {
        "name": "ip_forward",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[yes | no]"
      },
      {
        "name": "ip_protocol",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[any | protocol]"
      },
      {
        "name": "internal",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[yes | no]"
      },
      {
        "name": "twelve_forward",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "last_hop_pool",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "mask",
        "defaultValue": "None",
        "isRequired": false,
        "description": "{ [ipv4] | [ipv6] }"
      },
      {
        "name": "mirror",
        "defaultValue": "None",
        "isRequired": false,
        "description": "{ [disabled | enabled | none] }"
      },
      {
        "name": "nat64",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[enabled | disabled]"
      },
      {
        "name": "persist",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[list]"
      },
      {
        "name": "profiles",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[none | default | list ]"
      },
      {
        "name": "policies",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[none | default | list ]"
      },
      {
        "name": "rate_class",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[name]"
      },
      {
        "name": "rate_limit",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[integer]"
      },
      {
        "name": "rate_limit_mode",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "rate_limit_dst",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "rate_limit_src",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "rules",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[none | list ]"
      },
      {
        "name": "related_rules",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[none | list ]"
      },
      {
        "name": "reject",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[yes | no]"
      },
      {
        "name": "source",
        "defaultValue": "None",
        "isRequired": false,
        "description": "{ [ipv4[/prefixlen]] | [ipv6[/prefixlen]] }"
      },
      {
        "name": "source_address_translation",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[none | snat:pool_name | lsn | automap | dictionary ]"
      },
      {
        "name": "source_port",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[change | preserve | preserve-strict]"
      },
      {
        "name": "virtual_state",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "traffic_classes",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[none | default | list ]"
      },
      {
        "name": "translate_address",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[enabled | disabled]"
      },
      {
        "name": "translate_port",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[enabled | disabled]"
      },
      {
        "name": "vlans",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[none | default | dictionary]\n\n\nvlan_ids\n[ list]\nenabled\n[ true | false ]\n\n"
      }
    ]
  },
  {
    "functionId": "salt.states.bigip.delete_monitor",
    "description": "Modify an existing monitor.  If it does exists, only\nthe parameters specified will be enforced.",
    "arguments": [
      {
        "name": "hostname",
        "defaultValue": null,
        "isRequired": true,
        "description": "The host/address of the bigip device"
      },
      {
        "name": "username",
        "defaultValue": null,
        "isRequired": true,
        "description": "The iControl REST username"
      },
      {
        "name": "password",
        "defaultValue": null,
        "isRequired": true,
        "description": "The iControl REST password"
      },
      {
        "name": "monitor_type",
        "defaultValue": null,
        "isRequired": true,
        "description": "The type of monitor to create"
      },
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the monitor to create"
      }
    ]
  },
  {
    "functionId": "salt.states.bigip.delete_node",
    "description": "Delete an existing node.",
    "arguments": [
      {
        "name": "hostname",
        "defaultValue": null,
        "isRequired": true,
        "description": "The host/address of the bigip device"
      },
      {
        "name": "username",
        "defaultValue": null,
        "isRequired": true,
        "description": "The iControl REST username"
      },
      {
        "name": "password",
        "defaultValue": null,
        "isRequired": true,
        "description": "The iControl REST password"
      },
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the node which will be deleted."
      }
    ]
  },
  {
    "functionId": "salt.states.bigip.delete_pool",
    "description": "Delete an existing pool.",
    "arguments": [
      {
        "name": "hostname",
        "defaultValue": null,
        "isRequired": true,
        "description": "The host/address of the bigip device"
      },
      {
        "name": "username",
        "defaultValue": null,
        "isRequired": true,
        "description": "The iControl REST username"
      },
      {
        "name": "password",
        "defaultValue": null,
        "isRequired": true,
        "description": "The iControl REST password"
      },
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the pool which will be deleted"
      }
    ]
  },
  {
    "functionId": "salt.states.bigip.delete_pool_member",
    "description": "Delete an existing pool member.",
    "arguments": [
      {
        "name": "hostname",
        "defaultValue": null,
        "isRequired": true,
        "description": "The host/address of the bigip device"
      },
      {
        "name": "username",
        "defaultValue": null,
        "isRequired": true,
        "description": "The iControl REST username"
      },
      {
        "name": "password",
        "defaultValue": null,
        "isRequired": true,
        "description": "The iControl REST password"
      },
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the pool to be modified"
      },
      {
        "name": "member",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the member to delete from the pool"
      }
    ]
  },
  {
    "functionId": "salt.states.bigip.delete_profile",
    "description": "Modify an existing profile.  If it does exists, only\nthe parameters specified will be enforced.",
    "arguments": [
      {
        "name": "hostname",
        "defaultValue": null,
        "isRequired": true,
        "description": "The host/address of the bigip device"
      },
      {
        "name": "username",
        "defaultValue": null,
        "isRequired": true,
        "description": "The iControl REST username"
      },
      {
        "name": "password",
        "defaultValue": null,
        "isRequired": true,
        "description": "The iControl REST password"
      },
      {
        "name": "profile_type",
        "defaultValue": null,
        "isRequired": true,
        "description": "The type of profile to create"
      },
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the profile to create"
      }
    ]
  },
  {
    "functionId": "salt.states.bigip.delete_virtual",
    "description": "Delete an existing virtual.",
    "arguments": [
      {
        "name": "hostname",
        "defaultValue": null,
        "isRequired": true,
        "description": "The host/address of the bigip device"
      },
      {
        "name": "username",
        "defaultValue": null,
        "isRequired": true,
        "description": "The iControl REST username"
      },
      {
        "name": "password",
        "defaultValue": null,
        "isRequired": true,
        "description": "The iControl REST password"
      },
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the virtual which will be deleted"
      }
    ]
  },
  {
    "functionId": "salt.states.bigip.list_monitor",
    "description": "A function to list an exsiting monitor.",
    "arguments": [
      {
        "name": "hostname",
        "defaultValue": null,
        "isRequired": true,
        "description": "The host/address of the bigip device"
      },
      {
        "name": "username",
        "defaultValue": null,
        "isRequired": true,
        "description": "The iControl REST username"
      },
      {
        "name": "password",
        "defaultValue": null,
        "isRequired": true,
        "description": "The iControl REST password"
      },
      {
        "name": "monitor_type",
        "defaultValue": null,
        "isRequired": true,
        "description": "The type of monitor to list"
      },
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the monitor to list"
      }
    ]
  },
  {
    "functionId": "salt.states.bigip.list_node",
    "description": "A function to connect to a bigip device and list a specific node.",
    "arguments": [
      {
        "name": "hostname",
        "defaultValue": null,
        "isRequired": true,
        "description": "The host/address of the bigip device"
      },
      {
        "name": "username",
        "defaultValue": null,
        "isRequired": true,
        "description": "The iControl REST username"
      },
      {
        "name": "password",
        "defaultValue": null,
        "isRequired": true,
        "description": "The iControl REST password"
      },
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the node to list."
      }
    ]
  },
  {
    "functionId": "salt.states.bigip.list_pool",
    "description": "A function to connect to a bigip device and list a specific pool.",
    "arguments": [
      {
        "name": "hostname",
        "defaultValue": null,
        "isRequired": true,
        "description": "The host/address of the bigip device"
      },
      {
        "name": "username",
        "defaultValue": null,
        "isRequired": true,
        "description": "The iControl REST username"
      },
      {
        "name": "password",
        "defaultValue": null,
        "isRequired": true,
        "description": "The iControl REST password"
      },
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the pool to list."
      }
    ]
  },
  {
    "functionId": "salt.states.bigip.list_profile",
    "description": "A function to list an existing profile.",
    "arguments": [
      {
        "name": "hostname",
        "defaultValue": null,
        "isRequired": true,
        "description": "The host/address of the bigip device"
      },
      {
        "name": "username",
        "defaultValue": null,
        "isRequired": true,
        "description": "The iControl REST username"
      },
      {
        "name": "password",
        "defaultValue": null,
        "isRequired": true,
        "description": "The iControl REST password"
      },
      {
        "name": "profile_type",
        "defaultValue": null,
        "isRequired": true,
        "description": "The type of profile to list"
      },
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the profile to list"
      }
    ]
  },
  {
    "functionId": "salt.states.bigip.list_virtual",
    "description": "A function to list a specific virtual.",
    "arguments": [
      {
        "name": "hostname",
        "defaultValue": null,
        "isRequired": true,
        "description": "The host/address of the bigip device"
      },
      {
        "name": "username",
        "defaultValue": null,
        "isRequired": true,
        "description": "The iControl REST username"
      },
      {
        "name": "password",
        "defaultValue": null,
        "isRequired": true,
        "description": "The iControl REST password"
      },
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the virtual to list"
      }
    ]
  },
  {
    "functionId": "salt.states.bigip.manage_monitor",
    "description": "Create a new monitor if a monitor of this type and name does not already exists.  If it does exists, only\nthe parameters specified will be enforced.",
    "arguments": [
      {
        "name": "hostname",
        "defaultValue": null,
        "isRequired": true,
        "description": "The host/address of the bigip device"
      },
      {
        "name": "username",
        "defaultValue": null,
        "isRequired": true,
        "description": "The iControl REST username"
      },
      {
        "name": "password",
        "defaultValue": null,
        "isRequired": true,
        "description": "The iControl REST password"
      },
      {
        "name": "monitor_type",
        "defaultValue": null,
        "isRequired": true,
        "description": "The type of monitor to create"
      },
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the monitor to create"
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.bigip.manage_node",
    "description": "Manages a node of a given bigip device.  If the node does not exist it will be created, otherwise,\nonly the properties which are different than the existing will be updated.",
    "arguments": [
      {
        "name": "hostname",
        "defaultValue": null,
        "isRequired": true,
        "description": "The host/address of the bigip device"
      },
      {
        "name": "username",
        "defaultValue": null,
        "isRequired": true,
        "description": "The iControl REST username"
      },
      {
        "name": "password",
        "defaultValue": null,
        "isRequired": true,
        "description": "The iControl REST password"
      },
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the node to manage."
      },
      {
        "name": "address",
        "defaultValue": null,
        "isRequired": true,
        "description": "The address of the node"
      },
      {
        "name": "connection_limit",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[integer]"
      },
      {
        "name": "description",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[string]"
      },
      {
        "name": "dynamic_ratio",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "logging",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[enabled | disabled]"
      },
      {
        "name": "monitor",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[[name] | none | default]"
      },
      {
        "name": "rate_limit",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[integer]"
      },
      {
        "name": "ratio",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[integer]"
      },
      {
        "name": "session",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[user-enabled | user-disabled]"
      },
      {
        "name": "node_state",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.bigip.manage_pool",
    "description": "Create a new pool if it does not already exist. Pool members are managed separately. Only the\nparameters specified are enforced.",
    "arguments": [
      {
        "name": "hostname",
        "defaultValue": null,
        "isRequired": true,
        "description": "The host/address of the bigip device"
      },
      {
        "name": "username",
        "defaultValue": null,
        "isRequired": true,
        "description": "The iControl REST username"
      },
      {
        "name": "password",
        "defaultValue": null,
        "isRequired": true,
        "description": "The iControl REST password"
      },
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the pool to create"
      },
      {
        "name": "allow_nat",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[yes | no]"
      },
      {
        "name": "allow_snat",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[yes | no]"
      },
      {
        "name": "description",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[string]"
      },
      {
        "name": "gateway_failsafe_device",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[string]"
      },
      {
        "name": "ignore_persisted_weight",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[enabled | disabled]"
      },
      {
        "name": "ip_tos_to_client",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[pass-through | [integer]]"
      },
      {
        "name": "ip_tos_to_server",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[pass-through | [integer]]"
      },
      {
        "name": "link_qos_to_client",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[pass-through | [integer]]"
      },
      {
        "name": "link_qos_to_server",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[pass-through | [integer]]"
      },
      {
        "name": "load_balancing_mode",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[dynamic-ratio-member | dynamic-ratio-node |\nfastest-app-response | fastest-node |\nleast-connections-members |\nleast-connections-node |\nleast-sessions |\nobserved-member | observed-node |\npredictive-member | predictive-node |\nratio-least-connections-member |\nratio-least-connections-node |\nratio-member | ratio-node | ratio-session |\nround-robin | weighted-least-connections-member |\nweighted-least-connections-node]"
      },
      {
        "name": "min_active_members",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[integer]"
      },
      {
        "name": "min_up_members",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[integer]"
      },
      {
        "name": "min_up_members_action",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[failover | reboot | restart-all]"
      },
      {
        "name": "min_up_members_checking",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[enabled | disabled]"
      },
      {
        "name": "monitor",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[name]"
      },
      {
        "name": "profiles",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[none | profile_name]"
      },
      {
        "name": "queue_depth_limit",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[integer]"
      },
      {
        "name": "queue_on_connection_limit",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[enabled | disabled]"
      },
      {
        "name": "queue_time_limit",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[integer]"
      },
      {
        "name": "reselect_tries",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[integer]"
      },
      {
        "name": "service_down_action",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[drop | none | reselect | reset]"
      },
      {
        "name": "slow_ramp_time",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[integer]"
      }
    ]
  },
  {
    "functionId": "salt.states.bigip.manage_pool_members",
    "description": "Manage the members of an existing pool.  This function replaces all current pool members.\nOnly the parameters specified are enforced.",
    "arguments": [
      {
        "name": "hostname",
        "defaultValue": null,
        "isRequired": true,
        "description": "The host/address of the bigip device"
      },
      {
        "name": "username",
        "defaultValue": null,
        "isRequired": true,
        "description": "The iControl REST username"
      },
      {
        "name": "password",
        "defaultValue": null,
        "isRequired": true,
        "description": "The iControl REST password"
      },
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the pool to modify"
      },
      {
        "name": "members",
        "defaultValue": null,
        "isRequired": true,
        "description": "list of pool members to manage."
      }
    ]
  },
  {
    "functionId": "salt.states.bigip.manage_profile",
    "description": "Create a new profile if a monitor of this type and name does not already exists.  If it does exists, only\nthe parameters specified will be enforced.",
    "arguments": [
      {
        "name": "hostname",
        "defaultValue": null,
        "isRequired": true,
        "description": "The host/address of the bigip device"
      },
      {
        "name": "username",
        "defaultValue": null,
        "isRequired": true,
        "description": "The iControl REST username"
      },
      {
        "name": "password",
        "defaultValue": null,
        "isRequired": true,
        "description": "The iControl REST password"
      },
      {
        "name": "profile_type",
        "defaultValue": null,
        "isRequired": true,
        "description": "The type of profile to create"
      },
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the profile to create"
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.bigip.manage_virtual",
    "description": "Manage a virtual server.  If a virtual does not exists it will be created, otherwise only the\nparameters specified will be enforced.",
    "arguments": [
      {
        "name": "hostname",
        "defaultValue": null,
        "isRequired": true,
        "description": "The host/address of the bigip device"
      },
      {
        "name": "username",
        "defaultValue": null,
        "isRequired": true,
        "description": "The iControl REST username"
      },
      {
        "name": "password",
        "defaultValue": null,
        "isRequired": true,
        "description": "The iControl REST password"
      },
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the virtual to create"
      },
      {
        "name": "destination",
        "defaultValue": null,
        "isRequired": true,
        "description": "[ [virtual_address_name:port] | [ipv4:port] | [ipv6.port] ]"
      },
      {
        "name": "pool",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[ [pool_name] | none]"
      },
      {
        "name": "address_status",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[yes | no]"
      },
      {
        "name": "auto_lasthop",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[default | enabled | disabled ]"
      },
      {
        "name": "bwc_policy",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[none] | string]"
      },
      {
        "name": "cmp_enabled",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[yes | no]"
      },
      {
        "name": "connection_limit",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[integer]"
      },
      {
        "name": "dhcp_relay",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[yes | no}"
      },
      {
        "name": "description",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[string]"
      },
      {
        "name": "fallback_persistence",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[none | [profile name] ]"
      },
      {
        "name": "flow_eviction_policy",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[none | [eviction policy name] ]"
      },
      {
        "name": "gtm_score",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[integer]"
      },
      {
        "name": "ip_forward",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[yes | no]"
      },
      {
        "name": "ip_protocol",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[any | protocol]"
      },
      {
        "name": "internal",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[yes | no]"
      },
      {
        "name": "twelve_forward",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "last_hop_pool",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "mask",
        "defaultValue": "None",
        "isRequired": false,
        "description": "{ [ipv4] | [ipv6] }"
      },
      {
        "name": "mirror",
        "defaultValue": "None",
        "isRequired": false,
        "description": "{ [disabled | enabled | none] }"
      },
      {
        "name": "nat64",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[enabled | disabled]"
      },
      {
        "name": "persist",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[list]"
      },
      {
        "name": "profiles",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[none | default | list ]"
      },
      {
        "name": "policies",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[none | default | list ]"
      },
      {
        "name": "rate_class",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[name]"
      },
      {
        "name": "rate_limit",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[integer]"
      },
      {
        "name": "rate_limit_mode",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "rate_limit_dst",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "rate_limit_src",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "rules",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[none | list ]"
      },
      {
        "name": "related_rules",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[none | list ]"
      },
      {
        "name": "reject",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[yes | no]"
      },
      {
        "name": "source",
        "defaultValue": "None",
        "isRequired": false,
        "description": "{ [ipv4[/prefixlen]] | [ipv6[/prefixlen]] }"
      },
      {
        "name": "source_address_translation",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[none | snat:pool_name | lsn | automap | dictionary ]"
      },
      {
        "name": "source_port",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[change | preserve | preserve-strict]"
      },
      {
        "name": "virtual_state",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "traffic_classes",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[none | default | list ]"
      },
      {
        "name": "translate_address",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[enabled | disabled]"
      },
      {
        "name": "translate_port",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[enabled | disabled]"
      },
      {
        "name": "vlans",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[none | default | dictionary]\n\n\nvlan_ids\n[ list]\nenabled\n[ true | false ]\n\n"
      }
    ]
  },
  {
    "functionId": "salt.states.bigip.modify_monitor",
    "description": "Modify an existing monitor.  If it does exists, only\nthe parameters specified will be enforced.",
    "arguments": [
      {
        "name": "hostname",
        "defaultValue": null,
        "isRequired": true,
        "description": "The host/address of the bigip device"
      },
      {
        "name": "username",
        "defaultValue": null,
        "isRequired": true,
        "description": "The iControl REST username"
      },
      {
        "name": "password",
        "defaultValue": null,
        "isRequired": true,
        "description": "The iControl REST password"
      },
      {
        "name": "monitor_type",
        "defaultValue": null,
        "isRequired": true,
        "description": "The type of monitor to create"
      },
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the monitor to create"
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.bigip.modify_node",
    "description": "Modify an existing node. Only a node which already exists will be modified and\nonly the parameters specified will be enforced.",
    "arguments": [
      {
        "name": "hostname",
        "defaultValue": null,
        "isRequired": true,
        "description": "The host/address of the bigip device"
      },
      {
        "name": "username",
        "defaultValue": null,
        "isRequired": true,
        "description": "The iControl REST username"
      },
      {
        "name": "password",
        "defaultValue": null,
        "isRequired": true,
        "description": "The iControl REST password"
      },
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the node to modify"
      },
      {
        "name": "connection_limit",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[integer]"
      },
      {
        "name": "description",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[string]"
      },
      {
        "name": "dynamic_ratio",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[integer]"
      },
      {
        "name": "logging",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[enabled | disabled]"
      },
      {
        "name": "monitor",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[[name] | none | default]"
      },
      {
        "name": "rate_limit",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[integer]"
      },
      {
        "name": "ratio",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[integer]"
      },
      {
        "name": "session",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[user-enabled | user-disabled]"
      },
      {
        "name": "node_state",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.bigip.modify_pool",
    "description": "Modify an existing pool. Pool members are managed separately. Only the\nparameters specified are enforced.",
    "arguments": [
      {
        "name": "hostname",
        "defaultValue": null,
        "isRequired": true,
        "description": "The host/address of the bigip device"
      },
      {
        "name": "username",
        "defaultValue": null,
        "isRequired": true,
        "description": "The iControl REST username"
      },
      {
        "name": "password",
        "defaultValue": null,
        "isRequired": true,
        "description": "The iControl REST password"
      },
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the pool to create"
      },
      {
        "name": "allow_nat",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[yes | no]"
      },
      {
        "name": "allow_snat",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[yes | no]"
      },
      {
        "name": "description",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[string]"
      },
      {
        "name": "gateway_failsafe_device",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[string]"
      },
      {
        "name": "ignore_persisted_weight",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[enabled | disabled]"
      },
      {
        "name": "ip_tos_to_client",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[pass-through | [integer]]"
      },
      {
        "name": "ip_tos_to_server",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[pass-through | [integer]]"
      },
      {
        "name": "link_qos_to_client",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[pass-through | [integer]]"
      },
      {
        "name": "link_qos_to_server",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[pass-through | [integer]]"
      },
      {
        "name": "load_balancing_mode",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[dynamic-ratio-member | dynamic-ratio-node |\nfastest-app-response | fastest-node |\nleast-connections-members |\nleast-connections-node |\nleast-sessions |\nobserved-member | observed-node |\npredictive-member | predictive-node |\nratio-least-connections-member |\nratio-least-connections-node |\nratio-member | ratio-node | ratio-session |\nround-robin | weighted-least-connections-member |\nweighted-least-connections-node]"
      },
      {
        "name": "min_active_members",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[integer]"
      },
      {
        "name": "min_up_members",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[integer]"
      },
      {
        "name": "min_up_members_action",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[failover | reboot | restart-all]"
      },
      {
        "name": "min_up_members_checking",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[enabled | disabled]"
      },
      {
        "name": "monitor",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[name]"
      },
      {
        "name": "profiles",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[none | profile_name]"
      },
      {
        "name": "queue_depth_limit",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[integer]"
      },
      {
        "name": "queue_on_connection_limit",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[enabled | disabled]"
      },
      {
        "name": "queue_time_limit",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[integer]"
      },
      {
        "name": "reselect_tries",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[integer]"
      },
      {
        "name": "service_down_action",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[drop | none | reselect | reset]"
      },
      {
        "name": "slow_ramp_time",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[integer]"
      }
    ]
  },
  {
    "functionId": "salt.states.bigip.modify_pool_member",
    "description": "A function to connect to a bigip device and modify a member of an existing pool.",
    "arguments": [
      {
        "name": "hostname",
        "defaultValue": null,
        "isRequired": true,
        "description": "The host/address of the bigip device"
      },
      {
        "name": "username",
        "defaultValue": null,
        "isRequired": true,
        "description": "The iControl REST username"
      },
      {
        "name": "password",
        "defaultValue": null,
        "isRequired": true,
        "description": "The iControl REST password"
      },
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the pool to modify"
      },
      {
        "name": "member",
        "defaultValue": null,
        "isRequired": true,
        "description": "The member modify"
      },
      {
        "name": "connection_limit",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[integer]"
      },
      {
        "name": "description",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[string]"
      },
      {
        "name": "dynamic_ratio",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[integer]"
      },
      {
        "name": "inherit_profile",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[enabled | disabled]"
      },
      {
        "name": "logging",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[enabled | disabled]"
      },
      {
        "name": "monitor",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[name]"
      },
      {
        "name": "priority_group",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[integer]"
      },
      {
        "name": "profiles",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[none | profile_name]"
      },
      {
        "name": "rate_limit",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[integer]"
      },
      {
        "name": "ratio",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[integer]"
      },
      {
        "name": "session",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[user-enabled | user-disabled]"
      },
      {
        "name": "member_state",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.bigip.modify_profile",
    "description": "Modify an existing profile.  If it does exists, only\nthe parameters specified will be enforced.",
    "arguments": [
      {
        "name": "hostname",
        "defaultValue": null,
        "isRequired": true,
        "description": "The host/address of the bigip device"
      },
      {
        "name": "username",
        "defaultValue": null,
        "isRequired": true,
        "description": "The iControl REST username"
      },
      {
        "name": "password",
        "defaultValue": null,
        "isRequired": true,
        "description": "The iControl REST password"
      },
      {
        "name": "profile_type",
        "defaultValue": null,
        "isRequired": true,
        "description": "The type of profile to create"
      },
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the profile to create"
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.bigip.modify_virtual",
    "description": "Modify an virtual server.  modify an existing virtual.  Only parameters specified will be enforced.",
    "arguments": [
      {
        "name": "hostname",
        "defaultValue": null,
        "isRequired": true,
        "description": "The host/address of the bigip device"
      },
      {
        "name": "username",
        "defaultValue": null,
        "isRequired": true,
        "description": "The iControl REST username"
      },
      {
        "name": "password",
        "defaultValue": null,
        "isRequired": true,
        "description": "The iControl REST password"
      },
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the virtual to create"
      },
      {
        "name": "destination",
        "defaultValue": null,
        "isRequired": true,
        "description": "[ [virtual_address_name:port] | [ipv4:port] | [ipv6.port] ]"
      },
      {
        "name": "pool",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[ [pool_name] | none]"
      },
      {
        "name": "address_status",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[yes | no]"
      },
      {
        "name": "auto_lasthop",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[default | enabled | disabled ]"
      },
      {
        "name": "bwc_policy",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[none] | string]"
      },
      {
        "name": "cmp_enabled",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[yes | no]"
      },
      {
        "name": "connection_limit",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[integer]"
      },
      {
        "name": "dhcp_relay",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[yes | no}"
      },
      {
        "name": "description",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[string]"
      },
      {
        "name": "fallback_persistence",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[none | [profile name] ]"
      },
      {
        "name": "flow_eviction_policy",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[none | [eviction policy name] ]"
      },
      {
        "name": "gtm_score",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[integer]"
      },
      {
        "name": "ip_forward",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[yes | no]"
      },
      {
        "name": "ip_protocol",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[any | protocol]"
      },
      {
        "name": "internal",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[yes | no]"
      },
      {
        "name": "twelve_forward",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "last_hop_pool",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "mask",
        "defaultValue": "None",
        "isRequired": false,
        "description": "{ [ipv4] | [ipv6] }"
      },
      {
        "name": "mirror",
        "defaultValue": "None",
        "isRequired": false,
        "description": "{ [disabled | enabled | none] }"
      },
      {
        "name": "nat64",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[enabled | disabled]"
      },
      {
        "name": "persist",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[list]"
      },
      {
        "name": "profiles",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[none | default | list ]"
      },
      {
        "name": "policies",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[none | default | list ]"
      },
      {
        "name": "rate_class",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[name]"
      },
      {
        "name": "rate_limit",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[integer]"
      },
      {
        "name": "rate_limit_mode",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "rate_limit_dst",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[integer]"
      },
      {
        "name": "rate_limit_src",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[integer]"
      },
      {
        "name": "rules",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[none | list ]"
      },
      {
        "name": "related_rules",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[none | list ]"
      },
      {
        "name": "reject",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[yes | no]"
      },
      {
        "name": "source",
        "defaultValue": "None",
        "isRequired": false,
        "description": "{ [ipv4[/prefixlen]] | [ipv6[/prefixlen]] }"
      },
      {
        "name": "source_address_translation",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[none | snat:pool_name | lsn | automap | dictionary ]"
      },
      {
        "name": "source_port",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[change | preserve | preserve-strict]"
      },
      {
        "name": "virtual_state",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "traffic_classes",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[none | default | list ]"
      },
      {
        "name": "translate_address",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[enabled | disabled]"
      },
      {
        "name": "translate_port",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[enabled | disabled]"
      },
      {
        "name": "vlans",
        "defaultValue": "None",
        "isRequired": false,
        "description": "[none | default | dictionary ]\n\n\nvlan_ids\n[ list]\nenabled\n[ true | false ]\n\n"
      }
    ]
  },
  {
    "functionId": "salt.states.blockdev.formatted",
    "description": "Manage filesystems of partitions.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the block device"
      },
      {
        "name": "fs_type",
        "defaultValue": "'ext4'",
        "isRequired": false,
        "description": "The filesystem it should be formatted as"
      },
      {
        "name": "force",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Force mke2fs to create a filesystem, even if the specified device is not a partition on a block special device. This option is only enabled for ext and xfs filesystems\n\nThis option is dangerous, use it with caution.\n\n\n\n\nNew in version 2016.11.0.\n\n\n"
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.blockdev.tuned",
    "description": "Manage options of block device",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the block device"
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.boto_apigateway.absent",
    "description": "Ensure the stage_name associated with the given api_name deployed by boto_apigateway's\npresent state is removed.  If the currently associated deployment to the given stage_name has\nno other stages associated with it, the deployment will also be removed.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Name of the swagger file in YAML format"
      },
      {
        "name": "api_name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Name of the rest api on AWS ApiGateway to ensure is absent."
      },
      {
        "name": "stage_name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Name of the stage to be removed irrespective of the swagger file content.\nIf the current deployment associated with the stage_name has no other stages associated\nwith it, the deployment will also be removed."
      },
      {
        "name": "nuke_api",
        "defaultValue": "False",
        "isRequired": false,
        "description": "If True, removes the API itself only if there are no other stages associated with any other\ndeployments once the given stage_name is removed."
      },
      {
        "name": "region",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Region to connect to."
      },
      {
        "name": "key",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Secret key to be used."
      },
      {
        "name": "keyid",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Access key to be used."
      },
      {
        "name": "profile",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A dict with region, key and keyid, or a pillar key (string) that\ncontains a dict with region, key and keyid."
      }
    ]
  },
  {
    "functionId": "salt.states.boto_apigateway.present",
    "description": "Ensure the spcified api_name with the corresponding swaggerfile is deployed to the\ngiven stage_name in AWS ApiGateway.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "api_name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "swagger_file",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "stage_name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "api_key_required",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "lambda_integration_role",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "lambda_region",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "stage_variables",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "region",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "key",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "keyid",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "profile",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "lambda_funcname_format",
        "defaultValue": "'{stage}_{api}_{resource}_{method}'",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "authorization_type",
        "defaultValue": "'NONE'",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.boto_asg.absent",
    "description": "Ensure the named autoscale group is deleted.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Name of the autoscale group."
      },
      {
        "name": "force",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Force deletion of autoscale group."
      },
      {
        "name": "region",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The region to connect to."
      },
      {
        "name": "key",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Secret key to be used."
      },
      {
        "name": "keyid",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Access key to be used."
      },
      {
        "name": "profile",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A dict with region, key and keyid, or a pillar key (string)\nthat contains a dict with region, key and keyid."
      },
      {
        "name": "remove_lc",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Delete the launch config as well."
      }
    ]
  },
  {
    "functionId": "salt.states.boto_asg.present",
    "description": "Ensure the autoscale group exists.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Name of the autoscale group."
      },
      {
        "name": "launch_config_name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Name of the launch config to use for the group.  Or, if\nlaunch_config is specified, this will be the launch config\nname's prefix.  (see below)"
      },
      {
        "name": "availability_zones",
        "defaultValue": null,
        "isRequired": true,
        "description": "List of availability zones for the group."
      },
      {
        "name": "min_size",
        "defaultValue": null,
        "isRequired": true,
        "description": "Minimum size of the group."
      },
      {
        "name": "max_size",
        "defaultValue": null,
        "isRequired": true,
        "description": "Maximum size of the group."
      },
      {
        "name": "launch_config",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A dictionary of launch config attributes. If specified, a launch config will be used or created, matching this set of attributes, and the autoscale group will be set to use that launch config. The launch config name will be the launch_config_name followed by a hyphen followed by a hash of the launch_config dict contents. Example:\n\n\n\nmy_asg:\n  boto_asg.present:\n  - launch_config:\n    - ebs_optimized: false\n    - instance_profile_name: my_iam_profile\n    - kernel_id: ''\n    - ramdisk_id: ''\n    - key_name: my_ssh_key\n    - image_name: aws2015091-hvm\n    - instance_type: c3.xlarge\n    - instance_monitoring: false\n    - security_groups:\n      - my_sec_group_01\n      - my_sec_group_02\n\n\n\n"
      },
      {
        "name": "desired_capacity",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The desired capacity of the group."
      },
      {
        "name": "load_balancers",
        "defaultValue": "None",
        "isRequired": false,
        "description": "List of load balancers for the group. Once set this can not be\nupdated (Amazon restriction)."
      },
      {
        "name": "default_cooldown",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Number of seconds after a Scaling Activity completes before any further\nscaling activities can start."
      },
      {
        "name": "health_check_type",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The service you want the health status from, Amazon EC2 or Elastic Load\nBalancer (EC2 or ELB)."
      },
      {
        "name": "health_check_period",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Length of time in seconds after a new EC2 instance comes into service\nthat Auto Scaling starts checking its health."
      },
      {
        "name": "placement_group",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Physical location of your cluster placement group created in Amazon\nEC2. Once set this can not be updated (Amazon restriction)."
      },
      {
        "name": "vpc_zone_identifier",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A list of the subnet identifiers of the Virtual Private Cloud."
      },
      {
        "name": "subnet_names",
        "defaultValue": "None",
        "isRequired": false,
        "description": "For VPC, a list of subnet names (NOT subnet IDs) to deploy into.\nExclusive with vpc_zone_identifier."
      },
      {
        "name": "tags",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A list of tags. Example:\n\n\n\n- key: 'key'\n  value: 'value'\n  propagate_at_launch: true\n\n\n\n"
      },
      {
        "name": "termination_policies",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A list of termination policies. Valid values are:\n\n*   OldestInstance\n*   NewestInstance\n*   OldestLaunchConfiguration\n*   ClosestToNextInstanceHour\n*   Default\n\n\nIf no value is specified, the Default value is used.\n"
      },
      {
        "name": "termination_policies_from_pillar",
        "defaultValue": "'boto_asg_termination_policies'",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "suspended_processes",
        "defaultValue": "None",
        "isRequired": false,
        "description": "List of processes to be suspended. see\n[http://docs.aws.amazon.com/AutoScaling/latest/DeveloperGuide/US_SuspendResume.html](http://docs.aws.amazon.com/AutoScaling/latest/DeveloperGuide/US_SuspendResume.html)"
      },
      {
        "name": "scaling_policies",
        "defaultValue": "None",
        "isRequired": false,
        "description": "List of scaling policies.  Each policy is a dict of key-values described by\n[https://boto.readthedocs.io/en/latest/ref/autoscale.html#boto.ec2.autoscale.policy.ScalingPolicy](https://boto.readthedocs.io/en/latest/ref/autoscale.html#boto.ec2.autoscale.policy.ScalingPolicy)"
      },
      {
        "name": "scaling_policies_from_pillar",
        "defaultValue": "'boto_asg_scaling_policies'",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "scheduled_actions",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "scheduled_actions_from_pillar",
        "defaultValue": "'boto_asg_scheduled_actions'",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "alarms",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "alarms_from_pillar",
        "defaultValue": "'boto_asg_alarms'",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "region",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The region to connect to."
      },
      {
        "name": "key",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Secret key to be used."
      },
      {
        "name": "keyid",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Access key to be used."
      },
      {
        "name": "profile",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A dict with region, key and keyid, or a pillar key (string)\nthat contains a dict with region, key and keyid."
      },
      {
        "name": "notification_arn",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The AWS arn that notifications will be sent to"
      },
      {
        "name": "notification_arn_from_pillar",
        "defaultValue": "'boto_asg_notification_arn'",
        "isRequired": false,
        "description": "name of the pillar dict that contains notifcation_arn settings.  A\nnotification_arn defined for this specific state will override the\none from pillar."
      },
      {
        "name": "notification_types",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A list of event names that will trigger a notification. The list of valid notification types is:\n\n*   autoscaling:EC2_INSTANCE_LAUNCH\n*   autoscaling:EC2_INSTANCE_LAUNCH_ERROR\n*   autoscaling:EC2_INSTANCE_TERMINATE\n*   autoscaling:EC2_INSTANCE_TERMINATE_ERROR\n*   autoscaling:TEST_NOTIFICATION\n"
      },
      {
        "name": "notification_types_from_pillar",
        "defaultValue": "'boto_asg_notification_types'",
        "isRequired": false,
        "description": "name of the pillar dict that contains notifcation_types settings.\nnotification_types defined for this specific state will override those\nfrom the pillar."
      }
    ]
  },
  {
    "functionId": "salt.states.boto_cfn.absent",
    "description": "Ensure cloud formation stack is absent.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "region",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "key",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "keyid",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "profile",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.boto_cfn.present",
    "description": "Ensure cloud formation stack is present.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "template_body",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "template_url",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "parameters",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "notification_arns",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "disable_rollback",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "timeout_in_minutes",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "capabilities",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "tags",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "on_failure",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "stack_policy_body",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "stack_policy_url",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "use_previous_template",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "stack_policy_during_update_body",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "stack_policy_during_update_url",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "region",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "key",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "keyid",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "profile",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.boto_cloudtrail.absent",
    "description": "Ensure trail with passed properties is absent.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the state definition."
      },
      {
        "name": "Name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Name of the trail."
      },
      {
        "name": "region",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Region to connect to."
      },
      {
        "name": "key",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Secret key to be used."
      },
      {
        "name": "keyid",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Access key to be used."
      },
      {
        "name": "profile",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A dict with region, key and keyid, or a pillar key (string) that\ncontains a dict with region, key and keyid."
      }
    ]
  },
  {
    "functionId": "salt.states.boto_cloudtrail.present",
    "description": "Ensure trail exists.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the state definition"
      },
      {
        "name": "Name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Name of the trail."
      },
      {
        "name": "S3BucketName",
        "defaultValue": null,
        "isRequired": true,
        "description": "Specifies the name of the Amazon S3 bucket designated for publishing log\nfiles."
      },
      {
        "name": "S3KeyPrefix",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Specifies the Amazon S3 key prefix that comes after the name of the\nbucket you have designated for log file delivery."
      },
      {
        "name": "SnsTopicName",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Specifies the name of the Amazon SNS topic defined for notification of\nlog file delivery. The maximum length is 256 characters."
      },
      {
        "name": "IncludeGlobalServiceEvents",
        "defaultValue": "True",
        "isRequired": false,
        "description": "Specifies whether the trail is publishing events from global services\nsuch as IAM to the log files."
      },
      {
        "name": "IsMultiRegionTrail",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "EnableLogFileValidation",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Specifies whether log file integrity validation is enabled. The default\nis false."
      },
      {
        "name": "CloudWatchLogsLogGroupArn",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Specifies a log group name using an Amazon Resource Name (ARN), a unique\nidentifier that represents the log group to which CloudTrail logs will\nbe delivered. Not required unless you specify CloudWatchLogsRoleArn."
      },
      {
        "name": "CloudWatchLogsRoleArn",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Specifies the role for the CloudWatch Logs endpoint to assume to write\nto a user's log group."
      },
      {
        "name": "KmsKeyId",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Specifies the KMS key ID to use to encrypt the logs delivered by\nCloudTrail. The value can be a an alias name prefixed by \"alias/\", a\nfully specified ARN to an alias, a fully specified ARN to a key, or a\nglobally unique identifier."
      },
      {
        "name": "LoggingEnabled",
        "defaultValue": "True",
        "isRequired": false,
        "description": "Whether logging should be enabled for the trail"
      },
      {
        "name": "Tags",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A dictionary of tags that should be set on the trail"
      },
      {
        "name": "region",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Region to connect to."
      },
      {
        "name": "key",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Secret key to be used."
      },
      {
        "name": "keyid",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Access key to be used."
      },
      {
        "name": "profile",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A dict with region, key and keyid, or a pillar key (string) that\ncontains a dict with region, key and keyid."
      }
    ]
  },
  {
    "functionId": "salt.states.boto_cloudwatch_alarm.absent",
    "description": "Ensure the named cloudwatch alarm is deleted.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Name of the alarm."
      },
      {
        "name": "region",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Region to connect to."
      },
      {
        "name": "key",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Secret key to be used."
      },
      {
        "name": "keyid",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Access key to be used."
      },
      {
        "name": "profile",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A dict with region, key and keyid, or a pillar key (string)\nthat contains a dict with region, key and keyid."
      }
    ]
  },
  {
    "functionId": "salt.states.boto_cloudwatch_alarm.present",
    "description": "Ensure the cloudwatch alarm exists.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Name of the alarm"
      },
      {
        "name": "attributes",
        "defaultValue": null,
        "isRequired": true,
        "description": "A dict of key/value cloudwatch alarm attributes."
      },
      {
        "name": "region",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Region to connect to."
      },
      {
        "name": "key",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Secret key to be used."
      },
      {
        "name": "keyid",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Access key to be used."
      },
      {
        "name": "profile",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A dict with region, key and keyid, or a pillar key (string)\nthat contains a dict with region, key and keyid."
      }
    ]
  },
  {
    "functionId": "salt.states.boto_cloudwatch_event.absent",
    "description": "Ensure CloudWatch event rule with passed properties is absent.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the state definition."
      },
      {
        "name": "Name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Name of the event rule."
      },
      {
        "name": "region",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Region to connect to."
      },
      {
        "name": "key",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Secret key to be used."
      },
      {
        "name": "keyid",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Access key to be used."
      },
      {
        "name": "profile",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A dict with region, key and keyid, or a pillar key (string) that\ncontains a dict with region, key and keyid."
      }
    ]
  },
  {
    "functionId": "salt.states.boto_cloudwatch_event.present",
    "description": "Ensure trail exists.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the state definition"
      },
      {
        "name": "Name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Name of the event rule."
      },
      {
        "name": "ScheduleExpression",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The scheduling expression. For example, \"cron(0 20 * * ? [*](#id1))\",\n\"rate(5 minutes)\""
      },
      {
        "name": "EventPattern",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The event pattern."
      },
      {
        "name": "Description",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A description of the rule"
      },
      {
        "name": "RoleArn",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The Amazon Resource Name (ARN) of the IAM role associated with the\nrule."
      },
      {
        "name": "State",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Indicates whether the rule is ENABLED or DISABLED."
      },
      {
        "name": "Targets",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A list of rresources to be invoked when the rule is triggered."
      },
      {
        "name": "region",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Region to connect to."
      },
      {
        "name": "key",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Secret key to be used."
      },
      {
        "name": "keyid",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Access key to be used."
      },
      {
        "name": "profile",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A dict with region, key and keyid, or a pillar key (string) that\ncontains a dict with region, key and keyid."
      }
    ]
  },
  {
    "functionId": "salt.states.boto_cognitoidentity.pool_absent",
    "description": "Ensure cognito identity pool with passed properties is absent.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the state definition."
      },
      {
        "name": "IdentityPoolName",
        "defaultValue": null,
        "isRequired": true,
        "description": "Name of the Cognito Identity Pool.  Please note that this may\nmatch multiple pools with the same given name, in which case,\nall will be removed."
      },
      {
        "name": "RemoveAllMatched",
        "defaultValue": "False",
        "isRequired": false,
        "description": "If True, all identity pools with the matching IdentityPoolName\nwill be removed.  If False and there are more than one identity pool\nwith the matching IdentityPoolName, no action will be taken.  If False\nand there is only one identity pool with the matching IdentityPoolName,\nthe identity pool will be removed."
      },
      {
        "name": "region",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Region to connect to."
      },
      {
        "name": "key",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Secret key to be used."
      },
      {
        "name": "keyid",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Access key to be used."
      },
      {
        "name": "profile",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A dict with region, key and keyid, or a pillar key (string) that\ncontains a dict with region, key and keyid."
      }
    ]
  },
  {
    "functionId": "salt.states.boto_cognitoidentity.pool_present",
    "description": "Ensure Cognito Identity Pool exists.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the state definition"
      },
      {
        "name": "IdentityPoolName",
        "defaultValue": null,
        "isRequired": true,
        "description": "Name of the Cognito Identity Pool"
      },
      {
        "name": "AuthenticatedRole",
        "defaultValue": null,
        "isRequired": true,
        "description": "An IAM role name or ARN that will be associated with temporary AWS\ncredentials for an authenticated cognito identity."
      },
      {
        "name": "AllowUnauthenticatedIdentities",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Whether to allow anonymous user identities"
      },
      {
        "name": "UnauthenticatedRole",
        "defaultValue": "None",
        "isRequired": false,
        "description": "An IAM role name or ARN that will be associated with anonymous\nuser identities"
      },
      {
        "name": "SupportedLoginProviders",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A dictionary or pillar that contains key:value pairs mapping provider\nnames to provider app IDs."
      },
      {
        "name": "DeveloperProviderName",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A string which is the domain by which Cognito will refer to your users.\nThis name acts as a placeholder that allows your backend and the Cognito\nservice to communicate about the developer provider.  Once you have set a\ndeveloper provider name, you cannot change it.  Please take care in setting\nthis parameter."
      },
      {
        "name": "OpenIdConnectProviderARNs",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A list or pillar name that contains a list of OpenID Connect provider ARNs."
      },
      {
        "name": "region",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Region to connect to."
      },
      {
        "name": "key",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Secret key to be used."
      },
      {
        "name": "keyid",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Access key to be used."
      },
      {
        "name": "profile",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A dict with region, key and keyid, or a pillar key (string) that\ncontains a dict with region, key and keyid."
      }
    ]
  },
  {
    "functionId": "salt.states.boto_datapipeline.absent",
    "description": "Ensure a pipeline with the service_name does not exist",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Name of the service to ensure a data pipeline does not exist for."
      },
      {
        "name": "region",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Region to connect to."
      },
      {
        "name": "key",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Secret key to be used."
      },
      {
        "name": "keyid",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Access key to be used."
      },
      {
        "name": "profile",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A dict with region, key and keyid, or a pillar key (string)\nthat contains a dict with region, key and keyid."
      }
    ]
  },
  {
    "functionId": "salt.states.boto_datapipeline.present",
    "description": "Ensure the data pipeline exists with matching definition.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Name of the service to ensure a data pipeline exists for."
      },
      {
        "name": "pipeline_objects",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Pipeline objects to use. Will override objects read from pillars."
      },
      {
        "name": "pipeline_objects_from_pillars",
        "defaultValue": "'boto_datapipeline_pipeline_objects'",
        "isRequired": false,
        "description": "The pillar key to use for lookup."
      },
      {
        "name": "parameter_objects",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Parameter objects to use. Will override objects read from pillars."
      },
      {
        "name": "parameter_objects_from_pillars",
        "defaultValue": "'boto_datapipeline_parameter_objects'",
        "isRequired": false,
        "description": "The pillar key to use for lookup."
      },
      {
        "name": "parameter_values",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Parameter values to use. Will override values read from pillars."
      },
      {
        "name": "parameter_values_from_pillars",
        "defaultValue": "'boto_datapipeline_parameter_values'",
        "isRequired": false,
        "description": "The pillar key to use for lookup."
      },
      {
        "name": "region",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Region to connect to."
      },
      {
        "name": "key",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Secret key to be used."
      },
      {
        "name": "keyid",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Access key to be used."
      },
      {
        "name": "profile",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A dict with region, key and keyid, or a pillar key (string)\nthat contains a dict with region, key and keyid."
      }
    ]
  },
  {
    "functionId": "salt.states.boto_dynamodb.absent",
    "description": "Ensure the DynamoDB table does not exist.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Name of the DynamoDB table."
      },
      {
        "name": "region",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Region to connect to."
      },
      {
        "name": "key",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Secret key to be used."
      },
      {
        "name": "keyid",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Access key to be used."
      },
      {
        "name": "profile",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A dict with region, key and keyid, or a pillar key (string)\nthat contains a dict with region, key and keyid."
      }
    ]
  },
  {
    "functionId": "salt.states.boto_dynamodb.present",
    "description": "Ensure the DynamoDB table exists.  Note: all properties of the table\ncan only be set during table creation.  Adding or changing\nindexes or key schema cannot be done after table creation",
    "arguments": [
      {
        "name": "name",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Name of the DynamoDB table"
      },
      {
        "name": "table_name",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Name of the DynamoDB table (deprecated)"
      },
      {
        "name": "region",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Region to connect to."
      },
      {
        "name": "key",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Secret key to be used."
      },
      {
        "name": "keyid",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Access key to be used."
      },
      {
        "name": "profile",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A dict with region, key and keyid, or a pillar key (string)\nthat contains a dict with region, key and keyid."
      },
      {
        "name": "read_capacity_units",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The read throughput for this table"
      },
      {
        "name": "write_capacity_units",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The write throughput for this table"
      },
      {
        "name": "alarms",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "alarms_from_pillar",
        "defaultValue": "'boto_dynamodb_alarms'",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "hash_key",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The name of the attribute that will be used as the hash key\nfor this table"
      },
      {
        "name": "hash_key_data_type",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The DynamoDB datatype of the hash key"
      },
      {
        "name": "range_key",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The name of the attribute that will be used as the range key\nfor this table"
      },
      {
        "name": "range_key_data_type",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The DynamoDB datatype of the range key"
      },
      {
        "name": "local_indexes",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The local indexes you would like to create"
      },
      {
        "name": "global_indexes",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The local indexes you would like to create"
      },
      {
        "name": "backup_configs_from_pillars",
        "defaultValue": "'boto_dynamodb_backup_configs'",
        "isRequired": false,
        "description": "Pillars to use to configure DataPipeline backups"
      }
    ]
  },
  {
    "functionId": "salt.states.boto_ec2.eni_absent",
    "description": "Ensure the EC2 ENI is absent.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Name tag associated with the ENI."
      },
      {
        "name": "release_eip",
        "defaultValue": "False",
        "isRequired": false,
        "description": "True/False - release any EIP associated with the ENI"
      },
      {
        "name": "region",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Region to connect to."
      },
      {
        "name": "key",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Secret key to be used."
      },
      {
        "name": "keyid",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Access key to be used."
      },
      {
        "name": "profile",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A dict with region, key and keyid, or a pillar key (string)\nthat contains a dict with region, key and keyid."
      }
    ]
  },
  {
    "functionId": "salt.states.boto_ec2.eni_present",
    "description": "Ensure the EC2 ENI exists.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Name tag associated with the ENI."
      },
      {
        "name": "subnet_id",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The VPC subnet ID the ENI will exist within."
      },
      {
        "name": "subnet_name",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The VPC subnet name the ENI will exist within."
      },
      {
        "name": "private_ip_address",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The private ip address to use for this ENI. If this is not specified\nAWS will automatically assign a private IP address to the ENI. Must be\nspecified at creation time; will be ignored afterward."
      },
      {
        "name": "description",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Description of the key."
      },
      {
        "name": "groups",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A list of security groups to apply to the ENI."
      },
      {
        "name": "source_dest_check",
        "defaultValue": "True",
        "isRequired": false,
        "description": "Boolean specifying whether source/destination checking is enabled on\nthe ENI."
      },
      {
        "name": "allocate_eip",
        "defaultValue": "None",
        "isRequired": false,
        "description": "allocate and associate an EIP to the ENI. Could be 'standard' to allocate Elastic IP to EC2 region or 'vpc' to get it for a particular VPC\n\n\n\n\nChanged in version 2016.11.0.\n\n\n"
      },
      {
        "name": "arecords",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A list of arecord dicts with attributes needed for the DNS add_record state. By default the boto_route53.add_record state will be used, which requires: name, zone, ttl, and identifier. See the boto_route53 state for information about these attributes. Other DNS modules can be called by specifying the provider keyword. By default, the private ENI IP address will be used, set 'public: True' in the arecord dict to use the ENI's public IP address\n\n\n\n\nNew in version 2016.3.0.\n\n\n"
      },
      {
        "name": "region",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Region to connect to."
      },
      {
        "name": "key",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Secret key to be used."
      },
      {
        "name": "keyid",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Access key to be used."
      },
      {
        "name": "profile",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A dict with region, key and keyid, or a pillar key (string)\nthat contains a dict with region, key and keyid."
      }
    ]
  },
  {
    "functionId": "salt.states.boto_ec2.instance_absent",
    "description": "Ensure an EC2 instance does not exist (is stopped and removed).",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "(string) - The name of the state definition."
      },
      {
        "name": "instance_name",
        "defaultValue": "None",
        "isRequired": false,
        "description": "(string) - The name of the instance."
      },
      {
        "name": "instance_id",
        "defaultValue": "None",
        "isRequired": false,
        "description": "(string) - The ID of the instance."
      },
      {
        "name": "release_eip",
        "defaultValue": "False",
        "isRequired": false,
        "description": "(bool)   - Release any associated EIPs during termination."
      },
      {
        "name": "region",
        "defaultValue": "None",
        "isRequired": false,
        "description": "(string) - Region to connect to."
      },
      {
        "name": "key",
        "defaultValue": "None",
        "isRequired": false,
        "description": "(string) - Secret key to be used."
      },
      {
        "name": "keyid",
        "defaultValue": "None",
        "isRequired": false,
        "description": "(string) - Access key to be used."
      },
      {
        "name": "profile",
        "defaultValue": "None",
        "isRequired": false,
        "description": "(variable) - A dict with region, key and keyid, or a pillar key (string)\nthat contains a dict with region, key and keyid."
      },
      {
        "name": "filters",
        "defaultValue": "None",
        "isRequired": false,
        "description": "(dict) - A dict of additional filters to use in matching the instance to\ndelete."
      }
    ]
  },
  {
    "functionId": "salt.states.boto_ec2.instance_present",
    "description": "Ensure an EC2 instance is running with the given attributes and state.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "(string) - The name of the state definition.  Recommended that this\nmatch the instance_name attribute (generally the FQDN of the instance)."
      },
      {
        "name": "instance_name",
        "defaultValue": "None",
        "isRequired": false,
        "description": "(string) - The name of the instance, generally its FQDN.  Exclusive with\n'instance_id'."
      },
      {
        "name": "instance_id",
        "defaultValue": "None",
        "isRequired": false,
        "description": "(string) - The ID of the instance (if known).  Exclusive with\n'instance_name'."
      },
      {
        "name": "image_id",
        "defaultValue": "None",
        "isRequired": false,
        "description": "(string) – The ID of the AMI image to run."
      },
      {
        "name": "image_name",
        "defaultValue": "None",
        "isRequired": false,
        "description": "(string) – The name of the AMI image to run."
      },
      {
        "name": "tags",
        "defaultValue": "None",
        "isRequired": false,
        "description": "(dict) - Tags to apply to the instance."
      },
      {
        "name": "key_name",
        "defaultValue": "None",
        "isRequired": false,
        "description": "(string) – The name of the key pair with which to launch instances."
      },
      {
        "name": "security_groups",
        "defaultValue": "None",
        "isRequired": false,
        "description": "(list of strings) – The names of the EC2 classic security groups with\nwhich to associate instances"
      },
      {
        "name": "user_data",
        "defaultValue": "None",
        "isRequired": false,
        "description": "(string) – The Base64-encoded MIME user data to be made available to the\ninstance(s) in this reservation."
      },
      {
        "name": "instance_type",
        "defaultValue": "None",
        "isRequired": false,
        "description": "(string) – The EC2 instance size/type.  Note that only certain types are\ncompatible with HVM based AMIs."
      },
      {
        "name": "placement",
        "defaultValue": "None",
        "isRequired": false,
        "description": "(string) – The Availability Zone to launch the instance into."
      },
      {
        "name": "kernel_id",
        "defaultValue": "None",
        "isRequired": false,
        "description": "(string) – The ID of the kernel with which to launch the instances."
      },
      {
        "name": "ramdisk_id",
        "defaultValue": "None",
        "isRequired": false,
        "description": "(string) – The ID of the RAM disk with which to launch the instances."
      },
      {
        "name": "vpc_id",
        "defaultValue": "None",
        "isRequired": false,
        "description": "(string) - The ID of a VPC to attach the instance to."
      },
      {
        "name": "vpc_name",
        "defaultValue": "None",
        "isRequired": false,
        "description": "(string) - The name of a VPC to attach the instance to."
      },
      {
        "name": "monitoring_enabled",
        "defaultValue": "None",
        "isRequired": false,
        "description": "(bool) – Enable detailed CloudWatch monitoring on the instance."
      },
      {
        "name": "subnet_id",
        "defaultValue": "None",
        "isRequired": false,
        "description": "(string) – The ID of the subnet within which to launch the instances for\nVPC."
      },
      {
        "name": "subnet_name",
        "defaultValue": "None",
        "isRequired": false,
        "description": "(string) – The name of the subnet within which to launch the instances\nfor VPC."
      },
      {
        "name": "private_ip_address",
        "defaultValue": "None",
        "isRequired": false,
        "description": "(string) – If you’re using VPC, you can optionally use this parameter to\nassign the instance a specific available IP address from the subnet\n(e.g., 10.0.0.25)."
      },
      {
        "name": "block_device_map",
        "defaultValue": "None",
        "isRequired": false,
        "description": "(boto.ec2.blockdevicemapping.BlockDeviceMapping) – A BlockDeviceMapping\ndata structure describing the EBS volumes associated with the Image."
      },
      {
        "name": "disable_api_termination",
        "defaultValue": "None",
        "isRequired": false,
        "description": "(bool) – If True, the instances will be locked and will not be able to\nbe terminated via the API."
      },
      {
        "name": "instance_initiated_shutdown_behavior",
        "defaultValue": "None",
        "isRequired": false,
        "description": "(string) – Specifies whether the instance stops or terminates on instance-initiated shutdown. Valid values are:\n\n> \n> \n> *   'stop'\n> *   'terminate'\n\n"
      },
      {
        "name": "placement_group",
        "defaultValue": "None",
        "isRequired": false,
        "description": "(string) – If specified, this is the name of the placement group in\nwhich the instance(s) will be launched."
      },
      {
        "name": "client_token",
        "defaultValue": "None",
        "isRequired": false,
        "description": "(string) – Unique, case-sensitive identifier you provide to ensure\nidempotency of the request. Maximum 64 ASCII characters."
      },
      {
        "name": "security_group_ids",
        "defaultValue": "None",
        "isRequired": false,
        "description": "(list of strings) – The IDs of the VPC security groups with which to\nassociate instances."
      },
      {
        "name": "security_group_names",
        "defaultValue": "None",
        "isRequired": false,
        "description": "(list of strings) – The names of the VPC security groups with which to\nassociate instances."
      },
      {
        "name": "additional_info",
        "defaultValue": "None",
        "isRequired": false,
        "description": "(string) – Specifies additional information to make available to the\ninstance(s)."
      },
      {
        "name": "tenancy",
        "defaultValue": "None",
        "isRequired": false,
        "description": "(string) – The tenancy of the instance you want to launch. An instance\nwith a tenancy of ‘dedicated’ runs on single-tenant hardware and can\nonly be launched into a VPC. Valid values are:”default” or “dedicated”.\nNOTE: To use dedicated tenancy you MUST specify a VPC subnet-ID as well."
      },
      {
        "name": "instance_profile_arn",
        "defaultValue": "None",
        "isRequired": false,
        "description": "(string) – The Amazon resource name (ARN) of the IAM Instance Profile\n(IIP) to associate with the instances."
      },
      {
        "name": "instance_profile_name",
        "defaultValue": "None",
        "isRequired": false,
        "description": "(string) – The name of the IAM Instance Profile (IIP) to associate with\nthe instances."
      },
      {
        "name": "ebs_optimized",
        "defaultValue": "None",
        "isRequired": false,
        "description": "(bool) – Whether the instance is optimized for EBS I/O. This\noptimization provides dedicated throughput to Amazon EBS and a tuned\nconfiguration stack to provide optimal EBS I/O performance. This\noptimization isn’t available with all instance types."
      },
      {
        "name": "network_interfaces",
        "defaultValue": "None",
        "isRequired": false,
        "description": "(boto.ec2.networkinterface.NetworkInterfaceCollection) – A\nNetworkInterfaceCollection data structure containing the ENI\nspecifications for the instance."
      },
      {
        "name": "network_interface_name",
        "defaultValue": "None",
        "isRequired": false,
        "description": "> (string) - The name of Elastic Network Interface to attach\n\n\n\n\n\nNew in version 2016.11.0.\n\n\n"
      },
      {
        "name": "network_interface_id",
        "defaultValue": "None",
        "isRequired": false,
        "description": "> (string) - The id of Elastic Network Interface to attach\n\n\n\n\n\nNew in version 2016.11.0.\n\n\n"
      },
      {
        "name": "attributes",
        "defaultValue": "None",
        "isRequired": false,
        "description": "(dict) - Instance attributes and value to be applied to the instance. Available options are:\n\n> \n> \n> *   instanceType - A valid instance type (m1.small)\n> *   kernel - Kernel ID (None)\n> *   ramdisk - Ramdisk ID (None)\n> *   userData - Base64 encoded String (None)\n> *   disableApiTermination - Boolean (true)\n> *   instanceInitiatedShutdownBehavior - stop|terminate\n> *   blockDeviceMapping - List of strings - ie: [‘/dev/sda=false’]\n> *   sourceDestCheck - Boolean (true)\n> *   groupSet - Set of Security Groups or IDs\n> *   ebsOptimized - Boolean (false)\n> *   sriovNetSupport - String - ie: ‘simple’\n\n"
      },
      {
        "name": "target_state",
        "defaultValue": "None",
        "isRequired": false,
        "description": "(string) - The desired target state of the instance. Available options are:\n\n> \n> \n> *   running\n> *   stopped\n\n\nNote that this option is currently UNIMPLEMENTED.\n"
      },
      {
        "name": "public_ip",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "allocation_id",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "allocate_eip",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "region",
        "defaultValue": "None",
        "isRequired": false,
        "description": "(string) - Region to connect to."
      },
      {
        "name": "key",
        "defaultValue": "None",
        "isRequired": false,
        "description": "(string) - Secret key to be used."
      },
      {
        "name": "keyid",
        "defaultValue": "None",
        "isRequired": false,
        "description": "(string) - Access key to be used."
      },
      {
        "name": "profile",
        "defaultValue": "None",
        "isRequired": false,
        "description": "(variable) - A dict with region, key and keyid, or a pillar key (string)\nthat contains a dict with region, key and keyid."
      }
    ]
  },
  {
    "functionId": "salt.states.boto_ec2.key_absent",
    "description": "Deletes a key pair",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "region",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "key",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "keyid",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "profile",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.boto_ec2.key_present",
    "description": "Ensure key pair is present.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "save_private",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "upload_public",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "region",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "key",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "keyid",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "profile",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.boto_ec2.snapshot_created",
    "description": "Create a snapshot from the given instance",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "ami_name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "instance_name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "wait_until_available",
        "defaultValue": "True",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "wait_timeout_seconds",
        "defaultValue": "300",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.boto_ec2.volume_absent",
    "description": "Ensure the EC2 volume is detached and absent.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "State definition name."
      },
      {
        "name": "volume_name",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Name tag associated with the volume.  For safety, if this matches more than\none volume, the state will refuse to apply."
      },
      {
        "name": "volume_id",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Resource ID of the volume."
      },
      {
        "name": "instance_name",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Only remove volume if it is attached to instance with this Name tag.\nExclusive with 'instance_id'.  Requires 'device'."
      },
      {
        "name": "instance_id",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Only remove volume if it is attached to this instance.\nExclusive with 'instance_name'.  Requires 'device'."
      },
      {
        "name": "device",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Match by device rather than ID.  Requires one of 'instance_name' or\n'instance_id'."
      },
      {
        "name": "region",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Region to connect to."
      },
      {
        "name": "key",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Secret key to be used."
      },
      {
        "name": "keyid",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Access key to be used."
      },
      {
        "name": "profile",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A dict with region, key and keyid, or a pillar key (string)\nthat contains a dict with region, key and keyid."
      }
    ]
  },
  {
    "functionId": "salt.states.boto_ec2.volumes_tagged",
    "description": "Ensure EC2 volume(s) matching the given filters have the defined tags.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "State definition name."
      },
      {
        "name": "tag_maps",
        "defaultValue": null,
        "isRequired": true,
        "description": "List of dicts of filters and tags, where 'filters' is a dict suitable for passing\nto the 'filters' argument of boto_ec2.get_all_volumes(), and 'tags' is a dict of\ntags to be set on volumes as matched by the given filters.  The filter syntax is\nextended to permit passing either a list of volume_ids or an instance_name (with\ninstance_name being the Name tag of the instance to which the desired volumes are\nmapped).  Each mapping in the list is applied separately, so multiple sets of\nvolumes can be all tagged differently with one call to this function."
      },
      {
        "name": "authoritative",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "region",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "key",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "keyid",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "profile",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.boto_elasticache.absent",
    "description": "Ensure the named elasticache cluster is deleted.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Name of the cache cluster."
      },
      {
        "name": "wait",
        "defaultValue": "True",
        "isRequired": false,
        "description": "Boolean. Wait for confirmation from boto that the cluster is in the\ndeleting state."
      },
      {
        "name": "region",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Region to connect to."
      },
      {
        "name": "key",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Secret key to be used."
      },
      {
        "name": "keyid",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Access key to be used."
      },
      {
        "name": "profile",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A dict with region, key and keyid, or a pillar key (string)\nthat contains a dict with region, key and keyid."
      }
    ]
  },
  {
    "functionId": "salt.states.boto_elasticache.creategroup",
    "description": "Ensure the a replication group is create.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Name of replication group"
      },
      {
        "name": "primary_cluster_id",
        "defaultValue": null,
        "isRequired": true,
        "description": "Name of the master cache node"
      },
      {
        "name": "replication_group_description",
        "defaultValue": null,
        "isRequired": true,
        "description": "Description for the group"
      },
      {
        "name": "wait",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Waits for the group to be available"
      },
      {
        "name": "region",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Region to connect to."
      },
      {
        "name": "key",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Secret key to be used."
      },
      {
        "name": "keyid",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Access key to be used."
      },
      {
        "name": "profile",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A dict with region, key and keyid, or a pillar key (string)\nthat contains a dict with region, key and keyid."
      }
    ]
  },
  {
    "functionId": "salt.states.boto_elasticache.present",
    "description": "Ensure the cache cluster exists.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Name of the cache cluster (cache cluster id)."
      },
      {
        "name": "engine",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The name of the cache engine to be used for this cache cluster. Valid\nvalues are memcached or redis."
      },
      {
        "name": "cache_node_type",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The compute and memory capacity of the nodes in the cache cluster.\ncache.t1.micro, cache.m1.small, etc. See: [https://boto.readthedocs.io/en/latest/ref/elasticache.html#boto.elasticache.layer1.ElastiCacheConnection.create_cache_cluster](https://boto.readthedocs.io/en/latest/ref/elasticache.html#boto.elasticache.layer1.ElastiCacheConnection.create_cache_cluster)"
      },
      {
        "name": "num_cache_nodes",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The number of cache nodes that the cache cluster will have."
      },
      {
        "name": "preferred_availability_zone",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The EC2 Availability Zone in which the cache cluster will be created.\nAll cache nodes belonging to a cache cluster are placed in the\npreferred availability zone."
      },
      {
        "name": "port",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The port number on which each of the cache nodes will accept\nconnections."
      },
      {
        "name": "cache_parameter_group_name",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The name of the cache parameter group to associate with this cache\ncluster. If this argument is omitted, the default cache parameter group\nfor the specified engine will be used."
      },
      {
        "name": "cache_security_group_names",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A list of cache security group names to associate with this cache\ncluster. Use this parameter only when you are creating a cluster\noutside of a VPC."
      },
      {
        "name": "replication_group_id",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The replication group to which this cache cluster should belong. If\nthis parameter is specified, the cache cluster will be added to the\nspecified replication group as a read replica; otherwise, the cache\ncluster will be a standalone primary that is not part of any\nreplication group."
      },
      {
        "name": "auto_minor_version_upgrade",
        "defaultValue": "True",
        "isRequired": false,
        "description": "Determines whether minor engine upgrades will be applied automatically\nto the cache cluster during the maintenance window. A value of True\nallows these upgrades to occur; False disables automatic upgrades."
      },
      {
        "name": "security_group_ids",
        "defaultValue": "None",
        "isRequired": false,
        "description": "One or more VPC security groups associated with the cache cluster. Use\nthis parameter only when you are creating a cluster in a VPC."
      },
      {
        "name": "cache_subnet_group_name",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The name of the cache subnet group to be used for the cache cluster.\nUse this parameter only when you are creating a cluster in a VPC."
      },
      {
        "name": "engine_version",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The version number of the cache engine to be used for this cluster."
      },
      {
        "name": "notification_topic_arn",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The Amazon Resource Name (ARN) of the Amazon Simple Notification\nService (SNS) topic to which notifications will be sent. The Amazon SNS\ntopic owner must be the same as the cache cluster owner."
      },
      {
        "name": "preferred_maintenance_window",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The weekly time range (in UTC) during which system maintenance can\noccur. Example: sun:05:00-sun:09:00"
      },
      {
        "name": "wait",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Boolean. Wait for confirmation from boto that the cluster is in the\navailable state."
      },
      {
        "name": "region",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Region to connect to."
      },
      {
        "name": "key",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Secret key to be used."
      },
      {
        "name": "keyid",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Access key to be used."
      },
      {
        "name": "profile",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A dict with region, key and keyid, or a pillar key (string)\nthat contains a dict with region, key and keyid."
      }
    ]
  },
  {
    "functionId": "salt.states.boto_elasticache.subnet_group_present",
    "description": "Ensure ElastiCache subnet group exists.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name for the ElastiCache subnet group. This value is stored as a lowercase string."
      },
      {
        "name": "subnet_ids",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A list of VPC subnet IDs for the cache subnet group.  Exclusive with subnet_names."
      },
      {
        "name": "subnet_names",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A list of VPC subnet names for the cache subnet group.  Exclusive with subnet_ids."
      },
      {
        "name": "description",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Subnet group description."
      },
      {
        "name": "tags",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A list of tags."
      },
      {
        "name": "region",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Region to connect to."
      },
      {
        "name": "key",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Secret key to be used."
      },
      {
        "name": "keyid",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Access key to be used."
      },
      {
        "name": "profile",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A dict with region, key and keyid, or a pillar key (string) that\ncontains a dict with region, key and keyid."
      }
    ]
  },
  {
    "functionId": "salt.states.boto_elasticsearch_domain.absent",
    "description": "Ensure domain with passed properties is absent.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the state definition."
      },
      {
        "name": "DomainName",
        "defaultValue": null,
        "isRequired": true,
        "description": "Name of the domain."
      },
      {
        "name": "region",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Region to connect to."
      },
      {
        "name": "key",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Secret key to be used."
      },
      {
        "name": "keyid",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Access key to be used."
      },
      {
        "name": "profile",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A dict with region, key and keyid, or a pillar key (string) that\ncontains a dict with region, key and keyid."
      }
    ]
  },
  {
    "functionId": "salt.states.boto_elasticsearch_domain.present",
    "description": "Ensure domain exists.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the state definition"
      },
      {
        "name": "DomainName",
        "defaultValue": null,
        "isRequired": true,
        "description": "Name of the domain."
      },
      {
        "name": "ElasticsearchClusterConfig",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Configuration options for an Elasticsearch domain. Specifies the instance type and number of instances in the domain cluster.\n\nInstanceType (string) -- The instance type for an Elasticsearch cluster.\n\nInstanceCount (integer) -- The number of instances in the specified domain cluster.\n\nDedicatedMasterEnabled (boolean) -- A boolean value to indicate whether a dedicated master node is enabled. See About Dedicated Master Nodes for more information.\n\nZoneAwarenessEnabled (boolean) -- A boolean value to indicate whether zone awareness is enabled. See About Zone Awareness for more information.\n\nDedicatedMasterType (string) -- The instance type for a dedicated master node.\n\nDedicatedMasterCount (integer) -- Total number of dedicated master nodes, active and on standby, for the cluster.\n"
      },
      {
        "name": "EBSOptions",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Options to enable, disable and specify the type and size of EBS storage volumes.\n\nEBSEnabled (boolean) -- Specifies whether EBS-based storage is enabled.\n\nVolumeType (string) -- Specifies the volume type for EBS-based storage.\n\nVolumeSize (integer) -- Integer to specify the size of an EBS volume.\n\nIops (integer) -- Specifies the IOPD for a Provisioned IOPS EBS volume (SSD).\n"
      },
      {
        "name": "AccessPolicies",
        "defaultValue": "None",
        "isRequired": false,
        "description": "IAM access policy"
      },
      {
        "name": "SnapshotOptions",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Option to set time, in UTC format, of the daily automated snapshot. Default value is 0 hours.\n\nAutomatedSnapshotStartHour (integer) -- Specifies the time, in UTC format, when the service takes a daily automated snapshot of the specified Elasticsearch domain. Default value is 0 hours.\n"
      },
      {
        "name": "AdvancedOptions",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Option to allow references to indices in an HTTP request body. Must be\nfalse when configuring access to individual sub-resources. By default,\nthe value is true ."
      },
      {
        "name": "Tags",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "region",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Region to connect to."
      },
      {
        "name": "key",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Secret key to be used."
      },
      {
        "name": "keyid",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Access key to be used."
      },
      {
        "name": "profile",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A dict with region, key and keyid, or a pillar key (string) that\ncontains a dict with region, key and keyid."
      }
    ]
  },
  {
    "functionId": "salt.states.boto_elb.absent",
    "description": "Ensure an ELB does not exist",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "name of the ELB"
      },
      {
        "name": "region",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "key",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "keyid",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "profile",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.boto_elb.present",
    "description": "Ensure the ELB exists.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Name of the ELB."
      },
      {
        "name": "listeners",
        "defaultValue": null,
        "isRequired": true,
        "description": "A list of listener lists; example:\n\n\n\n[\n    ['443', 'HTTPS', 'arn:aws:iam::1111111:server-certificate/mycert'],\n    ['8443', '80', 'HTTPS', 'HTTP', 'arn:aws:iam::1111111:server-certificate/mycert']\n]\n\n\n\n"
      },
      {
        "name": "availability_zones",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A list of availability zones for this ELB."
      },
      {
        "name": "subnets",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A list of subnet IDs in your VPC to attach to your LoadBalancer."
      },
      {
        "name": "subnet_names",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A list of subnet names in your VPC to attach to your LoadBalancer."
      },
      {
        "name": "security_groups",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The security groups assigned to your LoadBalancer within your VPC. Must be passed either as a list or a comma-separated string.\n\nFor example, a list:\n\n\n\n- security_groups:\n  - secgroup-one\n  - secgroup-two\n\n\n\n\n\nOr as a comma-separated string:\n\n\n\n- security_groups: secgroup-one,secgroup-two\n\n\n\n"
      },
      {
        "name": "scheme",
        "defaultValue": "'internet-facing'",
        "isRequired": false,
        "description": "The type of a LoadBalancer, internet-facing or internal. Once\nset, can not be modified."
      },
      {
        "name": "health_check",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A dict defining the health check for this ELB."
      },
      {
        "name": "attributes",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A dict defining the attributes to set on this ELB. Unknown keys will be silently ignored.\n\nSee the [salt.modules.boto_elb.set_attributes](../../modules/all/salt.modules.boto_elb.html#salt.modules.boto_elb.set_attributes \"salt.modules.boto_elb.set_attributes\") function for recognized attributes.\n"
      },
      {
        "name": "attributes_from_pillar",
        "defaultValue": "'boto_elb_attributes'",
        "isRequired": false,
        "description": "name of pillar dict that contains attributes.   Attributes defined for this specific\nstate will override those from pillar."
      },
      {
        "name": "cnames",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A list of cname dicts with attributes needed for the DNS add_record state. By default the boto_route53.add_record state will be used, which requires: name, zone, ttl, and identifier. See the boto_route53 state for information about these attributes. Other DNS modules can be called by specifying the provider keyword. the cnames dict will be passed to the state as kwargs.\n\nSee the [salt.states.boto_route53](salt.states.boto_route53.html#module-salt.states.boto_route53 \"salt.states.boto_route53\") state for information about these attributes.\n"
      },
      {
        "name": "alarms",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "alarms_from_pillar",
        "defaultValue": "'boto_elb_alarms'",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "policies",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "policies_from_pillar",
        "defaultValue": "'boto_elb_policies'",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "backends",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "region",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Region to connect to."
      },
      {
        "name": "key",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Secret key to be used."
      },
      {
        "name": "keyid",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Access key to be used."
      },
      {
        "name": "profile",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A dict with region, key and keyid, or a pillar key (string)\nthat contains a dict with region, key and keyid."
      },
      {
        "name": "wait_for_sync",
        "defaultValue": "True",
        "isRequired": false,
        "description": "Wait for an INSYNC change status from Route53."
      },
      {
        "name": "tags",
        "defaultValue": "None",
        "isRequired": false,
        "description": "dict of tags"
      },
      {
        "name": "instance_ids",
        "defaultValue": "None",
        "isRequired": false,
        "description": "list of instance ids.  The state will ensure that these, and ONLY these, instances\nare registered with the ELB.  This is additive with instance_names."
      },
      {
        "name": "instance_names",
        "defaultValue": "None",
        "isRequired": false,
        "description": "list of instance names.  The state will ensure that these, and ONLY these, instances\nare registered with the ELB.  This is additive with instance_ids."
      }
    ]
  },
  {
    "functionId": "salt.states.boto_elb.register_instances",
    "description": "Add EC2 instance(s) to an Elastic Load Balancer. Removing an instance from\nthe instances list does not remove it from the ELB.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the Elastic Load Balancer to add EC2 instances to."
      },
      {
        "name": "instances",
        "defaultValue": null,
        "isRequired": true,
        "description": "A list of EC2 instance IDs that this Elastic Load Balancer should\ndistribute traffic to. This state will only ever append new instances\nto the ELB. EC2 instances already associated with this ELB will not be\nremoved if they are not in the instances list."
      },
      {
        "name": "region",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "key",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "keyid",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "profile",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.boto_iam.account_policy",
    "description": "Change account policy.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "allow_users_to_change_password",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "hard_expiry",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "max_password_age",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "minimum_password_length",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "password_reuse_prevention",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "require_lowercase_characters",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "require_numbers",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "require_symbols",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "require_uppercase_characters",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "region",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "key",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "keyid",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "profile",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.boto_iam.group_absent",
    "description": "Ensure the IAM group is absent.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "region",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "key",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "keyid",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "profile",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.boto_iam.group_present",
    "description": "Ensure the IAM group is present",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "policies",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "policies_from_pillars",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "managed_policies",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "users",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "path",
        "defaultValue": "'/'",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "region",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "key",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "keyid",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "profile",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.boto_iam.keys_absent",
    "description": "Ensure the IAM user access_key_id is absent.",
    "arguments": [
      {
        "name": "access_keys",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "user_name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "region",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "key",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "keyid",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "profile",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.boto_iam.keys_present",
    "description": "{0}\n{3}\n{1}\n\",",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "number",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "save_dir",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "region",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "key",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "keyid",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "profile",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "save_format",
        "defaultValue": "'{2}\\n{0}\\n{3}\\n{1}\\n'",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.boto_iam.policy_absent",
    "description": "Ensure the IAM managed policy with the specified name is absent",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "region",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "key",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "keyid",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "profile",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.boto_iam.policy_present",
    "description": "Ensure the IAM managed policy is present",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "policy_document",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "path",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "description",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "region",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "key",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "keyid",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "profile",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.boto_iam.saml_provider_absent",
    "description": "Ensure the SAML provider with the specified name is absent.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "region",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "key",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "keyid",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "profile",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.boto_iam.saml_provider_present",
    "description": "Ensure the SAML provider with the specified name is present.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "saml_metadata_document",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "region",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "key",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "keyid",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "profile",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.boto_iam.server_cert_absent",
    "description": "Deletes a server certificate.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "region",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "key",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "keyid",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "profile",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.boto_iam.server_cert_present",
    "description": "Crete server certificate.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "public_key",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "private_key",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "cert_chain",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "path",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "region",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "key",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "keyid",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "profile",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.boto_iam.user_absent",
    "description": "Ensure the IAM user is absent. User cannot be deleted if it has keys.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "delete_keys",
        "defaultValue": "True",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "delete_mfa_devices",
        "defaultValue": "True",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "delete_profile",
        "defaultValue": "True",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "region",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "key",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "keyid",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "profile",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.boto_iam.user_present",
    "description": "Ensure the IAM user is present",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "policies",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "policies_from_pillars",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "managed_policies",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "password",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "path",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "region",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "key",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "keyid",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "profile",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.boto_iam_role.absent",
    "description": "Ensure the IAM role is deleted.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Name of the IAM role."
      },
      {
        "name": "region",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Region to connect to."
      },
      {
        "name": "key",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Secret key to be used."
      },
      {
        "name": "keyid",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Access key to be used."
      },
      {
        "name": "profile",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A dict with region, key and keyid, or a pillar key (string)\nthat contains a dict with region, key and keyid."
      }
    ]
  },
  {
    "functionId": "salt.states.boto_iam_role.present",
    "description": "Ensure the IAM role exists.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Name of the IAM role."
      },
      {
        "name": "policy_document",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The policy that grants an entity permission to assume the role. (See [https://boto.readthedocs.io/en/latest/ref/iam.html#boto.iam.connection.IAMConnection.create_role](https://boto.readthedocs.io/en/latest/ref/iam.html#boto.iam.connection.IAMConnection.create_role))"
      },
      {
        "name": "path",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The path to the role/instance profile. (See [https://boto.readthedocs.io/en/latest/ref/iam.html#boto.iam.connection.IAMConnection.create_role](https://boto.readthedocs.io/en/latest/ref/iam.html#boto.iam.connection.IAMConnection.create_role))"
      },
      {
        "name": "policies",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A dict of IAM role policies."
      },
      {
        "name": "policies_from_pillars",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A list of pillars that contain role policy dicts. Policies in the\npillars will be merged in the order defined in the list and key\nconflicts will be handled by later defined keys overriding earlier\ndefined keys. The policies defined here will be merged with the\npolicies defined in the policies argument. If keys conflict, the keys\nin the policies argument will override the keys defined in\npolicies_from_pillars."
      },
      {
        "name": "managed_policies",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A list of (AWS or Customer) managed policies to be attached to the role."
      },
      {
        "name": "create_instance_profile",
        "defaultValue": "True",
        "isRequired": false,
        "description": "A boolean of whether or not to create an instance profile and associate\nit with this role."
      },
      {
        "name": "region",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Region to connect to."
      },
      {
        "name": "key",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Secret key to be used."
      },
      {
        "name": "keyid",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Access key to be used."
      },
      {
        "name": "profile",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A dict with region, key and keyid, or a pillar key (string)\nthat contains a dict with region, key and keyid."
      },
      {
        "name": "delete_policies",
        "defaultValue": "True",
        "isRequired": false,
        "description": "Deletes existing policies that are not in the given list of policies. Default value is True. If False is specified, existing policies will not be deleted allowing manual modifications on the IAM role to be persistent.\n\n\n\n\nNew in version 2015.8.0.\n\n\n"
      }
    ]
  },
  {
    "functionId": "salt.states.boto_iot.policy_absent",
    "description": "Ensure policy with passed properties is absent.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the state definition."
      },
      {
        "name": "policyName",
        "defaultValue": null,
        "isRequired": true,
        "description": "Name of the policy."
      },
      {
        "name": "region",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Region to connect to."
      },
      {
        "name": "key",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Secret key to be used."
      },
      {
        "name": "keyid",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Access key to be used."
      },
      {
        "name": "profile",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A dict with region, key and keyid, or a pillar key (string) that\ncontains a dict with region, key and keyid."
      }
    ]
  },
  {
    "functionId": "salt.states.boto_iot.policy_attached",
    "description": "Ensure policy is attached to the given principal.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the state definition"
      },
      {
        "name": "policyName",
        "defaultValue": null,
        "isRequired": true,
        "description": "Name of the policy."
      },
      {
        "name": "principal",
        "defaultValue": null,
        "isRequired": true,
        "description": "The principal which can be a certificate ARN or a Cognito ID."
      },
      {
        "name": "region",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Region to connect to."
      },
      {
        "name": "key",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Secret key to be used."
      },
      {
        "name": "keyid",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Access key to be used."
      },
      {
        "name": "profile",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A dict with region, key and keyid, or a pillar key (string) that\ncontains a dict with region, key and keyid."
      }
    ]
  },
  {
    "functionId": "salt.states.boto_iot.policy_detached",
    "description": "Ensure policy is attached to the given principal.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the state definition."
      },
      {
        "name": "policyName",
        "defaultValue": null,
        "isRequired": true,
        "description": "Name of the policy."
      },
      {
        "name": "principal",
        "defaultValue": null,
        "isRequired": true,
        "description": "The principal which can be a certificate ARN or a Cognito ID."
      },
      {
        "name": "region",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Region to connect to."
      },
      {
        "name": "key",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Secret key to be used."
      },
      {
        "name": "keyid",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Access key to be used."
      },
      {
        "name": "profile",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A dict with region, key and keyid, or a pillar key (string) that\ncontains a dict with region, key and keyid."
      }
    ]
  },
  {
    "functionId": "salt.states.boto_iot.policy_present",
    "description": "Ensure policy exists.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the state definition"
      },
      {
        "name": "policyName",
        "defaultValue": null,
        "isRequired": true,
        "description": "Name of the policy."
      },
      {
        "name": "policyDocument",
        "defaultValue": null,
        "isRequired": true,
        "description": "The JSON document that describes the policy. The length of the\npolicyDocument must be a minimum length of 1, with a maximum length of\n2048, excluding whitespace."
      },
      {
        "name": "region",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Region to connect to."
      },
      {
        "name": "key",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Secret key to be used."
      },
      {
        "name": "keyid",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Access key to be used."
      },
      {
        "name": "profile",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A dict with region, key and keyid, or a pillar key (string) that\ncontains a dict with region, key and keyid."
      }
    ]
  },
  {
    "functionId": "salt.states.boto_iot.thing_type_absent",
    "description": "Ensure thing type with passed properties is absent.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the state definition."
      },
      {
        "name": "thingTypeName",
        "defaultValue": null,
        "isRequired": true,
        "description": "Name of the thing type."
      },
      {
        "name": "region",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Region to connect to."
      },
      {
        "name": "key",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Secret key to be used."
      },
      {
        "name": "keyid",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Access key to be used."
      },
      {
        "name": "profile",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A dict with region, key and keyid, or a pillar key (string) that\ncontains a dict with region, key and keyid."
      }
    ]
  },
  {
    "functionId": "salt.states.boto_iot.thing_type_present",
    "description": "Ensure thing type exists.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the state definition"
      },
      {
        "name": "thingTypeName",
        "defaultValue": null,
        "isRequired": true,
        "description": "Name of the thing type"
      },
      {
        "name": "thingTypeDescription",
        "defaultValue": null,
        "isRequired": true,
        "description": "Description of the thing type"
      },
      {
        "name": "searchableAttributesList",
        "defaultValue": null,
        "isRequired": true,
        "description": "List of string attributes that are searchable for\nthe thing type"
      },
      {
        "name": "region",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Region to connect to."
      },
      {
        "name": "key",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Secret key to be used."
      },
      {
        "name": "keyid",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Access key to be used"
      },
      {
        "name": "profile",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A dict with region, key, keyid, or a pillar key (string) that\ncontains a dict with region, key, and keyid"
      }
    ]
  },
  {
    "functionId": "salt.states.boto_iot.topic_rule_absent",
    "description": "Ensure topic rule with passed properties is absent.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the state definition."
      },
      {
        "name": "ruleName",
        "defaultValue": null,
        "isRequired": true,
        "description": "Name of the policy."
      },
      {
        "name": "region",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Region to connect to."
      },
      {
        "name": "key",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Secret key to be used."
      },
      {
        "name": "keyid",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Access key to be used."
      },
      {
        "name": "profile",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A dict with region, key and keyid, or a pillar key (string) that\ncontains a dict with region, key and keyid."
      }
    ]
  },
  {
    "functionId": "salt.states.boto_iot.topic_rule_present",
    "description": "Ensure topic rule exists.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the state definition"
      },
      {
        "name": "ruleName",
        "defaultValue": null,
        "isRequired": true,
        "description": "Name of the rule."
      },
      {
        "name": "sql",
        "defaultValue": null,
        "isRequired": true,
        "description": "The SQL statement used to query the topic."
      },
      {
        "name": "actions",
        "defaultValue": null,
        "isRequired": true,
        "description": "The actions associated with the rule."
      },
      {
        "name": "description",
        "defaultValue": "''",
        "isRequired": false,
        "description": "The description of the rule."
      },
      {
        "name": "ruleDisabled",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "region",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Region to connect to."
      },
      {
        "name": "key",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Secret key to be used."
      },
      {
        "name": "keyid",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Access key to be used."
      },
      {
        "name": "profile",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A dict with region, key and keyid, or a pillar key (string) that\ncontains a dict with region, key and keyid."
      }
    ]
  },
  {
    "functionId": "salt.states.boto_kms.key_present",
    "description": "Ensure the KMS key exists. KMS keys can not be deleted, so this function\nmust be used to ensure the key is enabled or disabled.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Name of the key."
      },
      {
        "name": "policy",
        "defaultValue": null,
        "isRequired": true,
        "description": "Key usage policy."
      },
      {
        "name": "description",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Description of the key."
      },
      {
        "name": "key_usage",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Specifies the intended use of the key. Can only be set on creation,\ndefaults to ENCRYPT_DECRYPT, which is also the only supported option."
      },
      {
        "name": "grants",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A list of grants to apply to the key. Not currently implemented."
      },
      {
        "name": "manage_grants",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Whether or not to manage grants. False by default, which will not\nmanage any grants."
      },
      {
        "name": "key_rotation",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Whether or not key rotation is enabled for the key. False by default."
      },
      {
        "name": "enabled",
        "defaultValue": "True",
        "isRequired": false,
        "description": "Whether or not the key is enabled. True by default."
      },
      {
        "name": "region",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Region to connect to."
      },
      {
        "name": "key",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Secret key to be used."
      },
      {
        "name": "keyid",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Access key to be used."
      },
      {
        "name": "profile",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A dict with region, key and keyid, or a pillar key (string)\nthat contains a dict with region, key and keyid."
      }
    ]
  },
  {
    "functionId": "salt.states.boto_lambda.alias_absent",
    "description": "Ensure alias with passed properties is absent.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the state definition."
      },
      {
        "name": "FunctionName",
        "defaultValue": null,
        "isRequired": true,
        "description": "Name of the function."
      },
      {
        "name": "Name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Name of the alias."
      },
      {
        "name": "region",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Region to connect to."
      },
      {
        "name": "key",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Secret key to be used."
      },
      {
        "name": "keyid",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Access key to be used."
      },
      {
        "name": "profile",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A dict with region, key and keyid, or a pillar key (string) that\ncontains a dict with region, key and keyid."
      }
    ]
  },
  {
    "functionId": "salt.states.boto_lambda.alias_present",
    "description": "Ensure alias exists.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the state definition."
      },
      {
        "name": "FunctionName",
        "defaultValue": null,
        "isRequired": true,
        "description": "Name of the function for which you want to create an alias."
      },
      {
        "name": "Name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the alias to be created."
      },
      {
        "name": "FunctionVersion",
        "defaultValue": null,
        "isRequired": true,
        "description": "Function version for which you are creating the alias."
      },
      {
        "name": "Description",
        "defaultValue": "''",
        "isRequired": false,
        "description": "A short, user-defined function description. Lambda does not use this value. Assign a meaningful\ndescription as you see fit."
      },
      {
        "name": "region",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Region to connect to."
      },
      {
        "name": "key",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Secret key to be used."
      },
      {
        "name": "keyid",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Access key to be used."
      },
      {
        "name": "profile",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A dict with region, key and keyid, or a pillar key (string) that\ncontains a dict with region, key and keyid."
      }
    ]
  },
  {
    "functionId": "salt.states.boto_lambda.event_source_mapping_absent",
    "description": "Ensure event source mapping with passed properties is absent.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the state definition."
      },
      {
        "name": "EventSourceArn",
        "defaultValue": null,
        "isRequired": true,
        "description": "ARN of the event source."
      },
      {
        "name": "FunctionName",
        "defaultValue": null,
        "isRequired": true,
        "description": "Name of the lambda function."
      },
      {
        "name": "region",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Region to connect to."
      },
      {
        "name": "key",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Secret key to be used."
      },
      {
        "name": "keyid",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Access key to be used."
      },
      {
        "name": "profile",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A dict with region, key and keyid, or a pillar key (string) that\ncontains a dict with region, key and keyid."
      }
    ]
  },
  {
    "functionId": "salt.states.boto_lambda.event_source_mapping_present",
    "description": "Ensure event source mapping exists.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the state definition."
      },
      {
        "name": "EventSourceArn",
        "defaultValue": null,
        "isRequired": true,
        "description": "The Amazon Resource Name (ARN) of the Amazon Kinesis or the Amazon\nDynamoDB stream that is the event source."
      },
      {
        "name": "FunctionName",
        "defaultValue": null,
        "isRequired": true,
        "description": "The Lambda function to invoke when AWS Lambda detects an event on the stream.\n\nYou can specify an unqualified function name (for example, \"Thumbnail\") or you can specify Amazon Resource Name (ARN) of the function (for example, \"arn:aws:lambda:us-west-2:account-id:function:ThumbNail\"). AWS Lambda also allows you to specify only the account ID qualifier (for example, \"account-id:Thumbnail\"). Note that the length constraint applies only to the ARN. If you specify only the function name, it is limited to 64 character in length.\n"
      },
      {
        "name": "StartingPosition",
        "defaultValue": null,
        "isRequired": true,
        "description": "The position in the stream where AWS Lambda should start reading.\n(TRIM_HORIZON | LATEST)"
      },
      {
        "name": "Enabled",
        "defaultValue": "True",
        "isRequired": false,
        "description": "Indicates whether AWS Lambda should begin polling the event source. By\ndefault, Enabled is true."
      },
      {
        "name": "BatchSize",
        "defaultValue": "100",
        "isRequired": false,
        "description": "The largest number of records that AWS Lambda will retrieve from your\nevent source at the time of invoking your function. Your function\nreceives an event with all the retrieved records. The default is 100\nrecords."
      },
      {
        "name": "region",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Region to connect to."
      },
      {
        "name": "key",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Secret key to be used."
      },
      {
        "name": "keyid",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Access key to be used."
      },
      {
        "name": "profile",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A dict with region, key and keyid, or a pillar key (string) that\ncontains a dict with region, key and keyid."
      }
    ]
  },
  {
    "functionId": "salt.states.boto_lambda.function_absent",
    "description": "Ensure function with passed properties is absent.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the state definition."
      },
      {
        "name": "FunctionName",
        "defaultValue": null,
        "isRequired": true,
        "description": "Name of the function."
      },
      {
        "name": "region",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Region to connect to."
      },
      {
        "name": "key",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Secret key to be used."
      },
      {
        "name": "keyid",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Access key to be used."
      },
      {
        "name": "profile",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A dict with region, key and keyid, or a pillar key (string) that\ncontains a dict with region, key and keyid."
      }
    ]
  },
  {
    "functionId": "salt.states.boto_lambda.function_present",
    "description": "Ensure function exists.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the state definition"
      },
      {
        "name": "FunctionName",
        "defaultValue": null,
        "isRequired": true,
        "description": "Name of the Function."
      },
      {
        "name": "Runtime",
        "defaultValue": null,
        "isRequired": true,
        "description": "The Runtime environment for the function. One of\n'nodejs', 'java8', or 'python2.7'"
      },
      {
        "name": "Role",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name or ARN of the IAM role that the function assumes when it executes your\nfunction to access any other AWS resources."
      },
      {
        "name": "Handler",
        "defaultValue": null,
        "isRequired": true,
        "description": "The function within your code that Lambda calls to begin execution. For Node.js it is the\nmodule-name.*export* value in your function. For Java, it can be package.classname::handler or\npackage.class-name."
      },
      {
        "name": "ZipFile",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A path to a .zip file containing your deployment package. If this is\nspecified, S3Bucket and S3Key must not be specified."
      },
      {
        "name": "S3Bucket",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Amazon S3 bucket name where the .zip file containing your package is\nstored. If this is specified, S3Key must be specified and ZipFile must\nNOT be specified."
      },
      {
        "name": "S3Key",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The Amazon S3 object (the deployment package) key name you want to\nupload. If this is specified, S3Key must be specified and ZipFile must\nNOT be specified."
      },
      {
        "name": "S3ObjectVersion",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The version of S3 object to use. Optional, should only be specified if\nS3Bucket and S3Key are specified."
      },
      {
        "name": "Description",
        "defaultValue": "''",
        "isRequired": false,
        "description": "A short, user-defined function description. Lambda does not use this value. Assign a meaningful\ndescription as you see fit."
      },
      {
        "name": "Timeout",
        "defaultValue": "3",
        "isRequired": false,
        "description": "The function execution time at which Lambda should terminate this function. Because the execution\ntime has cost implications, we recommend you set this value based on your expected execution time.\nThe default is 3 seconds."
      },
      {
        "name": "MemorySize",
        "defaultValue": "128",
        "isRequired": false,
        "description": "The amount of memory, in MB, your function is given. Lambda uses this memory size to infer\nthe amount of CPU and memory allocated to your function. Your function use-case determines your\nCPU and memory requirements. For example, a database operation might need less memory compared\nto an image processing function. The default value is 128 MB. The value must be a multiple of\n64 MB."
      },
      {
        "name": "Permissions",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A list of permission definitions to be added to the function's policy"
      },
      {
        "name": "RoleRetries",
        "defaultValue": "5",
        "isRequired": false,
        "description": "IAM Roles may take some time to propagate to all regions once created.\nDuring that time function creation may fail; this state will\natuomatically retry this number of times. The default is 5."
      },
      {
        "name": "region",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Region to connect to."
      },
      {
        "name": "key",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Secret key to be used."
      },
      {
        "name": "keyid",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Access key to be used."
      },
      {
        "name": "profile",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A dict with region, key and keyid, or a pillar key (string) that\ncontains a dict with region, key and keyid."
      },
      {
        "name": "VpcConfig",
        "defaultValue": "None",
        "isRequired": false,
        "description": "If your Lambda function accesses resources in a VPC, you provide this parameter identifying the list of security group IDs and subnet IDs. These must belong to the same VPC. You must provide at least one security group and one subnet ID.\n\n\n\n\nNew in version 2016.11.0.\n\n\n"
      }
    ]
  },
  {
    "functionId": "salt.states.boto_lc.absent",
    "description": "Ensure the named launch configuration is deleted.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Name of the launch configuration."
      },
      {
        "name": "region",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The region to connect to."
      },
      {
        "name": "key",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Secret key to be used."
      },
      {
        "name": "keyid",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Access key to be used."
      },
      {
        "name": "profile",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A dict with region, key and keyid, or a pillar key (string)\nthat contains a dict with region, key and keyid."
      }
    ]
  },
  {
    "functionId": "salt.states.boto_lc.present",
    "description": "Ensure the launch configuration exists.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Name of the launch configuration."
      },
      {
        "name": "image_id",
        "defaultValue": null,
        "isRequired": true,
        "description": "AMI to use for instances. AMI must exist or creation of the launch\nconfiguration will fail."
      },
      {
        "name": "key_name",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Name of the EC2 key pair to use for instances. Key must exist or\ncreation of the launch configuration will fail."
      },
      {
        "name": "security_groups",
        "defaultValue": "None",
        "isRequired": false,
        "description": "List of Names or security group id’s of the security groups with which\nto associate the EC2 instances or VPC instances, respectively. Security\ngroups must exist, or creation of the launch configuration will fail."
      },
      {
        "name": "user_data",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The user data available to launched EC2 instances."
      },
      {
        "name": "cloud_init",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A dict of cloud_init configuration. Currently supported values:\nscripts, cloud-config. Mutually exclusive with user_data."
      },
      {
        "name": "instance_type",
        "defaultValue": "'m1.small'",
        "isRequired": false,
        "description": "The instance type. ex: m1.small."
      },
      {
        "name": "kernel_id",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The kernel id for the instance."
      },
      {
        "name": "ramdisk_id",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The RAM disk ID for the instance."
      },
      {
        "name": "block_device_mappings",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A dict of block device mappings that contains a dict with volume_type, delete_on_termination, iops, size, encrypted, snapshot_id.\n\n\nvolume_type\nIndicates what volume type to use. Valid values are standard, io1, gp2.\nDefault is standard.\ndelete_on_termination\nIndicates whether to delete the volume on instance termination (true) or\nnot (false).\niops\nFor Provisioned IOPS (SSD) volumes only. The number of I/O operations per\nsecond (IOPS) to provision for the volume.\nsize\nDesired volume size (in GiB).\nencrypted\nIndicates whether the volume should be encrypted. Encrypted EBS volumes must\nbe attached to instances that support Amazon EBS encryption. Volumes that are\ncreated from encrypted snapshots are automatically encrypted. There is no way\nto create an encrypted volume from an unencrypted snapshot or an unencrypted\nvolume from an encrypted snapshot.\n\n"
      },
      {
        "name": "instance_monitoring",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Whether instances in group are launched with detailed monitoring."
      },
      {
        "name": "spot_price",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The spot price you are bidding. Only applies if you are building an\nautoscaling group with spot instances."
      },
      {
        "name": "instance_profile_name",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The name or the Amazon Resource Name (ARN) of the instance profile\nassociated with the IAM role for the instance. Instance profile must\nexist or the creation of the launch configuration will fail."
      },
      {
        "name": "ebs_optimized",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Specifies whether the instance is optimized for EBS I/O (true) or not\n(false)."
      },
      {
        "name": "associate_public_ip_address",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Used for Auto Scaling groups that launch instances into an Amazon\nVirtual Private Cloud. Specifies whether to assign a public IP address\nto each instance launched in a Amazon VPC."
      },
      {
        "name": "region",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The region to connect to."
      },
      {
        "name": "key",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Secret key to be used."
      },
      {
        "name": "keyid",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Access key to be used."
      },
      {
        "name": "profile",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A dict with region, key and keyid, or a pillar key (string)\nthat contains a dict with region, key and keyid."
      }
    ]
  },
  {
    "functionId": "salt.states.boto_rds.absent",
    "description": "Ensure RDS instance is absent.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Name of the RDS instance."
      },
      {
        "name": "skip_final_snapshot",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Whether a final db snapshot is created before the instance is deleted.\nIf True, no snapshot is created.\nIf False, a snapshot is created before deleting the instance."
      },
      {
        "name": "final_db_snapshot_identifier",
        "defaultValue": "None",
        "isRequired": false,
        "description": "If a final snapshot is requested, this is the identifier used for that\nsnapshot."
      },
      {
        "name": "tags",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A list of tags."
      },
      {
        "name": "region",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Region to connect to."
      },
      {
        "name": "key",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Secret key to be used."
      },
      {
        "name": "keyid",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Access key to be used."
      },
      {
        "name": "profile",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A dict with region, key and keyid, or a pillar key (string) that\ncontains a dict with region, key and keyid."
      },
      {
        "name": "wait_for_deletion",
        "defaultValue": "True",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "timeout",
        "defaultValue": "180",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.boto_rds.parameter_present",
    "description": "Ensure DB parameter group exists and update parameters.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name for the parameter group."
      },
      {
        "name": "db_parameter_group_family",
        "defaultValue": null,
        "isRequired": true,
        "description": "The DB parameter group family name. A\nDB parameter group can be associated with one and only one DB\nparameter group family, and can be applied only to a DB instance\nrunning a database engine and engine version compatible with that\nDB parameter group family."
      },
      {
        "name": "description",
        "defaultValue": null,
        "isRequired": true,
        "description": "Parameter group description."
      },
      {
        "name": "parameters",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The DB parameters that need to be changed of type dictionary."
      },
      {
        "name": "apply_method",
        "defaultValue": "'pending-reboot'",
        "isRequired": false,
        "description": "The apply-immediate method can be used only for dynamic\nparameters; the pending-reboot method can be used with MySQL\nand Oracle DB instances for either dynamic or static\nparameters. For Microsoft SQL Server DB instances, the\npending-reboot method can be used only for static\nparameters."
      },
      {
        "name": "tags",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A list of tags."
      },
      {
        "name": "region",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Region to connect to."
      },
      {
        "name": "key",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Secret key to be used."
      },
      {
        "name": "keyid",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Access key to be used."
      },
      {
        "name": "profile",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A dict with region, key and keyid, or a pillar key (string) that\ncontains a dict with region, key and keyid."
      }
    ]
  },
  {
    "functionId": "salt.states.boto_rds.present",
    "description": "Ensure RDS instance exists.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Name of the RDS state definition."
      },
      {
        "name": "allocated_storage",
        "defaultValue": null,
        "isRequired": true,
        "description": "The amount of storage (in gigabytes) to be initially allocated for the\ndatabase instance."
      },
      {
        "name": "db_instance_class",
        "defaultValue": null,
        "isRequired": true,
        "description": "The compute and memory capacity of the Amazon RDS DB instance."
      },
      {
        "name": "engine",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the database engine to be used for this instance. Supported\nengine types are: MySQL, mariadb, oracle-se1, oracle-se, oracle-ee, sqlserver-ee,\nsqlserver-se, sqlserver-ex, sqlserver-web, postgres and aurora. For more\ninformation, please see the engine argument in the Boto3 RDS\n[create_db_instance](https://boto3.readthedocs.io/en/latest/reference/services/rds.html#RDS.Client.create_db_instance) documentation."
      },
      {
        "name": "master_username",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of master user for the client DB instance."
      },
      {
        "name": "master_user_password",
        "defaultValue": null,
        "isRequired": true,
        "description": "The password for the master database user. Can be any printable ASCII\ncharacter except \"/\", '\"', or \"@\"."
      },
      {
        "name": "db_name",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The meaning of this parameter differs according to the database engine you use.\nSee the Boto3 RDS documentation to determine the appropriate value for your configuration.\n[https://boto3.readthedocs.io/en/latest/reference/services/rds.html#RDS.Client.create_db_instance](https://boto3.readthedocs.io/en/latest/reference/services/rds.html#RDS.Client.create_db_instance)"
      },
      {
        "name": "storage_type",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Specifies the storage type to be associated with the DB instance.\nOptions are standard, gp2 and io1. If you specify io1, you must also include\na value for the Iops parameter."
      },
      {
        "name": "db_security_groups",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A list of DB security groups to associate with this DB instance."
      },
      {
        "name": "vpc_security_group_ids",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A list of EC2 VPC security groups to associate with this DB instance."
      },
      {
        "name": "availability_zone",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The EC2 Availability Zone that the database instance will be created\nin."
      },
      {
        "name": "db_subnet_group_name",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A DB subnet group to associate with this DB instance."
      },
      {
        "name": "preferred_maintenance_window",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The weekly time range (in UTC) during which system maintenance can\noccur."
      },
      {
        "name": "db_parameter_group_name",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A DB parameter group to associate with this DB instance."
      },
      {
        "name": "db_cluster_identifier",
        "defaultValue": "None",
        "isRequired": false,
        "description": "If the DB instance is a member of a DB cluster, contains the name of\nthe DB cluster that the DB instance is a member of."
      },
      {
        "name": "tde_credential_arn",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The ARN from the Key Store with which the instance is associated for\nTDE encryption."
      },
      {
        "name": "tde_credential_password",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The password to use for TDE encryption if an encryption key is not used."
      },
      {
        "name": "storage_encrypted",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Specifies whether the DB instance is encrypted."
      },
      {
        "name": "kms_keyid",
        "defaultValue": "None",
        "isRequired": false,
        "description": "If storage_encrypted is true, the KMS key identifier for the encrypted\nDB instance."
      },
      {
        "name": "backup_retention_period",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The number of days for which automated backups are retained."
      },
      {
        "name": "preferred_backup_window",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The daily time range during which automated backups are created if\nautomated backups are enabled."
      },
      {
        "name": "port",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The port number on which the database accepts connections."
      },
      {
        "name": "multi_az",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Specifies if the DB instance is a Multi-AZ deployment. You cannot set\nthe AvailabilityZone parameter if the MultiAZ parameter is set to true."
      },
      {
        "name": "engine_version",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The version number of the database engine to use."
      },
      {
        "name": "auto_minor_version_upgrade",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Indicates that minor engine upgrades will be applied automatically to\nthe DB instance during the maintenance window."
      },
      {
        "name": "license_model",
        "defaultValue": "None",
        "isRequired": false,
        "description": "License model information for this DB instance."
      },
      {
        "name": "iops",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The amount of Provisioned IOPS (input/output operations per second) to\nbe initially allocated for the DB instance."
      },
      {
        "name": "option_group_name",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Indicates that the DB instance should be associated with the specified\noption group."
      },
      {
        "name": "character_set_name",
        "defaultValue": "None",
        "isRequired": false,
        "description": "For supported engines, indicates that the DB instance should be\nassociated with the specified CharacterSet."
      },
      {
        "name": "publicly_accessible",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Specifies the accessibility options for the DB instance. A value of\ntrue specifies an Internet-facing instance with a publicly resolvable\nDNS name, which resolves to a public IP address. A value of false\nspecifies an internal instance with a DNS name that resolves to a\nprivate IP address."
      },
      {
        "name": "wait_status",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Wait for the RDS instance to reach a desired status before finishing\nthe state. Available states: available, modifying, backing-up"
      },
      {
        "name": "tags",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A list of tags."
      },
      {
        "name": "copy_tags_to_snapshot",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Specifies whether tags are copied from the DB instance to snapshots of\nthe DB instance."
      },
      {
        "name": "region",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Region to connect to."
      },
      {
        "name": "domain",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The identifier of the Active Directory Domain."
      },
      {
        "name": "key",
        "defaultValue": "None",
        "isRequired": false,
        "description": "AWS secret key to be used."
      },
      {
        "name": "keyid",
        "defaultValue": "None",
        "isRequired": false,
        "description": "AWS access key to be used."
      },
      {
        "name": "monitoring_interval",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The interval, in seconds, between points when Enhanced Monitoring\nmetrics are collected for the DB instance."
      },
      {
        "name": "monitoring_role_arn",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The ARN for the IAM role that permits RDS to send Enhanced Monitoring\nmetrics to CloudWatch Logs."
      },
      {
        "name": "domain_iam_role_name",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Specify the name of the IAM role to be used when making API calls to\nthe Directory Service."
      },
      {
        "name": "promotion_tier",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A value that specifies the order in which an Aurora Replica is\npromoted to the primary instance after a failure of the existing\nprimary instance. For more information, see Fault Tolerance for an\nAurora DB Cluster ."
      },
      {
        "name": "profile",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A dict with region, key and keyid, or a pillar key (string) that\ncontains a dict with region, key and keyid."
      }
    ]
  },
  {
    "functionId": "salt.states.boto_rds.replica_present",
    "description": "Ensure RDS replica exists.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "source",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "db_instance_class",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "availability_zone",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "port",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "auto_minor_version_upgrade",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "iops",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "option_group_name",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "publicly_accessible",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "tags",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "region",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "key",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "keyid",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "profile",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "db_parameter_group_name",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.boto_rds.subnet_group_present",
    "description": "Ensure DB subnet group exists.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name for the DB subnet group. This value is stored as a lowercase string."
      },
      {
        "name": "description",
        "defaultValue": null,
        "isRequired": true,
        "description": "Subnet group description."
      },
      {
        "name": "subnet_ids",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A list of the EC2 Subnet IDs for the DB subnet group.\nEither subnet_ids or subnet_names must be provided."
      },
      {
        "name": "subnet_names",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A list of The EC2 Subnet names for the DB subnet group.\nEither subnet_ids or subnet_names must be provided."
      },
      {
        "name": "tags",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A list of tags."
      },
      {
        "name": "region",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Region to connect to."
      },
      {
        "name": "key",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Secret key to be used."
      },
      {
        "name": "keyid",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Access key to be used."
      },
      {
        "name": "profile",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A dict with region, key and keyid, or a pillar key (string) that\ncontains a dict with region, key and keyid."
      }
    ]
  },
  {
    "functionId": "salt.states.boto_route53.absent",
    "description": "Ensure the Route53 record is deleted.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Name of the record."
      },
      {
        "name": "zone",
        "defaultValue": null,
        "isRequired": true,
        "description": "The zone to delete the record from."
      },
      {
        "name": "record_type",
        "defaultValue": null,
        "isRequired": true,
        "description": "The record type (A, NS, MX, TXT, etc.)"
      },
      {
        "name": "identifier",
        "defaultValue": "None",
        "isRequired": false,
        "description": "An identifier to match for deletion."
      },
      {
        "name": "region",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The region to connect to."
      },
      {
        "name": "key",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Secret key to be used."
      },
      {
        "name": "keyid",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Access key to be used."
      },
      {
        "name": "profile",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A dict with region, key and keyid, or a pillar key (string)\nthat contains a dict with region, key and keyid."
      },
      {
        "name": "wait_for_sync",
        "defaultValue": "True",
        "isRequired": false,
        "description": "Wait for an INSYNC change status from Route53."
      },
      {
        "name": "split_dns",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Route53 supports a public and private DNS zone with the same\nnames."
      },
      {
        "name": "private_zone",
        "defaultValue": "False",
        "isRequired": false,
        "description": "If using split_dns, specify if this is the private zone."
      }
    ]
  },
  {
    "functionId": "salt.states.boto_route53.hosted_zone_absent",
    "description": "Ensure the Route53 Hostes Zone described is absent",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the state definition."
      },
      {
        "name": "domain_name",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The FQDN (including final period) of the zone you wish absent.  If not\nprovided, the value of name will be used."
      },
      {
        "name": "region",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "key",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "keyid",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "profile",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.boto_route53.hosted_zone_present",
    "description": "Ensure a hosted zone exists with the given attributes.  Note that most\nthings cannot be modified once a zone is created - it must be deleted and\nre-spun to update these attributes:",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "domain_name",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "private_zone",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "comment",
        "defaultValue": "''",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "vpc_id",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "vpc_name",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "vpc_region",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "region",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "key",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "keyid",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "profile",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.boto_route53.present",
    "description": "Ensure the Route53 record is present.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Name of the record."
      },
      {
        "name": "value",
        "defaultValue": null,
        "isRequired": true,
        "description": "\nValue of the record.  As a special case, you can pass in:\nprivate: to have the function autodetermine the private IP\npublic: to have the function autodetermine the public IP\n\n"
      },
      {
        "name": "zone",
        "defaultValue": null,
        "isRequired": true,
        "description": "The zone to create the record in."
      },
      {
        "name": "record_type",
        "defaultValue": null,
        "isRequired": true,
        "description": "The record type (A, NS, MX, TXT, etc.)"
      },
      {
        "name": "ttl",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The time to live for the record."
      },
      {
        "name": "identifier",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The unique identifier to use for this record."
      },
      {
        "name": "region",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The region to connect to."
      },
      {
        "name": "key",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Secret key to be used."
      },
      {
        "name": "keyid",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Access key to be used."
      },
      {
        "name": "profile",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A dict with region, key and keyid, or a pillar key (string)\nthat contains a dict with region, key and keyid."
      },
      {
        "name": "wait_for_sync",
        "defaultValue": "True",
        "isRequired": false,
        "description": "Wait for an INSYNC change status from Route53."
      },
      {
        "name": "split_dns",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Route53 supports a public and private DNS zone with the same\nnames."
      },
      {
        "name": "private_zone",
        "defaultValue": "False",
        "isRequired": false,
        "description": "If using split_dns, specify if this is the private zone."
      }
    ]
  },
  {
    "functionId": "salt.states.boto_s3_bucket.absent",
    "description": "Ensure bucket with passed properties is absent.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the state definition."
      },
      {
        "name": "Bucket",
        "defaultValue": null,
        "isRequired": true,
        "description": "Name of the bucket."
      },
      {
        "name": "Force",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Empty the bucket first if necessary - Boolean."
      },
      {
        "name": "region",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Region to connect to."
      },
      {
        "name": "key",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Secret key to be used."
      },
      {
        "name": "keyid",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Access key to be used."
      },
      {
        "name": "profile",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A dict with region, key and keyid, or a pillar key (string) that\ncontains a dict with region, key and keyid."
      }
    ]
  },
  {
    "functionId": "salt.states.boto_s3_bucket.present",
    "description": "Ensure bucket exists.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the state definition"
      },
      {
        "name": "Bucket",
        "defaultValue": null,
        "isRequired": true,
        "description": "Name of the bucket."
      },
      {
        "name": "LocationConstraint",
        "defaultValue": "None",
        "isRequired": false,
        "description": "'EU'|'eu-west-1'|'us-west-1'|'us-west-2'|'ap-southeast-1'|'ap-southeast-2'|'ap-northeast-1'|'sa-east-1'|'cn-north-1'|'eu-central-1'"
      },
      {
        "name": "ACL",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The permissions on a bucket using access control lists (ACL)."
      },
      {
        "name": "CORSRules",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The cors configuration for a bucket."
      },
      {
        "name": "LifecycleConfiguration",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Lifecycle configuration for your bucket"
      },
      {
        "name": "Logging",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The logging parameters for a bucket and to specify permissions for who\ncan view and modify the logging parameters."
      },
      {
        "name": "NotificationConfiguration",
        "defaultValue": "None",
        "isRequired": false,
        "description": "notifications of specified events for a bucket"
      },
      {
        "name": "Policy",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Policy on the bucket"
      },
      {
        "name": "Replication",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Replication rules. You can add as many as 1,000 rules.\nTotal replication configuration size can be up to 2 MB"
      },
      {
        "name": "RequestPayment",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The request payment configuration for a bucket. By default, the bucket\nowner pays for downloads from the bucket. This configuration parameter\nenables the bucket owner (only) to specify that the person requesting\nthe download will be charged for the download"
      },
      {
        "name": "Tagging",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A dictionary of tags that should be set on the bucket"
      },
      {
        "name": "Versioning",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The versioning state of the bucket"
      },
      {
        "name": "Website",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The website configuration of the bucket"
      },
      {
        "name": "region",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Region to connect to."
      },
      {
        "name": "key",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Secret key to be used."
      },
      {
        "name": "keyid",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Access key to be used."
      },
      {
        "name": "profile",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A dict with region, key and keyid, or a pillar key (string) that\ncontains a dict with region, key and keyid."
      }
    ]
  },
  {
    "functionId": "salt.states.boto_secgroup.absent",
    "description": "Ensure a security group with the specified name does not exist.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Name of the security group."
      },
      {
        "name": "vpc_id",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The ID of the VPC to remove the security group from, if any. Exclusive with vpc_name."
      },
      {
        "name": "vpc_name",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The name of the VPC to remove the security group from, if any. Exclusive with vpc_name.\n\n\n\n\nNew in version 2016.3.0.\n\n\n"
      },
      {
        "name": "region",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Region to connect to."
      },
      {
        "name": "key",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Secret key to be used."
      },
      {
        "name": "keyid",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Access key to be used."
      },
      {
        "name": "profile",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A dict with region, key and keyid, or a pillar key (string) that contains a dict with region, key and keyid.\n\n\n\n\nNew in version 2016.3.0.\n\n\n"
      }
    ]
  },
  {
    "functionId": "salt.states.boto_secgroup.present",
    "description": "Ensure the security group exists with the specified rules.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Name of the security group."
      },
      {
        "name": "description",
        "defaultValue": null,
        "isRequired": true,
        "description": "A description of this security group."
      },
      {
        "name": "vpc_id",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The ID of the VPC to create the security group in, if any. Exclusive with vpc_name."
      },
      {
        "name": "vpc_name",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The name of the VPC to create the security group in, if any. Exclusive with vpc_id.\n\n\n\n\nNew in version 2016.3.0.\n\n\n\n\n\nNew in version 2015.8.2.\n\n\n"
      },
      {
        "name": "rules",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A list of ingress rule dicts. If not specified, rules=None,\nthe ingress rules will be unmanaged. If set to an empty list, [],\nthen all ingress rules will be removed."
      },
      {
        "name": "rules_egress",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A list of egress rule dicts. If not specified, rules_egress=None,\nthe egress rules will be unmanaged. If set to an empty list, [],\nthen all egress rules will be removed."
      },
      {
        "name": "region",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Region to connect to."
      },
      {
        "name": "key",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Secret key to be used."
      },
      {
        "name": "keyid",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Access key to be used."
      },
      {
        "name": "profile",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A dict with region, key and keyid, or a pillar key (string)\nthat contains a dict with region, key, and keyid."
      },
      {
        "name": "tags",
        "defaultValue": "None",
        "isRequired": false,
        "description": "List of key:value pairs of tags to set on the security group\n\n\n\n\nNew in version 2016.3.0.\n\n\n"
      }
    ]
  },
  {
    "functionId": "salt.states.boto_sns.absent",
    "description": "Ensure the named sns topic is deleted.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Name of the SNS topic."
      },
      {
        "name": "region",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Region to connect to."
      },
      {
        "name": "key",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Secret key to be used."
      },
      {
        "name": "keyid",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Access key to be used."
      },
      {
        "name": "profile",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A dict with region, key and keyid, or a pillar key (string)\nthat contains a dict with region, key and keyid."
      },
      {
        "name": "unsubscribe",
        "defaultValue": "False",
        "isRequired": false,
        "description": "If True, unsubscribe all subcriptions to the SNS topic before deleting the SNS topic\n\n\n\n\nNew in version 2016.11.0.\n\n\n"
      }
    ]
  },
  {
    "functionId": "salt.states.boto_sns.present",
    "description": "Ensure the SNS topic exists.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Name of the SNS topic."
      },
      {
        "name": "subscriptions",
        "defaultValue": "None",
        "isRequired": false,
        "description": "List of SNS subscriptions.\n\nEach subscription is a dictionary with a protocol and endpoint key:\n\n\n\n[\n{'protocol': 'https', 'endpoint': 'https://www.example.com/sns-endpoint'},\n{'protocol': 'sqs', 'endpoint': 'arn:aws:sqs:us-west-2:123456789012:MyQueue'}\n]\n\n\n\n"
      },
      {
        "name": "region",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Region to connect to."
      },
      {
        "name": "key",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Secret key to be used."
      },
      {
        "name": "keyid",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Access key to be used."
      },
      {
        "name": "profile",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A dict with region, key and keyid, or a pillar key (string)\nthat contains a dict with region, key and keyid."
      }
    ]
  },
  {
    "functionId": "salt.states.boto_sqs.absent",
    "description": "Ensure the named sqs queue is deleted.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Name of the SQS queue."
      },
      {
        "name": "region",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Region to connect to."
      },
      {
        "name": "key",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Secret key to be used."
      },
      {
        "name": "keyid",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Access key to be used."
      },
      {
        "name": "profile",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A dict with region, key and keyid, or a pillar key (string)\nthat contains a dict with region, key and keyid."
      }
    ]
  },
  {
    "functionId": "salt.states.boto_sqs.present",
    "description": "Ensure the SQS queue exists.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Name of the SQS queue."
      },
      {
        "name": "attributes",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A dict of key/value SQS attributes."
      },
      {
        "name": "region",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Region to connect to."
      },
      {
        "name": "key",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Secret key to be used."
      },
      {
        "name": "keyid",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Access key to be used."
      },
      {
        "name": "profile",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A dict with region, key and keyid, or a pillar key (string)\nthat contains a dict with region, key and keyid."
      }
    ]
  },
  {
    "functionId": "salt.states.boto_vpc.absent",
    "description": "Ensure VPC with passed properties is absent.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Name of the VPC."
      },
      {
        "name": "tags",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A list of tags. All tags must match."
      },
      {
        "name": "region",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Region to connect to."
      },
      {
        "name": "key",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Secret key to be used."
      },
      {
        "name": "keyid",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Access key to be used."
      },
      {
        "name": "profile",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A dict with region, key and keyid, or a pillar key (string) that\ncontains a dict with region, key and keyid."
      }
    ]
  },
  {
    "functionId": "salt.states.boto_vpc.accept_vpc_peering_connection",
    "description": "Accept a VPC pending requested peering connection between two VPCs.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Name of this state"
      },
      {
        "name": "conn_id",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The connection ID to accept. Exclusive with conn_name. String type."
      },
      {
        "name": "conn_name",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The name of the VPC peering connection to accept. Exclusive with conn_id. String type."
      },
      {
        "name": "region",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Region to connect to."
      },
      {
        "name": "key",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Secret key to be used."
      },
      {
        "name": "keyid",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Access key to be used."
      },
      {
        "name": "profile",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A dict with region, key and keyid, or a pillar key (string) that\ncontains a dict with region, key and keyid."
      }
    ]
  },
  {
    "functionId": "salt.states.boto_vpc.delete_vpc_peering_connection",
    "description": "Example:",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Name of the state"
      },
      {
        "name": "conn_id",
        "defaultValue": "None",
        "isRequired": false,
        "description": "ID of the peering connection to delete.  Exlusive with conn_name."
      },
      {
        "name": "conn_name",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The name of the peering connection to delete.  Exlusive with conn_id."
      },
      {
        "name": "region",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Region to connect to."
      },
      {
        "name": "key",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Secret key to be used."
      },
      {
        "name": "keyid",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Access key to be used."
      },
      {
        "name": "profile",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A dict with region, key and keyid, or a pillar key (string) that\ncontains a dict with region, key and keyid."
      }
    ]
  },
  {
    "functionId": "salt.states.boto_vpc.dhcp_options_absent",
    "description": "Ensure a set of DHCP options with the given settings exist.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": "None",
        "isRequired": false,
        "description": "(string)\nName of the DHCP options set."
      },
      {
        "name": "dhcp_options_id",
        "defaultValue": "None",
        "isRequired": false,
        "description": "(string)\nId of the DHCP options set."
      },
      {
        "name": "region",
        "defaultValue": "None",
        "isRequired": false,
        "description": "(string)\nRegion to connect to."
      },
      {
        "name": "key",
        "defaultValue": "None",
        "isRequired": false,
        "description": "(string)\nSecret key to be used."
      },
      {
        "name": "keyid",
        "defaultValue": "None",
        "isRequired": false,
        "description": "(string)\nAccess key to be used."
      },
      {
        "name": "profile",
        "defaultValue": "None",
        "isRequired": false,
        "description": "(various)\nA dict with region, key and keyid, or a pillar key (string) that\ncontains a dict with region, key and keyid."
      }
    ]
  },
  {
    "functionId": "salt.states.boto_vpc.dhcp_options_present",
    "description": "Ensure a set of DHCP options with the given settings exist.\nNote that the current implementation only SETS values during option set\ncreation.  It is unable to update option sets in place, and thus merely\nverifies the set exists via the given name and/or dhcp_options_id param.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "(string)\nName of the DHCP options."
      },
      {
        "name": "dhcp_options_id",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "vpc_name",
        "defaultValue": "None",
        "isRequired": false,
        "description": "(string)\nName of a VPC to which the options should be associated.  Either\nvpc_name or vpc_id must be provided."
      },
      {
        "name": "vpc_id",
        "defaultValue": "None",
        "isRequired": false,
        "description": "(string)\nId of a VPC to which the options should be associated.  Either\nvpc_name or vpc_id must be provided."
      },
      {
        "name": "domain_name",
        "defaultValue": "None",
        "isRequired": false,
        "description": "(string)\nDomain name to be assiciated with this option set."
      },
      {
        "name": "domain_name_servers",
        "defaultValue": "None",
        "isRequired": false,
        "description": "(list of strings)\nThe IP address(es) of up to four domain name servers."
      },
      {
        "name": "ntp_servers",
        "defaultValue": "None",
        "isRequired": false,
        "description": "(list of strings)\nThe IP address(es) of up to four desired NTP servers."
      },
      {
        "name": "netbios_name_servers",
        "defaultValue": "None",
        "isRequired": false,
        "description": "(list of strings)\nThe IP address(es) of up to four NetBIOS name servers."
      },
      {
        "name": "netbios_node_type",
        "defaultValue": "None",
        "isRequired": false,
        "description": "(string)\nThe NetBIOS node type (1, 2, 4, or 8).  For more information about\nthe allowed values, see RFC 2132.  The recommended is 2 at this\ntime (broadcast and multicast are currently not supported)."
      },
      {
        "name": "tags",
        "defaultValue": "None",
        "isRequired": false,
        "description": "(dict of key:value pairs)\nA set of tags to be added."
      },
      {
        "name": "region",
        "defaultValue": "None",
        "isRequired": false,
        "description": "(string)\nRegion to connect to."
      },
      {
        "name": "key",
        "defaultValue": "None",
        "isRequired": false,
        "description": "(string)\nSecret key to be used."
      },
      {
        "name": "keyid",
        "defaultValue": "None",
        "isRequired": false,
        "description": "(string)\nAccess key to be used."
      },
      {
        "name": "profile",
        "defaultValue": "None",
        "isRequired": false,
        "description": "(various)\nA dict with region, key and keyid, or a pillar key (string) that\ncontains a dict with region, key and keyid."
      }
    ]
  },
  {
    "functionId": "salt.states.boto_vpc.internet_gateway_absent",
    "description": "Ensure the named internet gateway is absent.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Name of the internet gateway."
      },
      {
        "name": "detach",
        "defaultValue": "False",
        "isRequired": false,
        "description": "First detach the internet gateway from a VPC, if attached."
      },
      {
        "name": "region",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Region to connect to."
      },
      {
        "name": "key",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Secret key to be used."
      },
      {
        "name": "keyid",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Access key to be used."
      },
      {
        "name": "profile",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A dict with region, key and keyid, or a pillar key (string) that\ncontains a dict with region, key and keyid."
      }
    ]
  },
  {
    "functionId": "salt.states.boto_vpc.internet_gateway_present",
    "description": "Ensure an internet gateway exists.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Name of the internet gateway."
      },
      {
        "name": "vpc_name",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Name of the VPC to which the internet gateway should be attached."
      },
      {
        "name": "vpc_id",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Id of the VPC to which the internet_gateway should be attached.\nOnly one of vpc_name or vpc_id may be provided."
      },
      {
        "name": "tags",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A list of tags."
      },
      {
        "name": "region",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Region to connect to."
      },
      {
        "name": "key",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Secret key to be used."
      },
      {
        "name": "keyid",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Access key to be used."
      },
      {
        "name": "profile",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A dict with region, key and keyid, or a pillar key (string) that\ncontains a dict with region, key and keyid."
      }
    ]
  },
  {
    "functionId": "salt.states.boto_vpc.nat_gateway_absent",
    "description": "Ensure the nat gateway in the named subnet is absent.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Name of the state."
      },
      {
        "name": "subnet_name",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Name of the subnet within which the nat gateway should exist"
      },
      {
        "name": "subnet_id",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Id of the subnet within which the nat gateway should exist.\nEither subnet_name or subnet_id must be provided."
      },
      {
        "name": "region",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Region to connect to."
      },
      {
        "name": "key",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Secret key to be used."
      },
      {
        "name": "keyid",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Access key to be used."
      },
      {
        "name": "profile",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A dict with region, key and keyid, or a pillar key (string) that\ncontains a dict with region, key and keyid."
      },
      {
        "name": "wait_for_delete_retries",
        "defaultValue": "0",
        "isRequired": false,
        "description": "NAT gateway may take some time to be go into deleted or failed state.\nDuring the deletion process, subsequent release of elastic IPs may fail;\nthis state will automatically retry this number of times to ensure\nthe NAT gateway is in deleted or failed state before proceeding.\nDefault is set to 0 for backward compatibility."
      }
    ]
  },
  {
    "functionId": "salt.states.boto_vpc.nat_gateway_present",
    "description": "Ensure a nat gateway exists within the specified subnet",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Name of the state"
      },
      {
        "name": "subnet_name",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Name of the subnet within which the nat gateway should exist"
      },
      {
        "name": "subnet_id",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Id of the subnet within which the nat gateway should exist.\nEither subnet_name or subnet_id must be provided."
      },
      {
        "name": "region",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Region to connect to."
      },
      {
        "name": "key",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Secret key to be used."
      },
      {
        "name": "keyid",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Access key to be used."
      },
      {
        "name": "profile",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A dict with region, key and keyid, or a pillar key (string) that\ncontains a dict with region, key and keyid."
      },
      {
        "name": "allocation_id",
        "defaultValue": "None",
        "isRequired": false,
        "description": "If specified, the elastic IP address referenced by the ID is\nassociated with the gateway. Otherwise, a new allocation_id is created and used."
      }
    ]
  },
  {
    "functionId": "salt.states.boto_vpc.present",
    "description": "Ensure VPC exists.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Name of the VPC."
      },
      {
        "name": "cidr_block",
        "defaultValue": null,
        "isRequired": true,
        "description": "The range of IPs in CIDR format, for example: 10.0.0.0/24. Block\nsize must be between /16 and /28 netmask."
      },
      {
        "name": "instance_tenancy",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Instances launched in this VPC will be ingle-tenant or dedicated\nhardware."
      },
      {
        "name": "dns_support",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Indicates whether the DNS resolution is supported for the VPC."
      },
      {
        "name": "dns_hostnames",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Indicates whether the instances launched in the VPC get DNS hostnames."
      },
      {
        "name": "tags",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A list of tags."
      },
      {
        "name": "region",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Region to connect to."
      },
      {
        "name": "key",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Secret key to be used."
      },
      {
        "name": "keyid",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Access key to be used."
      },
      {
        "name": "profile",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A dict with region, key and keyid, or a pillar key (string) that\ncontains a dict with region, key and keyid."
      }
    ]
  },
  {
    "functionId": "salt.states.boto_vpc.request_vpc_peering_connection",
    "description": "Example:",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Name of the state"
      },
      {
        "name": "requester_vpc_id",
        "defaultValue": "None",
        "isRequired": false,
        "description": "ID of the requesting VPC. Exclusive with requester_vpc_name. String type."
      },
      {
        "name": "requester_vpc_name",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Name tag of the requesting VPC.  Exclusive with requester_vpc_id.  String type."
      },
      {
        "name": "peer_vpc_id",
        "defaultValue": "None",
        "isRequired": false,
        "description": "ID of the VPC tp crete VPC peering connection with.  This can be a VPC in another account. Exclusive with peer_vpc_name. String type."
      },
      {
        "name": "peer_vpc_name",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Name tag of the VPC tp crete VPC peering connection with.  This can only be a VPC the same account. Exclusive with peer_vpc_id.  String type."
      },
      {
        "name": "conn_name",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The (optional) name to use for this VPC peering connection. String type."
      },
      {
        "name": "peer_owner_id",
        "defaultValue": "None",
        "isRequired": false,
        "description": "ID of the owner of the peer VPC. String type. If this isn't supplied AWS uses your account ID.  Required if peering to a different account."
      },
      {
        "name": "region",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Region to connect to."
      },
      {
        "name": "key",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Secret key to be used."
      },
      {
        "name": "keyid",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Access key to be used."
      },
      {
        "name": "profile",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A dict with region, key and keyid, or a pillar key (string) that\ncontains a dict with region, key and keyid."
      }
    ]
  },
  {
    "functionId": "salt.states.boto_vpc.route_table_absent",
    "description": "Ensure the named route table is absent.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Name of the route table."
      },
      {
        "name": "region",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Region to connect to."
      },
      {
        "name": "key",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Secret key to be used."
      },
      {
        "name": "keyid",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Access key to be used."
      },
      {
        "name": "profile",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A dict with region, key and keyid, or a pillar key (string) that\ncontains a dict with region, key and keyid."
      }
    ]
  },
  {
    "functionId": "salt.states.boto_vpc.route_table_present",
    "description": "Ensure route table with routes exists and is associated to a VPC.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Name of the route table."
      },
      {
        "name": "vpc_name",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Name of the VPC with which the route table should be associated."
      },
      {
        "name": "vpc_id",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Id of the VPC with which the route table should be associated.\nEither vpc_name or vpc_id must be provided."
      },
      {
        "name": "routes",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A list of routes.  Each route has a cidr and a target."
      },
      {
        "name": "subnet_ids",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A list of subnet ids to associate"
      },
      {
        "name": "subnet_names",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A list of subnet names to associate"
      },
      {
        "name": "tags",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A list of tags."
      },
      {
        "name": "region",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Region to connect to."
      },
      {
        "name": "key",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Secret key to be used."
      },
      {
        "name": "keyid",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Access key to be used."
      },
      {
        "name": "profile",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A dict with region, key and keyid, or a pillar key (string) that\ncontains a dict with region, key and keyid."
      }
    ]
  },
  {
    "functionId": "salt.states.boto_vpc.subnet_absent",
    "description": "Ensure subnet with passed properties is absent.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Name of the subnet."
      },
      {
        "name": "subnet_id",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "region",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Region to connect to."
      },
      {
        "name": "key",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Secret key to be used."
      },
      {
        "name": "keyid",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Access key to be used."
      },
      {
        "name": "profile",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A dict with region, key and keyid, or a pillar key (string) that\ncontains a dict with region, key and keyid."
      }
    ]
  },
  {
    "functionId": "salt.states.boto_vpc.subnet_present",
    "description": "Ensure a subnet exists.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Name of the subnet."
      },
      {
        "name": "cidr_block",
        "defaultValue": null,
        "isRequired": true,
        "description": "The range if IPs for the subnet, in CIDR format. For example:\n10.0.0.0/24. Block size must be between /16 and /28 netmask."
      },
      {
        "name": "vpc_name",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Name of the VPC in which the subnet should be placed. Either\nvpc_name or vpc_id must be provided."
      },
      {
        "name": "vpc_id",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Id of the VPC in which the subnet should be placed. Either vpc_name\nor vpc_id must be provided."
      },
      {
        "name": "availability_zone",
        "defaultValue": "None",
        "isRequired": false,
        "description": "AZ in which the subnet should be placed."
      },
      {
        "name": "tags",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A list of tags."
      },
      {
        "name": "region",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Region to connect to."
      },
      {
        "name": "key",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Secret key to be used."
      },
      {
        "name": "keyid",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Access key to be used."
      },
      {
        "name": "profile",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A dict with region, key and keyid, or a pillar key (string) that\ncontains a dict with region, key and keyid."
      },
      {
        "name": "route_table_id",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A route table ID to explicitly associate the subnet with. If both route_table_id and route_table_name are specified, route_table_id will take precedence.\n\n\n\n\nNew in version 2016.11.0.\n\n\n"
      },
      {
        "name": "route_table_name",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A route table name to explicitly associate the subnet with. If both route_table_id and route_table_name are specified, route_table_id will take precedence.\n\n\n\n\nNew in version 2016.11.0.\n\n\n"
      }
    ]
  },
  {
    "functionId": "salt.states.boto_vpc.vpc_peering_connection_present",
    "description": "Example:",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Name of the state"
      },
      {
        "name": "requester_vpc_id",
        "defaultValue": "None",
        "isRequired": false,
        "description": "ID of the requesting VPC. Exclusive with requester_vpc_name."
      },
      {
        "name": "requester_vpc_name",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Name tag of the requesting VPC.  Exclusive with requester_vpc_id."
      },
      {
        "name": "peer_vpc_id",
        "defaultValue": "None",
        "isRequired": false,
        "description": "ID of the VPC tp crete VPC peering connection with. This can be a VPC in\nanother account. Exclusive with peer_vpc_name."
      },
      {
        "name": "peer_vpc_name",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Name tag of the VPC tp crete VPC peering connection with. This can only\nbe a VPC in the same account, else resolving it into a vpc ID will fail.\nExclusive with peer_vpc_id."
      },
      {
        "name": "conn_name",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The name to use for this VPC peering connection."
      },
      {
        "name": "peer_owner_id",
        "defaultValue": "None",
        "isRequired": false,
        "description": "ID of the owner of the peer VPC. Defaults to your account ID, so a value\nis required if peering with a VPC in a different account."
      },
      {
        "name": "region",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Region to connect to."
      },
      {
        "name": "key",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Secret key to be used."
      },
      {
        "name": "keyid",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Access key to be used."
      },
      {
        "name": "profile",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A dict with region, key and keyid, or a pillar key (string) that\ncontains a dict with region, key and keyid."
      }
    ]
  },
  {
    "functionId": "salt.states.bower.bootstrap",
    "description": "Bootstraps a frontend distribution.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "user",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The user to run Bower with"
      }
    ]
  },
  {
    "functionId": "salt.states.bower.installed",
    "description": "Verify that the given package is installed and is at the correct version\n(if specified).",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The package to install"
      },
      {
        "name": "dir",
        "defaultValue": null,
        "isRequired": true,
        "description": "The target directory in which to install the package"
      },
      {
        "name": "pkgs",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A list of packages to install with a single Bower invocation;\nspecifying this argument will ignore the name argument"
      },
      {
        "name": "user",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The user to run Bower with"
      },
      {
        "name": "env",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A list of environment variables to be set prior to execution. The\nformat is the same as the [cmd.run](salt.states.cmd.html#salt.states.cmd.run \"salt.states.cmd.run\").\nstate function."
      }
    ]
  },
  {
    "functionId": "salt.states.bower.removed",
    "description": "Verify that the given package is not installed.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "dir",
        "defaultValue": null,
        "isRequired": true,
        "description": "The target directory in which to install the package"
      },
      {
        "name": "user",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The user to run Bower with"
      }
    ]
  },
  {
    "functionId": "salt.states.cabal.installed",
    "description": "Verify that the given package is installed and is at the correct version\n(if specified).",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The package to install"
      },
      {
        "name": "pkgs",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "user",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The user to run cabal install with"
      },
      {
        "name": "install_global",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Install package globally instead of locally"
      },
      {
        "name": "env",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A list of environment variables to be set prior to execution. The\nformat is the same as the [cmd.run](salt.states.cmd.html#salt.states.cmd.run \"salt.states.cmd.run\").\nstate function."
      }
    ]
  },
  {
    "functionId": "salt.states.cabal.removed",
    "description": "Verify that given package is not installed.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "user",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "env",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.ceph.quorum",
    "description": "Quorum state",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.chef.client",
    "description": "Unknown",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unique identifier for the state. Does not affect the Chef run."
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.chef.solo",
    "description": "Unknown",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unique identifier for the state. Does not affect the Chef run."
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.chocolatey.install",
    "description": "Deprecated, please use 'installed'. This function will be removed in Salt\nNitrogen.",
    "arguments": [
      {
        "name": "*args",
        "defaultValue": "*args",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.chocolatey.installed",
    "description": "Installs a package if not already installed",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the package to be installed."
      },
      {
        "name": "version",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Install a specific version of the package. Defaults to latest version."
      },
      {
        "name": "source",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Chocolatey repository (directory, share or remote URL, feed). Defaults to\nthe official Chocolatey feed."
      },
      {
        "name": "force",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Reinstall the current version of an existing package. Default is false."
      },
      {
        "name": "pre_versions",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Include pre-release packages. Default is False."
      },
      {
        "name": "install_args",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A list of install arguments you want to pass to the installation\nprocess i.e product key or feature list"
      },
      {
        "name": "override_args",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Set to true if you want to override the original install arguments (\nfor the native installer)in the package and use your own.\nWhen this is set to False install_args will be appended to the end of\nthe default arguments"
      },
      {
        "name": "force_x86",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Force x86 (32bit) installation on 64 bit systems. Defaults to false."
      },
      {
        "name": "package_args",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A list of arguments you want to pass to the package"
      }
    ]
  },
  {
    "functionId": "salt.states.chocolatey.uninstall",
    "description": "Deprecated, please use 'uninstalled'. This function will be removed in Salt\nNitrogen.",
    "arguments": [
      {
        "name": "*args",
        "defaultValue": "*args",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.chocolatey.uninstalled",
    "description": "Uninstalls a package",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the package to be uninstalled"
      },
      {
        "name": "version",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Uninstalls a specific version of the package. Defaults to latest\nversion installed."
      },
      {
        "name": "uninstall_args",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A list of uninstall arguments you want to pass to the uninstallation\nprocess i.e product key or feature list"
      },
      {
        "name": "override_args",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Set to true if you want to override the original uninstall arguments (\nfor the native uninstaller)in the package and use your own.\nWhen this is set to False uninstall_args will be appended to the end of\nthe default arguments"
      }
    ]
  },
  {
    "functionId": "salt.states.chronos_job.absent",
    "description": "Ensure that the chronos job with the given name is not present.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.chronos_job.config",
    "description": "Ensure that the chronos job with the given name is present and is configured\nto match the given config values.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "config",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.cisconso.value_present",
    "description": "Ensure a specific value exists at a given path",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "datastore",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "path",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "config",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.cloud.absent",
    "description": "Ensure that no instances with the specified names exist.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the instance to destroy"
      },
      {
        "name": "onlyif",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Do run the state only if is unless succeed"
      },
      {
        "name": "unless",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Do not run the state at least unless succeed"
      }
    ]
  },
  {
    "functionId": "salt.states.cloud.present",
    "description": "Spin up a single instance on a cloud provider, using salt-cloud. This state\ndoes not take a profile argument; rather, it takes the arguments that would\nnormally be configured as part of the state.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the instance to create"
      },
      {
        "name": "cloud_provider",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the cloud provider to use"
      },
      {
        "name": "onlyif",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Do run the state only if is unless succeed"
      },
      {
        "name": "unless",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Do not run the state at least unless succeed"
      },
      {
        "name": "opts",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Any extra opts that need to be used"
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.cloud.profile",
    "description": "Create a single instance on a cloud provider, using a salt-cloud profile.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the instance to create"
      },
      {
        "name": "profile",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the cloud profile to use"
      },
      {
        "name": "onlyif",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Do run the state only if is unless succeed"
      },
      {
        "name": "unless",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Do not run the state at least unless succeed"
      },
      {
        "name": "opts",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Any extra opts that need to be used"
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.cloud.volume_absent",
    "description": "Check that a block volume exists.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "provider",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.cloud.volume_attached",
    "description": "Check if a block volume is attached.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "server_name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "provider",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.cloud.volume_detached",
    "description": "Check if a block volume is attached.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "server_name",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "provider",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.cloud.volume_present",
    "description": "Check that a block volume exists.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "provider",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.cmd.call",
    "description": "Invoke a pre-defined Python function with arguments specified in the state\ndeclaration. This function is mainly used by the\nsalt.renderers.pydsl renderer.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "func",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "args",
        "defaultValue": "()",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "kws",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "onlyif",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "unless",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "creates",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "output_loglevel",
        "defaultValue": "'debug'",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "use_vt",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.cmd.mod_run_check",
    "description": "Execute the onlyif and unless logic.\nReturn a result dict if:\n* onlyif failed (onlyif != 0)\n* unless succeeded (unless == 0)\nelse return True",
    "arguments": [
      {
        "name": "cmd_kwargs",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "onlyif",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "unless",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "creates",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.cmd.mod_watch",
    "description": "Execute a cmd function based on a watch call",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.cmd.run",
    "description": "Run a command if certain circumstances are met.  Use cmd.wait if you\nwant to use the watch requisite.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The command to execute, remember that the command will execute with the\npath and permissions of the salt-minion."
      },
      {
        "name": "onlyif",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A command to run as a check, run the named command only if the command\npassed to the onlyif option returns true"
      },
      {
        "name": "unless",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A command to run as a check, only run the named command if the command\npassed to the unless option returns false"
      },
      {
        "name": "creates",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Only run if the file or files specified by creates do not exist.\n\n\n\n\nNew in version 2014.7.0.\n\n\n"
      },
      {
        "name": "cwd",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The current working directory to execute the command in, defaults to\n/root"
      },
      {
        "name": "runas",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The user name to run the command as"
      },
      {
        "name": "shell",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The shell to use for execution, defaults to the shell grain"
      },
      {
        "name": "env",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A list of environment variables to be set prior to execution. Example:\n\n\n\nscript-foo:\n  cmd.run:\n    - env:\n      - BATCH: 'yes'\n\n\n\n\n\n\nWarning\n\nThe above illustrates a common PyYAML pitfall, that **yes**, **no**, **on**, **off**, **true**, and **false** are all loaded as boolean True and False values, and must be enclosed in quotes to be used as strings. More info on this (and other) PyYAML idiosyncrasies can be found [here](../../../topics/troubleshooting/yaml_idiosyncrasies.html#yaml-idiosyncrasies).\n\n\n\n\nVariables as values are not evaluated. So $PATH in the following example is a literal '$PATH':\n\n\n\nscript-bar:\n  cmd.run:\n    - env: \"PATH=/some/path:$PATH\"\n\n\n\n\n\nOne can still use the existing $PATH by using a bit of Jinja:\n\n\n\n{% set current_path = salt['environ.get']('PATH', '/bin:/usr/bin') %}\n\nmycommand:\n  cmd.run:\n    - name: ls -l /\n    - env:\n      - PATH: {{ [current_path, '/my/special/bin']|join(':') }}\n\n\n\n"
      },
      {
        "name": "stateful",
        "defaultValue": "False",
        "isRequired": false,
        "description": "The command being executed is expected to return data about executing\na state. For more information, see the [Using the \"Stateful\" Argument](#stateful-argument) section."
      },
      {
        "name": "umask",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The umask (in octal) to use when running the command."
      },
      {
        "name": "output_loglevel",
        "defaultValue": "'debug'",
        "isRequired": false,
        "description": "Control the loglevel at which the output from the command is logged.\nNote that the command being run will still be logged (loglevel: DEBUG)\nregardless, unless quiet is used for this value."
      },
      {
        "name": "quiet",
        "defaultValue": "False",
        "isRequired": false,
        "description": "The command will be executed quietly, meaning no log entries of the\nactual command or its return data. This is deprecated as of the\n**2014.1.0** release, and is being replaced with\noutput_loglevel: quiet."
      },
      {
        "name": "timeout",
        "defaultValue": "None",
        "isRequired": false,
        "description": "If the command has not terminated after timeout seconds, send the\nsubprocess sigterm, and if sigterm is ignored, follow up with sigkill"
      },
      {
        "name": "ignore_timeout",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Ignore the timeout of commands, which is useful for running nohup processes.\n\n\n\n\nNew in version 2015.8.0.\n\n\n"
      },
      {
        "name": "use_vt",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Use VT utils (saltstack) to stream the command output more\ninteractively to the console and the logs.\nThis is experimental."
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.cmd.script",
    "description": "Download a script and execute it with specified arguments.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Either \"cmd arg1 arg2 arg3...\" (cmd is not used) or a source\n\"salt://...\"."
      },
      {
        "name": "source",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The location of the script to download. If the file is located on the\nmaster in the directory named spam, and is called eggs, the source\nstring is salt://spam/eggs"
      },
      {
        "name": "template",
        "defaultValue": "None",
        "isRequired": false,
        "description": "If this setting is applied then the named templating engine will be\nused to render the downloaded file. Currently jinja, mako, and wempy\nare supported"
      },
      {
        "name": "onlyif",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Run the named command only if the command passed to the onlyif\noption returns true"
      },
      {
        "name": "unless",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Run the named command only if the command passed to the unless\noption returns false"
      },
      {
        "name": "creates",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Only run if the file or files specified by creates do not exist.\n\n\n\n\nNew in version 2014.7.0.\n\n\n"
      },
      {
        "name": "cwd",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The current working directory to execute the command in, defaults to\n/root"
      },
      {
        "name": "runas",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The name of the user to run the command as"
      },
      {
        "name": "shell",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The shell to use for execution. The default is set in grains['shell']"
      },
      {
        "name": "env",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A list of environment variables to be set prior to execution. Example:\n\n\n\nsalt://scripts/foo.sh:\n  cmd.script:\n    - env:\n      - BATCH: 'yes'\n\n\n\n\n\n\nWarning\n\nThe above illustrates a common PyYAML pitfall, that **yes**, **no**, **on**, **off**, **true**, and **false** are all loaded as boolean True and False values, and must be enclosed in quotes to be used as strings. More info on this (and other) PyYAML idiosyncrasies can be found [here](../../../topics/troubleshooting/yaml_idiosyncrasies.html#yaml-idiosyncrasies).\n\n\n\n\nVariables as values are not evaluated. So $PATH in the following example is a literal '$PATH':\n\n\n\nsalt://scripts/bar.sh:\n  cmd.script:\n    - env: \"PATH=/some/path:$PATH\"\n\n\n\n\n\nOne can still use the existing $PATH by using a bit of Jinja:\n\n\n\n{% set current_path = salt['environ.get']('PATH', '/bin:/usr/bin') %}\n\nmycommand:\n  cmd.run:\n    - name: ls -l /\n    - env:\n      - PATH: {{ [current_path, '/my/special/bin']|join(':') }}\n\n\n\n"
      },
      {
        "name": "stateful",
        "defaultValue": "False",
        "isRequired": false,
        "description": "The command being executed is expected to return data about executing\na state. For more information, see the [Using the \"Stateful\" Argument](#stateful-argument) section."
      },
      {
        "name": "umask",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The umask (in octal) to use when running the command."
      },
      {
        "name": "timeout",
        "defaultValue": "None",
        "isRequired": false,
        "description": "If the command has not terminated after timeout seconds, send the\nsubprocess sigterm, and if sigterm is ignored, follow up with sigkill"
      },
      {
        "name": "use_vt",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Use VT utils (saltstack) to stream the command output more\ninteractively to the console and the logs.\nThis is experimental."
      },
      {
        "name": "output_loglevel",
        "defaultValue": "'debug'",
        "isRequired": false,
        "description": "Control the loglevel at which the output from the command is logged.\nNote that the command being run will still be logged (loglevel: DEBUG)\nregardless, unless quiet is used for this value."
      },
      {
        "name": "defaults",
        "defaultValue": "None",
        "isRequired": false,
        "description": "\n\n\nNew in version 2016.3.0.\n\n\n\n\nDefault context passed to the template.\n"
      },
      {
        "name": "context",
        "defaultValue": "None",
        "isRequired": false,
        "description": "\n\n\nNew in version 2016.3.0.\n\n\n\n\nOverrides default context variables passed to the template.\n"
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.cmd.wait",
    "description": "Run the given command only if the watch statement calls it.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The command to execute, remember that the command will execute with the\npath and permissions of the salt-minion."
      },
      {
        "name": "onlyif",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A command to run as a check, run the named command only if the command\npassed to the onlyif option returns true"
      },
      {
        "name": "unless",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A command to run as a check, only run the named command if the command\npassed to the unless option returns false"
      },
      {
        "name": "creates",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Only run if the file or files specified by creates do not exist.\n\n\n\n\nNew in version 2014.7.0.\n\n\n"
      },
      {
        "name": "cwd",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The current working directory to execute the command in, defaults to\n/root"
      },
      {
        "name": "runas",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The user name to run the command as"
      },
      {
        "name": "shell",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The shell to use for execution, defaults to /bin/sh"
      },
      {
        "name": "env",
        "defaultValue": "()",
        "isRequired": false,
        "description": "A list of environment variables to be set prior to execution. Example:\n\n\n\nscript-foo:\n  cmd.wait:\n    - env:\n      - BATCH: 'yes'\n\n\n\n\n\n\nWarning\n\nThe above illustrates a common PyYAML pitfall, that **yes**, **no**, **on**, **off**, **true**, and **false** are all loaded as boolean True and False values, and must be enclosed in quotes to be used as strings. More info on this (and other) PyYAML idiosyncrasies can be found [here](../../../topics/troubleshooting/yaml_idiosyncrasies.html#yaml-idiosyncrasies).\n\n\n\n\nVariables as values are not evaluated. So $PATH in the following example is a literal '$PATH':\n\n\n\nscript-bar:\n  cmd.wait:\n    - env: \"PATH=/some/path:$PATH\"\n\n\n\n\n\nOne can still use the existing $PATH by using a bit of Jinja:\n\n\n\n{% set current_path = salt['environ.get']('PATH', '/bin:/usr/bin') %}\n\nmycommand:\n  cmd.run:\n    - name: ls -l /\n    - env:\n      - PATH: {{ [current_path, '/my/special/bin']|join(':') }}\n\n\n\n"
      },
      {
        "name": "stateful",
        "defaultValue": "False",
        "isRequired": false,
        "description": "The command being executed is expected to return data about executing\na state. For more information, see the [Using the \"Stateful\" Argument](#stateful-argument) section."
      },
      {
        "name": "umask",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The umask (in octal) to use when running the command."
      },
      {
        "name": "output_loglevel",
        "defaultValue": "'debug'",
        "isRequired": false,
        "description": "Control the loglevel at which the output from the command is logged.\nNote that the command being run will still be logged (loglevel: DEBUG)\nregardless, unless quiet is used for this value."
      },
      {
        "name": "use_vt",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Use VT utils (saltstack) to stream the command output more\ninteractively to the console and the logs.\nThis is experimental."
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.cmd.wait_script",
    "description": "Download a script from a remote source and execute it only if a watch\nstatement calls it.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The command to execute, remember that the command will execute with the\npath and permissions of the salt-minion."
      },
      {
        "name": "source",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The source script being downloaded to the minion, this source script is\nhosted on the salt master server.  If the file is located on the master\nin the directory named spam, and is called eggs, the source string is\nsalt://spam/eggs"
      },
      {
        "name": "template",
        "defaultValue": "None",
        "isRequired": false,
        "description": "If this setting is applied then the named templating engine will be\nused to render the downloaded file, currently jinja, mako, and wempy\nare supported"
      },
      {
        "name": "onlyif",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A command to run as a check, run the named command only if the command\npassed to the onlyif option returns true"
      },
      {
        "name": "unless",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A command to run as a check, only run the named command if the command\npassed to the unless option returns false"
      },
      {
        "name": "cwd",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The current working directory to execute the command in, defaults to\n/root"
      },
      {
        "name": "runas",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The user name to run the command as"
      },
      {
        "name": "shell",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The shell to use for execution, defaults to the shell grain"
      },
      {
        "name": "env",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A list of environment variables to be set prior to execution. Example:\n\n\n\nsalt://scripts/foo.sh:\n  cmd.wait_script:\n    - env:\n      - BATCH: 'yes'\n\n\n\n\n\n\nWarning\n\nThe above illustrates a common PyYAML pitfall, that **yes**, **no**, **on**, **off**, **true**, and **false** are all loaded as boolean True and False values, and must be enclosed in quotes to be used as strings. More info on this (and other) PyYAML idiosyncrasies can be found [here](../../../topics/troubleshooting/yaml_idiosyncrasies.html#yaml-idiosyncrasies).\n\n\n\n\nVariables as values are not evaluated. So $PATH in the following example is a literal '$PATH':\n\n\n\nsalt://scripts/bar.sh:\n  cmd.wait_script:\n    - env: \"PATH=/some/path:$PATH\"\n\n\n\n\n\nOne can still use the existing $PATH by using a bit of Jinja:\n\n\n\n{% set current_path = salt['environ.get']('PATH', '/bin:/usr/bin') %}\n\nmycommand:\n  cmd.run:\n    - name: ls -l /\n    - env:\n      - PATH: {{ [current_path, '/my/special/bin']|join(':') }}\n\n\n\n"
      },
      {
        "name": "stateful",
        "defaultValue": "False",
        "isRequired": false,
        "description": "The command being executed is expected to return data about executing\na state. For more information, see the [Using the \"Stateful\" Argument](#stateful-argument) section."
      },
      {
        "name": "umask",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The umask (in octal) to use when running the command."
      },
      {
        "name": "use_vt",
        "defaultValue": "False",
        "isRequired": false,
        "description": "> Use VT utils (saltstack) to stream the command output more\ninteractively to the console and the logs.\nThis is experimental.\n\n\n\noutput_loglevel\nControl the loglevel at which the output from the command is logged.\nNote that the command being run will still be logged (loglevel: DEBUG)\nregardless, unless quiet is used for this value.\n\n"
      },
      {
        "name": "output_loglevel",
        "defaultValue": "'debug'",
        "isRequired": false,
        "description": "Control the loglevel at which the output from the command is logged.\nNote that the command being run will still be logged (loglevel: DEBUG)\nregardless, unless quiet is used for this value."
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.composer.installed",
    "description": "Verify that the correct versions of composer dependencies are present.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "composer",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Location of the composer.phar file. If not set composer will\njust execute \"composer\" as if it is installed globally.\n(i.e. /path/to/composer.phar)"
      },
      {
        "name": "php",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Location of the php executable to use with composer.\n(i.e. /usr/bin/php)"
      },
      {
        "name": "user",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Which system user to run composer as.\n\n\n\n\nNew in version 2014.1.4.\n\n\n"
      },
      {
        "name": "prefer_source",
        "defaultValue": "None",
        "isRequired": false,
        "description": "--prefer-source option of composer."
      },
      {
        "name": "prefer_dist",
        "defaultValue": "None",
        "isRequired": false,
        "description": "--prefer-dist option of composer."
      },
      {
        "name": "no_scripts",
        "defaultValue": "None",
        "isRequired": false,
        "description": "--no-scripts option of composer."
      },
      {
        "name": "no_plugins",
        "defaultValue": "None",
        "isRequired": false,
        "description": "--no-plugins option of composer."
      },
      {
        "name": "optimize",
        "defaultValue": "None",
        "isRequired": false,
        "description": "--optimize-autoloader option of composer. Recommended for production."
      },
      {
        "name": "no_dev",
        "defaultValue": "None",
        "isRequired": false,
        "description": "--no-dev option for composer. Recommended for production."
      },
      {
        "name": "quiet",
        "defaultValue": "False",
        "isRequired": false,
        "description": "--quiet option for composer. Whether or not to return output from composer."
      },
      {
        "name": "composer_home",
        "defaultValue": "'/root'",
        "isRequired": false,
        "description": "$COMPOSER_HOME environment variable"
      },
      {
        "name": "always_check",
        "defaultValue": "True",
        "isRequired": false,
        "description": "If True, _always_ run composer install in the directory.  This is the\ndefault behavior.  If False, only run composer install if there is no\nvendor directory present."
      }
    ]
  },
  {
    "functionId": "salt.states.composer.update",
    "description": "Composer update the directory to ensure we have the latest versions\nof all project dependencies.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "composer",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Location of the composer.phar file. If not set composer will\njust execute \"composer\" as if it is installed globally.\n(i.e. /path/to/composer.phar)"
      },
      {
        "name": "php",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Location of the php executable to use with composer.\n(i.e. /usr/bin/php)"
      },
      {
        "name": "user",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Which system user to run composer as.\n\n\n\n\nNew in version 2014.1.4.\n\n\n"
      },
      {
        "name": "prefer_source",
        "defaultValue": "None",
        "isRequired": false,
        "description": "--prefer-source option of composer."
      },
      {
        "name": "prefer_dist",
        "defaultValue": "None",
        "isRequired": false,
        "description": "--prefer-dist option of composer."
      },
      {
        "name": "no_scripts",
        "defaultValue": "None",
        "isRequired": false,
        "description": "--no-scripts option of composer."
      },
      {
        "name": "no_plugins",
        "defaultValue": "None",
        "isRequired": false,
        "description": "--no-plugins option of composer."
      },
      {
        "name": "optimize",
        "defaultValue": "None",
        "isRequired": false,
        "description": "--optimize-autoloader option of composer. Recommended for production."
      },
      {
        "name": "no_dev",
        "defaultValue": "None",
        "isRequired": false,
        "description": "--no-dev option for composer. Recommended for production."
      },
      {
        "name": "quiet",
        "defaultValue": "False",
        "isRequired": false,
        "description": "--quiet option for composer. Whether or not to return output from composer."
      },
      {
        "name": "composer_home",
        "defaultValue": "'/root'",
        "isRequired": false,
        "description": "$COMPOSER_HOME environment variable"
      }
    ]
  },
  {
    "functionId": "salt.states.cron.absent",
    "description": "Verifies that the specified cron job is absent for the specified user; only\nthe name is matched when removing a cron job.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The command that should be absent in the user crontab."
      },
      {
        "name": "user",
        "defaultValue": "'root'",
        "isRequired": false,
        "description": "The name of the user whose crontab needs to be modified, defaults to\nthe root user"
      },
      {
        "name": "identifier",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Custom-defined identifier for tracking the cron line for future crontab\nedits. This defaults to the state id"
      },
      {
        "name": "special",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The special keyword used in the job (eg. @reboot, @hourly...)"
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.cron.env_absent",
    "description": "Verifies that the specified environment variable is absent from the crontab\nfor the specified user",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the environment variable to remove from the user crontab"
      },
      {
        "name": "user",
        "defaultValue": "'root'",
        "isRequired": false,
        "description": "The name of the user whose crontab needs to be modified, defaults to\nthe root user"
      }
    ]
  },
  {
    "functionId": "salt.states.cron.env_present",
    "description": "Verifies that the specified environment variable is present in the crontab\nfor the specified user.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the environment variable to set in the user crontab"
      },
      {
        "name": "value",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The value to set for the given environment variable"
      },
      {
        "name": "user",
        "defaultValue": "'root'",
        "isRequired": false,
        "description": "The name of the user whose crontab needs to be modified, defaults to\nthe root user"
      }
    ]
  },
  {
    "functionId": "salt.states.cron.file",
    "description": "Provides file.managed-like functionality (templating, etc.) for a pre-made\ncrontab file, to be assigned to a given user.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The source file to be used as the crontab. This source file can be hosted on either the salt master server, or on an HTTP or FTP server. For files hosted on the salt file server, if the file is located on the master in the directory named spam, and is called eggs, the source string is salt://spam/eggs\n\nIf the file is hosted on a HTTP or FTP server then the source_hash argument is also required\n"
      },
      {
        "name": "source_hash",
        "defaultValue": "''",
        "isRequired": false,
        "description": "This can be either a file which contains a source hash string for\nthe source, or a source hash string. The source hash string is the\nhash algorithm followed by the hash of the file:\nmd5=e138491e9d5b97023cea823fe17bac22"
      },
      {
        "name": "source_hash_name",
        "defaultValue": "None",
        "isRequired": false,
        "description": "When source_hash refers to a hash file, Salt will try to find the correct hash by matching the filename/URI associated with that hash. By default, Salt will look for the filename being managed. When managing a file at path /tmp/foo.txt, then the following line in a hash file would match:\n\n\n\nacbd18db4cc2f85cedef654fccc4a4d8    foo.txt\n\n\n\n\n\nHowever, sometimes a hash file will include multiple similar paths:\n\n\n\n37b51d194a7513e45b56f6524f2d51f2    ./dir1/foo.txt\nacbd18db4cc2f85cedef654fccc4a4d8    ./dir2/foo.txt\n73feffa4b7f6bb68e44cf984c85f6e88    ./dir3/foo.txt\n\n\n\n\n\nIn cases like this, Salt may match the incorrect hash. This argument can be used to tell Salt which filename to match, to ensure that the correct hash is identified. For example:\n\n\n\nfoo_crontab:\n  cron.file:\n    - name: https://mydomain.tld/dir2/foo.txt\n    - source_hash: https://mydomain.tld/hashes\n    - source_hash_name: ./dir2/foo.txt\n\n\n\n\n\n\nNote\n\nThis argument must contain the full filename entry from the checksum file, as this argument is meant to disambiguate matches for multiple files that have the same basename. So, in the example above, simply using foo.txt would not match.\n\n\n\n\n\nNew in version 2016.3.5.\n\n\n"
      },
      {
        "name": "user",
        "defaultValue": "'root'",
        "isRequired": false,
        "description": "The user to whom the crontab should be assigned. This defaults to\nroot."
      },
      {
        "name": "template",
        "defaultValue": "None",
        "isRequired": false,
        "description": "If this setting is applied then the named templating engine will be\nused to render the downloaded file. Currently, jinja and mako are\nsupported."
      },
      {
        "name": "context",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Overrides default context variables passed to the template."
      },
      {
        "name": "replace",
        "defaultValue": "True",
        "isRequired": false,
        "description": "If the crontab should be replaced, if False then this command will\nbe ignored if a crontab exists for the specified user. Default is True."
      },
      {
        "name": "defaults",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Default context passed to the template."
      },
      {
        "name": "backup",
        "defaultValue": "''",
        "isRequired": false,
        "description": "Overrides the default backup mode for the user's crontab."
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.cron.present",
    "description": "Verifies that the specified cron job is present for the specified user.\nFor more advanced information about what exactly can be set in the cron\ntiming parameters, check your cron system's documentation. Most Unix-like\nsystems' cron documentation can be found via the crontab man page:\nman 5 crontab.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The command that should be executed by the cron job."
      },
      {
        "name": "user",
        "defaultValue": "'root'",
        "isRequired": false,
        "description": "The name of the user whose crontab needs to be modified, defaults to\nthe root user"
      },
      {
        "name": "minute",
        "defaultValue": "'*'",
        "isRequired": false,
        "description": "The information to be set into the minute section, this can be any\nstring supported by your cron system's the minute field. Default is\n*"
      },
      {
        "name": "hour",
        "defaultValue": "'*'",
        "isRequired": false,
        "description": "The information to be set in the hour section. Default is *"
      },
      {
        "name": "daymonth",
        "defaultValue": "'*'",
        "isRequired": false,
        "description": "The information to be set in the day of month section. Default is *"
      },
      {
        "name": "month",
        "defaultValue": "'*'",
        "isRequired": false,
        "description": "The information to be set in the month section. Default is *"
      },
      {
        "name": "dayweek",
        "defaultValue": "'*'",
        "isRequired": false,
        "description": "The information to be set in the day of week section. Default is *"
      },
      {
        "name": "comment",
        "defaultValue": "None",
        "isRequired": false,
        "description": "User comment to be added on line previous the cron job"
      },
      {
        "name": "commented",
        "defaultValue": "False",
        "isRequired": false,
        "description": "The cron job is set commented (prefixed with #DISABLED#). Defaults to False.\n\n\n\n\nNew in version 2016.3.0.\n\n\n"
      },
      {
        "name": "identifier",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Custom-defined identifier for tracking the cron line for future crontab\nedits. This defaults to the state id"
      },
      {
        "name": "special",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A special keyword to specify periodicity (eg. @reboot, @hourly...)\n\n\n\n\nNew in version 2016.3.0.\n\n\n"
      }
    ]
  },
  {
    "functionId": "salt.states.csf.nics_skip",
    "description": "Alias for csf.nics_skipped",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "nics",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "ipv6",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.csf.nics_skipped",
    "description": "Unknown",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Meaningless arg, but required for state."
      },
      {
        "name": "nics",
        "defaultValue": null,
        "isRequired": true,
        "description": "A list of nics to skip."
      },
      {
        "name": "ipv6",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Boolean. Set to true if you want to skip\nthe ipv6 interface. Default false (ipv4)."
      }
    ]
  },
  {
    "functionId": "salt.states.csf.option_present",
    "description": "Ensure the state of a particular option/setting in csf.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The option name in csf.conf"
      },
      {
        "name": "value",
        "defaultValue": null,
        "isRequired": true,
        "description": "The value it should be set to."
      },
      {
        "name": "reload",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Boolean. If set to true, csf will be reloaded after."
      }
    ]
  },
  {
    "functionId": "salt.states.csf.ports_open",
    "description": "Ensure ports are open for a protocol, in a direction.\ne.g. - proto='tcp', direction='in' would set the values\nfor TCP_IN in the csf.conf file.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "ports",
        "defaultValue": null,
        "isRequired": true,
        "description": "A list of ports that should be open."
      },
      {
        "name": "proto",
        "defaultValue": "'tcp'",
        "isRequired": false,
        "description": "The protocol. May be one of 'tcp', 'udp',\n'tcp6', or 'udp6'."
      },
      {
        "name": "direction",
        "defaultValue": "'in'",
        "isRequired": false,
        "description": "Choose 'in', 'out', or both to indicate the port\nshould be opened for inbound traffic, outbound\ntraffic, or both."
      }
    ]
  },
  {
    "functionId": "salt.states.csf.rule_absent",
    "description": "Ensure iptable is not present.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The ip address or CIDR for the rule."
      },
      {
        "name": "method",
        "defaultValue": null,
        "isRequired": true,
        "description": "The type of rule.  Either 'allow' or 'deny'."
      },
      {
        "name": "port",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Optional port to be open or closed for the\niptables rule."
      },
      {
        "name": "proto",
        "defaultValue": "'tcp'",
        "isRequired": false,
        "description": "The protocol. Either 'tcp', 'udp'.\nOnly applicable if port is specified."
      },
      {
        "name": "direction",
        "defaultValue": "'in'",
        "isRequired": false,
        "description": "The diretion of traffic to apply the rule to.\nEither 'in', or 'out'. Only applicable if\nport is specified."
      },
      {
        "name": "port_origin",
        "defaultValue": "'d'",
        "isRequired": false,
        "description": "Specifies either the source or destination\nport is relevant for this rule. Only applicable\nif port is specified.  Either 's', or 'd'."
      },
      {
        "name": "ip_origin",
        "defaultValue": "'s'",
        "isRequired": false,
        "description": "Specifies whether the ip in this rule refers to\nthe source or destination ip. Either 's', or\n'd'. Only applicable if port is specified."
      },
      {
        "name": "ttl",
        "defaultValue": "None",
        "isRequired": false,
        "description": "How long the rule should exist. If supplied,\ncsf.tempallow() or csf.tempdeny()` are used."
      },
      {
        "name": "reload",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Reload the csf service after applying this rule.\nDefault false."
      }
    ]
  },
  {
    "functionId": "salt.states.csf.rule_present",
    "description": "Ensure iptable rule exists.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The ip address or CIDR for the rule."
      },
      {
        "name": "method",
        "defaultValue": null,
        "isRequired": true,
        "description": "The type of rule.  Either 'allow' or 'deny'."
      },
      {
        "name": "port",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Optional port to be open or closed for the\niptables rule."
      },
      {
        "name": "proto",
        "defaultValue": "'tcp'",
        "isRequired": false,
        "description": "The protocol. Either 'tcp', or 'udp'.\nOnly applicable if port is specified."
      },
      {
        "name": "direction",
        "defaultValue": "'in'",
        "isRequired": false,
        "description": "The diretion of traffic to apply the rule to.\nEither 'in', or 'out'. Only applicable if\nport is specified."
      },
      {
        "name": "port_origin",
        "defaultValue": "'d'",
        "isRequired": false,
        "description": "Specifies either the source or destination\nport is relevant for this rule. Only applicable\nif port is specified.  Either 's', or 'd'."
      },
      {
        "name": "ip_origin",
        "defaultValue": "'s'",
        "isRequired": false,
        "description": "Specifies whether the ip in this rule refers to\nthe source or destination ip. Either 's', or\n'd'. Only applicable if port is specified."
      },
      {
        "name": "ttl",
        "defaultValue": "None",
        "isRequired": false,
        "description": "How long the rule should exist. If supplied,\ncsf.tempallow() or csf.tempdeny()` are used."
      },
      {
        "name": "comment",
        "defaultValue": "''",
        "isRequired": false,
        "description": "An optional comment to appear after the rule\nas a #comment ."
      },
      {
        "name": "reload",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Reload the csf service after applying this rule.\nDefault false."
      }
    ]
  },
  {
    "functionId": "salt.states.csf.testing_off",
    "description": "Ensure testing mode is enabled in csf.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "reload",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Reload CSF after changing the testing status.\nDefault false."
      }
    ]
  },
  {
    "functionId": "salt.states.csf.testing_on",
    "description": "Ensure testing mode is enabled in csf.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "reload",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Reload CSF after changing the testing status.\nDefault false."
      }
    ]
  },
  {
    "functionId": "salt.states.cyg.installed",
    "description": "Make sure that a package is installed.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the package to install"
      },
      {
        "name": "cyg_arch",
        "defaultValue": "'x86_64'",
        "isRequired": false,
        "description": "The cygwin architecture to install the package into.\nCurrent options are x86 and x86_64"
      },
      {
        "name": "mirrors",
        "defaultValue": "None",
        "isRequired": false,
        "description": "List of mirrors to check.\nNone will use a default mirror (kernel.org)"
      }
    ]
  },
  {
    "functionId": "salt.states.cyg.removed",
    "description": "Make sure that a package is not installed.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the package to uninstall"
      },
      {
        "name": "cyg_arch",
        "defaultValue": "'x86_64'",
        "isRequired": false,
        "description": "The cygwin architecture to remove the package from.\nCurrent options are x86 and x86_64"
      },
      {
        "name": "mirrors",
        "defaultValue": "None",
        "isRequired": false,
        "description": "List of mirrors to check.\nNone will use a default mirror (kernel.org)"
      }
    ]
  },
  {
    "functionId": "salt.states.cyg.updated",
    "description": "Make sure all packages are up to date.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": "None",
        "isRequired": false,
        "description": "No affect, salt fails poorly without the arg available"
      },
      {
        "name": "cyg_arch",
        "defaultValue": "'x86_64'",
        "isRequired": false,
        "description": "The cygwin architecture to update.\nCurrent options are x86 and x86_64"
      },
      {
        "name": "mirrors",
        "defaultValue": "None",
        "isRequired": false,
        "description": "List of mirrors to check.\nNone will use a default mirror (kernel.org)"
      }
    ]
  },
  {
    "functionId": "salt.states.ddns.absent",
    "description": "Ensures that the named DNS record is absent.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The host portion of the DNS record, e.g., 'webserver'. Name and zone\nare concatenated when the entry is created unless name includes a\ntrailing dot, so make sure that information is not duplicated in these\ntwo arguments."
      },
      {
        "name": "zone",
        "defaultValue": null,
        "isRequired": true,
        "description": "The zone to check"
      },
      {
        "name": "data",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Data for the DNS record. E.g., the IP address for an A record. If omitted,\nall records matching name (and rdtype, if provided) will be purged."
      },
      {
        "name": "rdtype",
        "defaultValue": "None",
        "isRequired": false,
        "description": "DNS resource type. If omitted, all types will be purged."
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Additional arguments the ddns.update function may need (e.g.\nnameserver, keyfile, keyname).  Note that the nsupdate key file can’t\nbe reused by this function, the keyfile and other arguments must\nfollow the [dnspython](http://www.dnspython.org/) spec."
      }
    ]
  },
  {
    "functionId": "salt.states.ddns.present",
    "description": "Ensures that the named DNS record is present with the given ttl.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The host portion of the DNS record, e.g., 'webserver'. Name and zone\nare concatenated when the entry is created unless name includes a\ntrailing dot, so make sure that information is not duplicated in these\ntwo arguments."
      },
      {
        "name": "zone",
        "defaultValue": null,
        "isRequired": true,
        "description": "The zone to check/update"
      },
      {
        "name": "ttl",
        "defaultValue": null,
        "isRequired": true,
        "description": "TTL for the record"
      },
      {
        "name": "data",
        "defaultValue": null,
        "isRequired": true,
        "description": "Data for the DNS record. E.g., the IP address for an A record."
      },
      {
        "name": "rdtype",
        "defaultValue": "'A'",
        "isRequired": false,
        "description": "DNS resource type. Default 'A'."
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Additional arguments the ddns.update function may need (e.g.\nnameserver, keyfile, keyname).  Note that the nsupdate key file can’t\nbe reused by this function, the keyfile and other arguments must\nfollow the [dnspython](http://www.dnspython.org/) spec."
      }
    ]
  },
  {
    "functionId": "salt.states.debconfmod.set",
    "description": "Set debconf selections",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "data",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.debconfmod.set_file",
    "description": "Set debconf selections from a file or a template",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "source",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "template",
        "defaultValue": "None",
        "isRequired": false,
        "description": "If this setting is applied then the named templating engine will be\nused to render the package selections file, currently jinja, mako, and\nwempy are supported"
      },
      {
        "name": "context",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Overrides default context variables passed to the template."
      },
      {
        "name": "defaults",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Default context passed to the template."
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.dellchassis.blade_idrac",
    "description": "Set parameters for iDRAC in a blade.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "idrac_password",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "idrac_ipmi",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "idrac_ip",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "idrac_netmask",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "idrac_gateway",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "idrac_dnsname",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "idrac_dhcp",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.dellchassis.chassis",
    "description": "Manage a Dell Chassis.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "chassis_name",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The name of the chassis."
      },
      {
        "name": "password",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Password for the chassis. Note: If this password is set for the chassis,\nthe current implementation of this state will set this password both on\nthe chassis and the iDrac passwords on any configured blades. If the\npassword for the blades should be distinct, they should be set separately\nwith the blade_idrac function."
      },
      {
        "name": "datacenter",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The datacenter in which the chassis is located"
      },
      {
        "name": "location",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The location of the chassis."
      },
      {
        "name": "mode",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The management mode of the chassis. Viable options are:\n\n*   0: None\n*   1: Monitor\n*   2: Manage and Monitor\n"
      },
      {
        "name": "idrac_launch",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The iDRAC launch method of the chassis. Viable options are:\n\n*   0: Disabled (launch iDRAC using IP address)\n*   1: Enabled (launch iDRAC using DNS name)\n"
      },
      {
        "name": "slot_names",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The names of the slots, provided as a list identified by\ntheir slot numbers."
      },
      {
        "name": "blade_power_states",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The power states of a blade server, provided as a list and identified by their server numbers. Viable options are:\n\n> \n> \n> *   on: Ensure the blade server is powered on.\n> *   off: Ensure the blade server is powered off.\n> *   powercycle: Power cycle the blade server.\n\n"
      }
    ]
  },
  {
    "functionId": "salt.states.dellchassis.firmware_update",
    "description": "Unknown",
    "arguments": [
      {
        "name": "hosts",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "directory",
        "defaultValue": "''",
        "isRequired": false,
        "description": "Directory name where firmwarefile\nwill be downloaded"
      }
    ]
  },
  {
    "functionId": "salt.states.dellchassis.switch",
    "description": "Manage switches in a Dell Chassis.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The switch designation (e.g. switch-1, switch-2)"
      },
      {
        "name": "ip",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The Static IP Address of the switch"
      },
      {
        "name": "netmask",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The netmask for the static IP"
      },
      {
        "name": "gateway",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The gateway for the static IP"
      },
      {
        "name": "dhcp",
        "defaultValue": "None",
        "isRequired": false,
        "description": "True: Enable DHCP\nFalse: Do not change DHCP setup\n(disabling DHCP is automatic when a static IP is set)"
      },
      {
        "name": "password",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The access (root) password for the switch"
      },
      {
        "name": "snmp",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The SNMP community string for the switch"
      }
    ]
  },
  {
    "functionId": "salt.states.disk.status",
    "description": "Return the current disk usage stats for the named mount point",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Disk mount with which to check used space"
      },
      {
        "name": "maximum",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The maximum disk utilization"
      },
      {
        "name": "minimum",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The minimum disk utilization"
      },
      {
        "name": "absolute",
        "defaultValue": "False",
        "isRequired": false,
        "description": "By default, the utilization is measured in percentage. Set the absolute flag to use kilobytes.\n\n\n\n\nNew in version 2016.11.0.\n\n\n"
      }
    ]
  },
  {
    "functionId": "salt.states.dockerio.absent",
    "description": "Ensure that the container is absent; if not, it will\nwill be killed and destroyed. (docker inspect)",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.dockerio.built",
    "description": "Build a docker image from a path or URL to a dockerfile. (docker build)",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Name of the image"
      },
      {
        "name": "tag",
        "defaultValue": "'latest'",
        "isRequired": false,
        "description": "tag of the image (defaults to 'latest')"
      },
      {
        "name": "path",
        "defaultValue": "None",
        "isRequired": false,
        "description": "URL (e.g. url/branch/docker_dir/dockerfile)\nor filesystem path to the dockerfile"
      },
      {
        "name": "quiet",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "nocache",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "rm",
        "defaultValue": "True",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "force",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "timeout",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "*args",
        "defaultValue": "*args",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.dockerio.installed",
    "description": "Ensure that a container with the given name exists;\nif not, build a new container from the specified image.\n(docker run)",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Name for the container"
      },
      {
        "name": "image",
        "defaultValue": null,
        "isRequired": true,
        "description": "Image from which to build this container"
      },
      {
        "name": "tag",
        "defaultValue": "'latest'",
        "isRequired": false,
        "description": "tag of the image (defaults to 'latest')"
      },
      {
        "name": "command",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "hostname",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "user",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "detach",
        "defaultValue": "True",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "stdin_open",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "tty",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "mem_limit",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "ports",
        "defaultValue": "None",
        "isRequired": false,
        "description": "\nList of ports definitions, either:\n\n\n*   a port to map\n*   a mapping of mapping portInHost : PortInContainer\n\n\n"
      },
      {
        "name": "environment",
        "defaultValue": "None",
        "isRequired": false,
        "description": "\nEnvironment variables for the container, either\n\n\n*   a mapping of key, values\n*   a list of mappings of key, values\n\n\n"
      },
      {
        "name": "dns",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "volumes",
        "defaultValue": "None",
        "isRequired": false,
        "description": "List of volumes (see notes for the running function)"
      },
      {
        "name": "volumes_from",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "cpu_shares",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "cpuset",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "*args",
        "defaultValue": "*args",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.dockerio.loaded",
    "description": "Load an image into the local docker registry (docker load)",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Name of the docker image"
      },
      {
        "name": "tag",
        "defaultValue": "'latest'",
        "isRequired": false,
        "description": "tag of the image (defaults to 'latest')"
      },
      {
        "name": "source",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The source .tar file to download to the minion, created by docker save this source file can be hosted on either the salt master server, or on an HTTP or FTP server.\n\nIf the file is hosted on a HTTP or FTP server then the source_hash argument is also required\n\n\n\n\nNote\n\nSee first the documentation for Salt [file.managed](http://docs.saltstack.com/en/latest/ref/states/all/salt.states.file.html#salt.states.file.managed)\n\n\n"
      },
      {
        "name": "source_hash",
        "defaultValue": "''",
        "isRequired": false,
        "description": "\nThis can be one of the following:\n\n\n1.  a source hash string\n2.  the URI of a file that contains source hash strings\n\n\n"
      },
      {
        "name": "force",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Load even if the image exists"
      }
    ]
  },
  {
    "functionId": "salt.states.dockerio.present",
    "description": "If a container with the given name is not present, this state will fail.\nSupports optionally checking for specific image/tag\n(docker inspect)",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "image",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "tag",
        "defaultValue": "'latest'",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "is_latest",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.dockerio.pulled",
    "description": "Pull an image from a docker registry. (docker pull)",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Name of the image"
      },
      {
        "name": "tag",
        "defaultValue": "'latest'",
        "isRequired": false,
        "description": "Tag of the image"
      },
      {
        "name": "force",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Pull even if the image is already pulled"
      },
      {
        "name": "insecure_registry",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Set to True to allow connections to non-HTTPS registries. Default False."
      },
      {
        "name": "*args",
        "defaultValue": "*args",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.dockerio.pushed",
    "description": "Push an image from a docker registry. (docker push)",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Name of the image"
      },
      {
        "name": "tag",
        "defaultValue": "'latest'",
        "isRequired": false,
        "description": "Tag of the image [Optional]"
      },
      {
        "name": "insecure_registry",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Set to True to allow connections to non-HTTPS registries. Default False."
      }
    ]
  },
  {
    "functionId": "salt.states.dockerio.run",
    "description": "Run a command in a specific container",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "command to run in the container"
      },
      {
        "name": "cid",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Container id or name"
      },
      {
        "name": "hostname",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "onlyif",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Only execute cmd if statement on the host returns 0"
      },
      {
        "name": "unless",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Do not execute cmd if statement on the host returns 0"
      },
      {
        "name": "docked_onlyif",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Only execute cmd if statement in the container returns 0"
      },
      {
        "name": "docked_unless",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Do not execute cmd if statement in the container returns 0"
      },
      {
        "name": "*args",
        "defaultValue": "*args",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.dockerio.running",
    "description": "Ensure that a container is running. If the container does not exist, it\nwill be created from the specified image. (docker run)",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "image",
        "defaultValue": null,
        "isRequired": true,
        "description": "Image from which to build this container"
      },
      {
        "name": "tag",
        "defaultValue": "'latest'",
        "isRequired": false,
        "description": "tag of the image (defaults to 'latest')"
      },
      {
        "name": "container",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "command",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "hostname",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "user",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "detach",
        "defaultValue": "True",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "stdin_open",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "tty",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "mem_limit",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "ports",
        "defaultValue": "None",
        "isRequired": false,
        "description": "\nList of ports definitions, either:\n\n\n*   a port to map\n*   a mapping of mapping portInHost : PortInContainer\n\n\n\n\n- ports:\n  - \"5000/tcp\":\n        HostIp: \"\"\n        HostPort: \"5000\"\n\n\n\n"
      },
      {
        "name": "environment",
        "defaultValue": "None",
        "isRequired": false,
        "description": "\nEnvironment variables for the container, either\n\n\n*   a mapping of key, values\n*   a list of mappings of key, values\n\n\n"
      },
      {
        "name": "dns",
        "defaultValue": "None",
        "isRequired": false,
        "description": "List of DNS servers.\n\n\n\n- dns:\n    - 127.0.0.1\n\n\n\n"
      },
      {
        "name": "volumes",
        "defaultValue": "None",
        "isRequired": false,
        "description": "List of volumes to mount or create in the container (like -v of docker run command), mapping host directory to container directory.\n\nTo specify a volume in the container in terse list format:\n\n\n\n- volumes:\n  - \"/var/log/service\" # container-only volume\n  - \"/srv/timezone:/etc/timezone\" # bound volume\n  - \"/usr/local/etc/passwd:/etc/passwd:ro\" # read-only bound volume\n\n\n\n\n\nYou can also use the short dictionary form (note that the notion of source:target from docker is preserved):\n\n\n\n- volumes:\n  - /var/log/service: /var/log/service # mandatory read-write implied\n\n\n\n\n\nOr, alternatively, to specify read-only mounting, use the extended form:\n\n\n\n- volumes:\n  - /home/user1:\n      bind: /mnt/vol2\n      ro: True\n  - /var/www:\n      bind: /mnt/vol1\n      ro: False\n\n\n\n\n\nOr (for backwards compatibility) another dict style:\n\n\n\n- volumes:\n    /home/user1:\n      bind: /mnt/vol2\n      ro: True\n    /var/www:\n      bind: /mnt/vol1\n      ro: False\n\n\n\n"
      },
      {
        "name": "volumes_from",
        "defaultValue": "None",
        "isRequired": false,
        "description": "List of containers to share volumes with"
      },
      {
        "name": "start",
        "defaultValue": "True",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "cap_add",
        "defaultValue": "None",
        "isRequired": false,
        "description": "List of capabilities to add in a container."
      },
      {
        "name": "cap_drop",
        "defaultValue": "None",
        "isRequired": false,
        "description": "List of capabilities to drop in a container."
      },
      {
        "name": "privileged",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "lxc_conf",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "network_mode",
        "defaultValue": "None",
        "isRequired": false,
        "description": "*   'bridge': creates a new network stack for the container on the docker bridge\n*   'none': no networking for this container\n*   'container:[name|id]': reuses another container network stack)\n*   'host': use the host network stack inside the container\n\n\n- network_mode: host\n\n\n\n"
      },
      {
        "name": "check_is_running",
        "defaultValue": "True",
        "isRequired": false,
        "description": "Enable checking if a container should run or not.\nUseful for data-only containers that must be linked to another one.\ne.g. nginx <- static-files"
      },
      {
        "name": "publish_all_ports",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Publish all ports from the port list (default is false,\nonly meaningful if port does not contain portinhost:portincontainer mapping)"
      },
      {
        "name": "links",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "restart_policy",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Restart policy to apply when a container exits (no, on-failure[:max-retry], always)\n\n\n\n- restart_policy:\n    MaximumRetryCount: 5\n    Name: on-failure\n\n\n\n"
      },
      {
        "name": "cpu_shares",
        "defaultValue": "None",
        "isRequired": false,
        "description": "CPU shares (relative weight)\n\n\n\n- cpu_shares: 2\n\n\n\n"
      },
      {
        "name": "cpuset",
        "defaultValue": "None",
        "isRequired": false,
        "description": "CPUs in which to allow execution ('0-3' or '0,1')\n\n\n\n- cpuset: '0-3'\n\n\n\n"
      },
      {
        "name": "kill_signal",
        "defaultValue": "None",
        "isRequired": false,
        "description": "If defined, its value will be sent as a kill signal to the running container. i.e. It will use client.kill(signal=kill_signal) instead of client.restart(), when the state is triggered by a watcher requisite.\n\npossible use case: Soft reload of nginx\n\n\n\nnginx:\n  docker.running:\n    - image: some-fictional-registry.com/nginx\n    - tag: latest\n    - kill_signal: SIGHUP\n    - watch:\n      - file: /etc/nginx/nginx.conf\n\n\n\n\n\nThis state will ask nginx to reload (instead of restart) each time the /etc/nginx/nginx.conf is modified.\n\n\n\n\nNew in version 2015.8.0.\n\n\n"
      },
      {
        "name": "*args",
        "defaultValue": "*args",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.dockerio.script",
    "description": "Placeholder function for a cmd.script alike.",
    "arguments": [
      {
        "name": "*args",
        "defaultValue": "*args",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "**kw",
        "defaultValue": "**kw",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.dockerng.absent",
    "description": "Ensure that a container is absent",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Name of the container"
      },
      {
        "name": "force",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Set to True to remove the container even if it is running"
      }
    ]
  },
  {
    "functionId": "salt.states.dockerng.image_absent",
    "description": "Ensure that an image is absent from the Minion. Image names can be\nspecified either using repo:tag notation, or just the repo name (in\nwhich case a tag of latest is assumed).",
    "arguments": [
      {
        "name": "name",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "images",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Run this state on more than one image at a time. The following two examples accomplish the same thing:\n\n\n\nremove_images:\n  dockerng.image_absent:\n    - names:\n      - busybox\n      - centos:6\n      - nginx\n\n\n\n\n\nremove_images:\n  dockerng.image_absent:\n    - images:\n      - busybox\n      - centos:6\n      - nginx\n\n\n\n\n\nHowever, the second example will be a bit quicker since Salt will do all the deletions in a single run, rather than executing the state separately on each image (as it would in the first example).\n"
      },
      {
        "name": "force",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Salt will fail to remove any images currently in use by a container. Set this option to true to remove the image even if it is already present.\n\n\n\n\nNote\n\nThis option can also be overridden by Pillar data. If the Minion has a pillar variable named dockerng.running.force which is set to True, it will turn on this option. This pillar variable can even be set at runtime. For example:\n\n\n\nsalt myminion state.sls docker_stuff pillar=\"{dockerng.force: True}\"\n\n\n\n\n\nIf this pillar variable is present and set to False, then it will turn off this option.\n\nFor more granular control, setting a pillar variable named dockerng.force.image_name will affect only the named image.\n\n\n"
      }
    ]
  },
  {
    "functionId": "salt.states.dockerng.image_present",
    "description": "Ensure that an image is present. The image can either be pulled from a\nDocker registry, built from a Dockerfile, or loaded from a saved image.\nImage names can be specified either using repo:tag notation, or just\nthe repo name (in which case a tag of latest is assumed).\nRepo identifier is mandatory, we don't assume the default repository\nis docker hub.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "build",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Path to directory on the Minion containing a Dockerfile\n\n\n\nmyuser/myimage:mytag:\n  dockerng.image_present:\n    - build: /home/myuser/docker/myimage\n\n\nmyuser/myimage:mytag:\n  dockerng.image_present:\n    - build: /home/myuser/docker/myimage\n    - dockerfile: Dockerfile.alternative\n\n.. versionadded:: develop\n\n\n\n\n\nThe image will be built using [dockerng.build](../../modules/all/salt.modules.dockerng.html#salt.modules.dockerng.build \"salt.modules.dockerng.build\") and the specified image name and tag will be applied to it.\n"
      },
      {
        "name": "load",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Loads a tar archive created with [dockerng.load](../../modules/all/salt.modules.dockerng.html#salt.modules.dockerng.load \"salt.modules.dockerng.load\") (or the docker load Docker CLI command), and assigns it the specified repo and tag.\n\n\n\nmyuser/myimage:mytag:\n  dockerng.image_present:\n    - load: salt://path/to/image.tar\n\n\n\n"
      },
      {
        "name": "force",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Set this parameter to True to force Salt to pull/build/load the\nimage even if it is already present."
      },
      {
        "name": "insecure_registry",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "client_timeout",
        "defaultValue": "60",
        "isRequired": false,
        "description": "Timeout in seconds for the Docker client. This is not a timeout for\nthe state, but for receiving a response from the API."
      },
      {
        "name": "dockerfile",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Allows for an alternative Dockerfile to be specified. Path to alternative Dockefile is relative to the build path for the Docker container.\n\n\n\n\nNew in version develop.\n\n\n"
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.dockerng.network_absent",
    "description": "Ensure that a network is absent.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Name of the network"
      },
      {
        "name": "driver",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.dockerng.network_present",
    "description": "Ensure that a network is present.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Name of the network"
      },
      {
        "name": "driver",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Type of driver for that network."
      },
      {
        "name": "containers",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.dockerng.running",
    "description": "Ensure that a container with a specific configuration is present and\nrunning",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Name of the container"
      },
      {
        "name": "image",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Image to use for the container. Image names can be specified either using repo:tag notation, or just the repo name (in which case a tag of latest is assumed).\n\n\n\n\nNote\n\nThis state will pull the image if it is not present. However, if the image needs to be built from a Dockerfile or loaded from a saved image, or if you would like to use requisites to trigger a replacement of the container when the image is updated, then the dockerng.image_present should be used to manage the image.\n\n\n"
      },
      {
        "name": "force",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Set this parameter to True to force Salt to re-create the container\nirrespective of whether or not it is configured as desired."
      },
      {
        "name": "stop_timeout",
        "defaultValue": "10",
        "isRequired": false,
        "description": "If the container needs to be replaced, the container will be stopped\nusing [dockerng.stop](../../modules/all/salt.modules.dockerng.html#salt.modules.dockerng.stop \"salt.modules.dockerng.stop\"). The value\nof this parameter will be passed to [dockerng.stop](../../modules/all/salt.modules.dockerng.html#salt.modules.dockerng.stop \"salt.modules.dockerng.stop\") as the timeout value, telling Docker\nhow long to wait for a graceful shutdown before killing the container."
      },
      {
        "name": "validate_ip_addrs",
        "defaultValue": "True",
        "isRequired": false,
        "description": "For parameters which accept IP addresses as input, IP address\nvalidation will be performed. To disable, set this to False"
      },
      {
        "name": "watch_action",
        "defaultValue": "'force'",
        "isRequired": false,
        "description": "Control what type of action is taken when this state [watches](../requisites.html#requisites-watch) another state that has changes. The default action is force, which runs the state with force set to True, triggering a rebuild of the container.\n\nIf any other value is passed, it will be assumed to be a kill signal. If the container matches the specified configuration, and is running, then the action will be to send that signal to the container. Kill signals can be either strings or numbers, and are defined in the **Standard Signals** section of the signal(7) manpage. Run man 7 signal on a Linux host to browse this manpage. For example:\n\n\n\nmycontainer:\n  dockerng.running:\n    - image: busybox\n    - watch_action: SIGHUP\n    - watch:\n      - file: some_file\n\n\n\n\n\n\nNote\n\nIf the container differs from the specified configuration, or is not running, then instead of sending a signal to the container, the container will be re-created/started and no signal will be sent.\n\n\n"
      },
      {
        "name": "client_timeout",
        "defaultValue": "60",
        "isRequired": false,
        "description": "Timeout in seconds for the Docker client. This is not a timeout for this function, but for receiving a response from the API.\n\n\n\n\nNote\n\nThis is only used if Salt needs to pull the requested image.\n\n\n"
      },
      {
        "name": "start",
        "defaultValue": "True",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.dockerng.stopped",
    "description": "Ensure that a container (or containers) is stopped",
    "arguments": [
      {
        "name": "name",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Name or ID of the container"
      },
      {
        "name": "containers",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Run this state on more than one container at a time. The following two examples accomplish the same thing:\n\n\n\nstopped_containers:\n  dockerng.stopped:\n    - names:\n      - foo\n      - bar\n      - baz\n\n\n\n\n\nstopped_containers:\n  dockerng.stopped:\n    - containers:\n      - foo\n      - bar\n      - baz\n\n\n\n\n\nHowever, the second example will be a bit quicker since Salt will stop all specified containers in a single run, rather than executing the state separately on each image (as it would in the first example).\n"
      },
      {
        "name": "stop_timeout",
        "defaultValue": "10",
        "isRequired": false,
        "description": "Timeout for graceful shutdown of the container. If this timeout is\nexceeded, the container will be killed."
      },
      {
        "name": "unpause",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Set to True to unpause any paused containers before stopping. If\nunset, then an error will be raised for any container that was paused."
      },
      {
        "name": "error_on_absent",
        "defaultValue": "True",
        "isRequired": false,
        "description": "By default, this state will return an error if any of the specified\ncontainers are absent. Set this to False to suppress that error."
      }
    ]
  },
  {
    "functionId": "salt.states.dockerng.volume_absent",
    "description": "Ensure that a volume is absent.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Name of the volume"
      },
      {
        "name": "driver",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.dockerng.volume_present",
    "description": "Ensure that a volume is present.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Name of the volume"
      },
      {
        "name": "driver",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Type of driver for that volume.  If None and the volume\ndoes not yet exist, the volume will be created using Docker's\ndefault driver.  If None and the volume does exist, this\nfunction does nothing, even if the existing volume's driver is\nnot the Docker default driver.  (To ensure that an existing\nvolume's driver matches the Docker default, you must\nexplicitly name Docker's default driver here.)"
      },
      {
        "name": "driver_opts",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Options for the volume driver"
      },
      {
        "name": "force",
        "defaultValue": "False",
        "isRequired": false,
        "description": "If the volume already exists but the existing volume's driver does not match the driver specified by the driver parameter, this parameter controls whether the function errors out (if False) or deletes and re-creates the volume (if True).\n\n\n\n\nNew in version 2015.8.6.\n\n\n"
      }
    ]
  },
  {
    "functionId": "salt.states.drac.absent",
    "description": "Ensure a user does not exist on the Dell DRAC",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.drac.network",
    "description": "Ensure the DRAC network settings are consistent",
    "arguments": [
      {
        "name": "ip",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "netmask",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "gateway",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.drac.present",
    "description": "Ensure the user exists on the Dell DRAC",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "password",
        "defaultValue": null,
        "isRequired": true,
        "description": "The password used to authenticate"
      },
      {
        "name": "permission",
        "defaultValue": null,
        "isRequired": true,
        "description": "The permissions that should be assigned to a user"
      }
    ]
  },
  {
    "functionId": "salt.states.elasticsearch_index.absent",
    "description": "Ensure that the named index is absent",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.elasticsearch_index.present",
    "description": "Ensure that the named index is present",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "definition",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.elasticsearch_index_template.absent",
    "description": "Ensure that the named index template is absent",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.elasticsearch_index_template.present",
    "description": "Ensure that the named index template is present",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "definition",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.environ.setenv",
    "description": "Set the salt process environment variables.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The environment key to set. Must be a string."
      },
      {
        "name": "value",
        "defaultValue": null,
        "isRequired": true,
        "description": "Either a string or dict. When string, it will be the value\nset for the environment key of 'name' above.\nWhen a dict, each key/value pair represents an environment\nvariable to set."
      },
      {
        "name": "false_unsets",
        "defaultValue": "False",
        "isRequired": false,
        "description": "If a key's value is False and false_unsets is True, then the\nkey will be removed from the salt processes environment dict\nentirely. If a key's value is False and false_unsets is not\nTrue, then the key's value will be set to an empty string.\nDefault: False"
      },
      {
        "name": "clear_all",
        "defaultValue": "False",
        "isRequired": false,
        "description": "USE WITH CAUTION! This option can unset environment variables\nneeded for salt to function properly.\nIf clear_all is True, then any environment variables not\ndefined in the environ dict will be deleted.\nDefault: False"
      },
      {
        "name": "update_minion",
        "defaultValue": "False",
        "isRequired": false,
        "description": "If True, apply these environ changes to the main salt-minion\nprocess. If False, the environ changes will only affect the\ncurrent salt subprocess.\nDefault: False"
      },
      {
        "name": "permanent",
        "defaultValue": "False",
        "isRequired": false,
        "description": "On Windows minions this will set the environment variable in the\nregistry so that it is always added as a environment variable when\napplications open. If you want to set the variable to HKLM instead of\nHKCU just pass in \"HKLM\" for this parameter. On all other minion types\nthis will be ignored. Note: This will only take affect on applications\nopened after this has been set."
      }
    ]
  },
  {
    "functionId": "salt.states.eselect.set",
    "description": "Verify that the given module is set to the given target",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the module"
      },
      {
        "name": "target",
        "defaultValue": null,
        "isRequired": true,
        "description": "The target to be set for this module"
      },
      {
        "name": "module_parameter",
        "defaultValue": "None",
        "isRequired": false,
        "description": "additional params passed to the defined module"
      },
      {
        "name": "action_parameter",
        "defaultValue": "None",
        "isRequired": false,
        "description": "additional params passed to the defined action"
      }
    ]
  },
  {
    "functionId": "salt.states.etcd_mod.mod_watch",
    "description": "Execute a etcd function based on a watch call requisite.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.etcd_mod.rm",
    "description": "Deletes a key from etcd. This function is also aliased as rm.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The etcd key name to remove, for example /foo/bar/baz."
      },
      {
        "name": "recurse",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Optional, defaults to False. If True performs a recursive delete."
      },
      {
        "name": "profile",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Optional, defaults to None. Sets the etcd profile to use which has\nbeen defined in the Salt Master config."
      }
    ]
  },
  {
    "functionId": "salt.states.etcd_mod.set",
    "description": "Set a key in etcd and can be called as set.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The etcd key name, for example: /foo/bar/baz."
      },
      {
        "name": "value",
        "defaultValue": null,
        "isRequired": true,
        "description": "The value the key should contain."
      },
      {
        "name": "profile",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Optional, defaults to None. Sets the etcd profile to use which has\nbeen defined in the Salt Master config."
      }
    ]
  },
  {
    "functionId": "salt.states.etcd_mod.wait_rm",
    "description": "Deletes a key from etcd only if the watch statement calls it.\nThis function is also aliased as wait_rm.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The etcd key name to remove, for example /foo/bar/baz."
      },
      {
        "name": "recurse",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Optional, defaults to False. If True performs a recursive\ndelete, see: [https://python-etcd.readthedocs.io/en/latest/#delete-a-key](https://python-etcd.readthedocs.io/en/latest/#delete-a-key)."
      },
      {
        "name": "profile",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Optional, defaults to None. Sets the etcd profile to use which has\nbeen defined in the Salt Master config."
      }
    ]
  },
  {
    "functionId": "salt.states.etcd_mod.wait_set",
    "description": "Set a key in etcd only if the watch statement calls it. This function is\nalso aliased as wait_set.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The etcd key name, for example: /foo/bar/baz."
      },
      {
        "name": "value",
        "defaultValue": null,
        "isRequired": true,
        "description": "The value the key should contain."
      },
      {
        "name": "profile",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The etcd profile to use that has been configured on the Salt Master,\nthis is optional and defaults to None."
      }
    ]
  },
  {
    "functionId": "salt.states.ethtool.coalesce",
    "description": "Manage coalescing settings of network device",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Interface name to apply coalescing settings"
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.ethtool.offload",
    "description": "Manage protocol offload and other features of network device",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Interface name to apply coalescing settings"
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.ethtool.ring",
    "description": "Manage rx/tx ring parameters of network device",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Interface name to apply ring parameters"
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.esxi.coredump_configured",
    "description": "Ensures a host's core dump configuration.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Name of the state."
      },
      {
        "name": "enabled",
        "defaultValue": null,
        "isRequired": true,
        "description": "Sets whether or not ESXi core dump collection should be enabled. This is a boolean value set to True or False to enable or disable core dumps.\n\nNote that ESXi requires that the core dump must be enabled before any other parameters may be set. This also affects the changes results in the state return dictionary. If enabled is False, we can't obtain any previous settings to compare other state variables, resulting in many old references returning None.\n\nOnce enabled is True the changes dictionary comparisons will be more accurate. This is due to the way the system coredemp network configuration command returns data.\n"
      },
      {
        "name": "dump_ip",
        "defaultValue": null,
        "isRequired": true,
        "description": "The IP address of host that will accept the dump."
      },
      {
        "name": "host_vnic",
        "defaultValue": "'vmk0'",
        "isRequired": false,
        "description": "Host VNic port through which to communicate. Defaults to vmk0."
      },
      {
        "name": "dump_port",
        "defaultValue": "6500",
        "isRequired": false,
        "description": "TCP port to use for the dump. Defaults to 6500."
      }
    ]
  },
  {
    "functionId": "salt.states.esxi.ntp_configured",
    "description": "Ensures a host's NTP server configuration such as setting NTP servers, ensuring the\nNTP daemon is running or stopped, or restarting the NTP daemon for the ESXi host.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Name of the state."
      },
      {
        "name": "service_running",
        "defaultValue": null,
        "isRequired": true,
        "description": "Ensures the running state of the ntp daemon for the host. Boolean value where\nTrue indicates that ntpd should be running and False indicates that it\nshould be stopped."
      },
      {
        "name": "ntp_servers",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A list of servers that should be added to the ESXi host's NTP configuration."
      },
      {
        "name": "service_policy",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The policy to set for the NTP service.\n\n\n\n\nNote\n\nWhen setting the service policy to off or on, you *must* quote the setting. If you don't, the yaml parser will set the string to a boolean, which will cause trouble checking for stateful changes and will error when trying to set the policy on the ESXi host.\n\n\n"
      },
      {
        "name": "service_restart",
        "defaultValue": "False",
        "isRequired": false,
        "description": "If set to True, the ntp daemon will be restarted, regardless of its previous\nrunning state. Default is False."
      },
      {
        "name": "update_datetime",
        "defaultValue": "False",
        "isRequired": false,
        "description": "If set to True, the date/time on the given host will be updated to UTC.\nDefault setting is False. This option should be used with caution since\nnetwork delays and execution delays can result in time skews."
      }
    ]
  },
  {
    "functionId": "salt.states.esxi.password_present",
    "description": "Ensures the given password is set on the ESXi host. Passwords cannot be obtained from\nhost, so if a password is set in this state, the vsphere.update_host_password\nfunction will always run (except when using test=True functionality) and the state's\nchanges dictionary will always be populated.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Name of the state."
      },
      {
        "name": "password",
        "defaultValue": null,
        "isRequired": true,
        "description": "The new password to change on the host."
      }
    ]
  },
  {
    "functionId": "salt.states.esxi.ssh_configured",
    "description": "Manage the SSH configuration for a host including whether or not SSH is running or\nthe presence of a given SSH key. Note: Only one ssh key can be uploaded for root.\nUploading a second key will replace any existing key.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Name of the state."
      },
      {
        "name": "service_running",
        "defaultValue": null,
        "isRequired": true,
        "description": "Ensures whether or not the SSH service should be running on a host. Represented as a boolean value where True indicates that SSH should be running and False indicates that SSH should stopped.\n\nIn order to update SSH keys, the SSH service must be running.\n"
      },
      {
        "name": "ssh_key",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Public SSH key to added to the authorized_keys file on the ESXi host. You can\nuse ssh_key or ssh_key_file, but not both."
      },
      {
        "name": "ssh_key_file",
        "defaultValue": "None",
        "isRequired": false,
        "description": "File containing the public SSH key to be added to the authorized_keys file on\nthe ESXi host. You can use ssh_key_file or ssh_key, but not both."
      },
      {
        "name": "service_policy",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The policy to set for the NTP service.\n\n\n\n\nNote\n\nWhen setting the service policy to off or on, you *must* quote the setting. If you don't, the yaml parser will set the string to a boolean, which will cause trouble checking for stateful changes and will error when trying to set the policy on the ESXi host.\n\n\n"
      },
      {
        "name": "service_restart",
        "defaultValue": "False",
        "isRequired": false,
        "description": "If set to True, the SSH service will be restarted, regardless of its\nprevious running state. Default is False."
      },
      {
        "name": "certificate_verify",
        "defaultValue": "False",
        "isRequired": false,
        "description": "If set to True, the SSL connection must present a valid certificate.\nDefault is False."
      }
    ]
  },
  {
    "functionId": "salt.states.esxi.syslog_configured",
    "description": "Ensures the specified syslog configuration parameters. By default,\nthis state will reset the syslog service after any new or changed\nparameters are set successfully.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Name of the state."
      },
      {
        "name": "syslog_configs",
        "defaultValue": null,
        "isRequired": true,
        "description": "Name of parameter to set (corresponds to the command line switch for esxcli without the double dashes (--))\n\nValid syslog_config values are logdir, loghost, logdir-unique, default-rotate, default-size, and default-timeout.\n\nEach syslog_config option also needs a configuration value to set. For example, loghost requires URLs or IP addresses to use for logging. Multiple log servers can be specified by listing them, comma-separated, but without spaces before or after commas\n\n(reference: [https://blogs.vmware.com/vsphere/2012/04/configuring-multiple-syslog-servers-for-esxi-5.html](https://blogs.vmware.com/vsphere/2012/04/configuring-multiple-syslog-servers-for-esxi-5.html))\n"
      },
      {
        "name": "firewall",
        "defaultValue": "True",
        "isRequired": false,
        "description": "Enable the firewall rule set for syslog. Defaults to True."
      },
      {
        "name": "reset_service",
        "defaultValue": "True",
        "isRequired": false,
        "description": "After a successful parameter set, reset the service. Defaults to True."
      },
      {
        "name": "reset_syslog_config",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Resets the syslog service to it's default settings. Defaults to False.\nIf set to True, default settings defined by the list of syslog configs\nin reset_configs will be reset before running any other syslog settings."
      },
      {
        "name": "reset_configs",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A comma-delimited list of parameters to reset. Only runs if reset_syslog_config is set to True. If reset_syslog_config is set to True, but no syslog configs are listed in reset_configs, then reset_configs will be set to all by default.\n\nSee syslog_configs parameter above for a list of valid options.\n"
      }
    ]
  },
  {
    "functionId": "salt.states.esxi.vmotion_configured",
    "description": "Configures a host's VMotion properties such as enabling VMotion and setting\nthe device VirtualNic that VMotion will use.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Name of the state."
      },
      {
        "name": "enabled",
        "defaultValue": null,
        "isRequired": true,
        "description": "Ensures whether or not VMotion should be enabled on a host as a boolean\nvalue where True indicates that VMotion should be enabled and False\nindicates that VMotion should be disabled."
      },
      {
        "name": "device",
        "defaultValue": "'vmk0'",
        "isRequired": false,
        "description": "The device that uniquely identifies the VirtualNic that will be used for\nVMotion for the host. Defaults to vmk0."
      }
    ]
  },
  {
    "functionId": "salt.states.esxi.vsan_configured",
    "description": "Configures a host's VSAN properties such as enabling or disabling VSAN, or\nadding VSAN-eligible disks to the VSAN system for the host.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Name of the state."
      },
      {
        "name": "enabled",
        "defaultValue": null,
        "isRequired": true,
        "description": "Ensures whether or not VSAN should be enabled on a host as a boolean\nvalue where True indicates that VSAN should be enabled and False\nindicates that VSAN should be disabled."
      },
      {
        "name": "add_disks_to_vsan",
        "defaultValue": "False",
        "isRequired": false,
        "description": "If set to True, any VSAN-eligible disks for the given host will be added\nto the host's VSAN system. Default is False."
      }
    ]
  },
  {
    "functionId": "salt.states.event.send",
    "description": "Send an event to the Salt Master",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "data",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "preload",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "with_env",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "with_grains",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "with_pillar",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.event.wait",
    "description": "Fire an event on the Salt master event bus if called from a watch statement",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "sfun",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.file.absent",
    "description": "Make sure that the named file or directory is absent. If it exists, it will\nbe deleted. This will work to reverse any of the functions in the file\nstate module. If a directory is supplied, it will be recursively deleted.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The path which should be deleted"
      }
    ]
  },
  {
    "functionId": "salt.states.file.accumulated",
    "description": "Prepare accumulator which can be used in template in file.managed state.\nAccumulator dictionary becomes available in template. It can also be used\nin file.blockreplace.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Accumulator name"
      },
      {
        "name": "filename",
        "defaultValue": null,
        "isRequired": true,
        "description": "Filename which would receive this accumulator (see file.managed state\ndocumentation about name)"
      },
      {
        "name": "text",
        "defaultValue": null,
        "isRequired": true,
        "description": "String or list for adding in accumulator"
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.file.append",
    "description": "Ensure that some text appears at the end of a file.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The location of the file to append to."
      },
      {
        "name": "text",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The text to be appended, which can be a single string or a list\nof strings."
      },
      {
        "name": "makedirs",
        "defaultValue": "False",
        "isRequired": false,
        "description": "If the file is located in a path without a parent directory,\nthen the state will fail. If makedirs is set to True, then\nthe parent directories will be created to facilitate the\ncreation of the named file. Defaults to False."
      },
      {
        "name": "source",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A single source file to append. This source file can be hosted on either the salt master server, or on an HTTP or FTP server. Both HTTPS and HTTP are supported as well as downloading directly from Amazon S3 compatible URLs with both pre-configured and automatic IAM credentials (see s3.get state documentation). File retrieval from Openstack Swift object storage is supported via swift://container/object_path URLs (see swift.get documentation).\n\nFor files hosted on the salt file server, if the file is located on the master in the directory named spam, and is called eggs, the source string is salt://spam/eggs.\n\nIf the file is hosted on an HTTP or FTP server, the source_hash argument is also required.\n"
      },
      {
        "name": "source_hash",
        "defaultValue": "None",
        "isRequired": false,
        "description": "\nThis can be one of the following:\n\n\n1.  a source hash string\n2.  the URI of a file that contains source hash strings\n\n\n\n\nThe function accepts the first encountered long unbroken alphanumeric string of correct length as a valid hash, in order from most secure to least secure:\n\n\n\nType    Length\n======  ======\nsha512     128\nsha384      96\nsha256      64\nsha224      56\nsha1        40\nmd5         32\n\n\n\n\n\nSee the source_hash parameter description for [file.managed](#salt.states.file.managed \"salt.states.file.managed\") function for more details and examples.\n"
      },
      {
        "name": "template",
        "defaultValue": "'jinja'",
        "isRequired": false,
        "description": "The named templating engine will be used to render the appended-to file. Defaults to jinja. The following templates are supported:\n\n*   [cheetah](../../renderers/all/salt.renderers.cheetah.html#module-salt.renderers.cheetah \"salt.renderers.cheetah\")\n*   [genshi](../../renderers/all/salt.renderers.genshi.html#module-salt.renderers.genshi \"salt.renderers.genshi\")\n*   [jinja](../../renderers/all/salt.renderers.jinja.html#module-salt.renderers.jinja \"salt.renderers.jinja\")\n*   [mako](../../renderers/all/salt.renderers.mako.html#module-salt.renderers.mako \"salt.renderers.mako\")\n*   [py](../../renderers/all/salt.renderers.py.html#module-salt.renderers.py \"salt.renderers.py\")\n*   [wempy](../../renderers/all/salt.renderers.wempy.html#module-salt.renderers.wempy \"salt.renderers.wempy\")\n"
      },
      {
        "name": "sources",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A list of source files to append. If the files are hosted on an HTTP or\nFTP server, the source_hashes argument is also required."
      },
      {
        "name": "source_hashes",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A list of source_hashes corresponding to the sources list specified in\nthe sources argument."
      },
      {
        "name": "defaults",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Default context passed to the template."
      },
      {
        "name": "context",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Overrides default context variables passed to the template."
      },
      {
        "name": "ignore_whitespace",
        "defaultValue": "True",
        "isRequired": false,
        "description": "\n\n\nNew in version 2015.8.4.\n\n\n\n\nSpaces and Tabs in text are ignored by default, when searching for the appending content, one space or multiple tabs are the same for salt. Set this option to False if you want to change this behavior.\n"
      }
    ]
  },
  {
    "functionId": "salt.states.file.blockreplace",
    "description": "Maintain an edit in a file in a zone delimited by two line markers",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Filesystem path to the file to be edited"
      },
      {
        "name": "marker_start",
        "defaultValue": "'#-- start managed zone --'",
        "isRequired": false,
        "description": "The line content identifying a line as the start of the content block.\nNote that the whole line containing this marker will be considered, so\nwhitespace or extra content before or after the marker is included in\nfinal output"
      },
      {
        "name": "marker_end",
        "defaultValue": "'#-- end managed zone --'",
        "isRequired": false,
        "description": "The line content identifying a line as the end of the content block.\nNote that the whole line containing this marker will be considered, so\nwhitespace or extra content before or after the marker is included in\nfinal output. Note: you can use file.accumulated and target this state.\nAll accumulated data dictionaries content will be added as new lines in\nthe content"
      },
      {
        "name": "source",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The source file to download to the minion, this source file can be hosted on either the salt master server, or on an HTTP or FTP server. Both HTTPS and HTTP are supported as well as downloading directly from Amazon S3 compatible URLs with both pre-configured and automatic IAM credentials. (see s3.get state documentation) File retrieval from Openstack Swift object storage is supported via swift://container/object_path URLs, see swift.get documentation. For files hosted on the salt file server, if the file is located on the master in the directory named spam, and is called eggs, the source string is salt://spam/eggs. If source is left blank or None (use ~ in YAML), the file will be created as an empty file and the content will not be managed. This is also the case when a file already exists and the source is undefined; the contents of the file will not be changed or managed.\n\nIf the file is hosted on a HTTP or FTP server then the source_hash argument is also required.\n\nA list of sources can also be passed in to provide a default source and a set of fallbacks. The first source in the list that is found to exist will be used and subsequent entries in the list will be ignored.\n\n\n\nfile_override_example:\n  file.blockreplace:\n    - name: /etc/example.conf\n    - source:\n      - salt://file_that_does_not_exist\n      - salt://file_that_exists\n\n\n\n"
      },
      {
        "name": "source_hash",
        "defaultValue": "None",
        "isRequired": false,
        "description": "\nThis can be one of the following:\n\n\n1.  a source hash string\n2.  the URI of a file that contains source hash strings\n\n\n\n\nThe function accepts the first encountered long unbroken alphanumeric string of correct length as a valid hash, in order from most secure to least secure:\n\n\n\nType    Length\n======  ======\nsha512     128\nsha384      96\nsha256      64\nsha224      56\nsha1        40\nmd5         32\n\n\n\n\n\nSee the source_hash parameter description for [file.managed](#salt.states.file.managed \"salt.states.file.managed\") function for more details and examples.\n"
      },
      {
        "name": "template",
        "defaultValue": "'jinja'",
        "isRequired": false,
        "description": "The named templating engine will be used to render the downloaded file. Defaults to jinja. The following templates are supported:\n\n*   [cheetah](../../renderers/all/salt.renderers.cheetah.html#module-salt.renderers.cheetah \"salt.renderers.cheetah\")\n*   [genshi](../../renderers/all/salt.renderers.genshi.html#module-salt.renderers.genshi \"salt.renderers.genshi\")\n*   [jinja](../../renderers/all/salt.renderers.jinja.html#module-salt.renderers.jinja \"salt.renderers.jinja\")\n*   [mako](../../renderers/all/salt.renderers.mako.html#module-salt.renderers.mako \"salt.renderers.mako\")\n*   [py](../../renderers/all/salt.renderers.py.html#module-salt.renderers.py \"salt.renderers.py\")\n*   [wempy](../../renderers/all/salt.renderers.wempy.html#module-salt.renderers.wempy \"salt.renderers.wempy\")\n"
      },
      {
        "name": "sources",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "source_hashes",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "defaults",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Default context passed to the template."
      },
      {
        "name": "context",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Overrides default context variables passed to the template."
      },
      {
        "name": "content",
        "defaultValue": "''",
        "isRequired": false,
        "description": "The content to be used between the two lines identified by\nmarker_start and marker_end"
      },
      {
        "name": "append_if_not_found",
        "defaultValue": "False",
        "isRequired": false,
        "description": "If markers are not found and set to True then the markers and content\nwill be appended to the file. Default is False"
      },
      {
        "name": "prepend_if_not_found",
        "defaultValue": "False",
        "isRequired": false,
        "description": "If markers are not found and set to True then the markers and content\nwill be prepended to the file. Default is False"
      },
      {
        "name": "backup",
        "defaultValue": "'.bak'",
        "isRequired": false,
        "description": "The file extension to use for a backup of the file if any edit is made.\nSet this to False to skip making a backup."
      },
      {
        "name": "show_changes",
        "defaultValue": "True",
        "isRequired": false,
        "description": "Output a unified diff of the old file and the new file. If False\nreturn a boolean if any changes were made"
      }
    ]
  },
  {
    "functionId": "salt.states.file.comment",
    "description": "Comment out specified lines in a file.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The full path to the file to be edited"
      },
      {
        "name": "regex",
        "defaultValue": null,
        "isRequired": true,
        "description": "A regular expression used to find the lines that are to be commented;\nthis pattern will be wrapped in parenthesis and will move any\npreceding/trailing ^ or $ characters outside the parenthesis\n(e.g., the pattern ^foo$ will be rewritten as ^(foo)$)\nNote that you _need_ the leading ^, otherwise each time you run\nhighstate, another comment char will be inserted."
      },
      {
        "name": "char",
        "defaultValue": "'#'",
        "isRequired": false,
        "description": "The character to be inserted at the beginning of a line in order to\ncomment it out"
      },
      {
        "name": "backup",
        "defaultValue": "'.bak'",
        "isRequired": false,
        "description": "The file will be backed up before edit with this file extension\n\n\n\n\nWarning\n\nThis backup will be overwritten each time sed / comment / uncomment is called. Meaning the backup will only be useful after the first invocation.\n\n\n\n\nSet to False/None to not keep a backup.\n"
      }
    ]
  },
  {
    "functionId": "salt.states.file.copy",
    "description": "If the source file exists on the system, copy it to the named file. The\nnamed file will not be overwritten if it already exists unless the force\noption is set to True.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The location of the file to copy to"
      },
      {
        "name": "source",
        "defaultValue": null,
        "isRequired": true,
        "description": "The location of the file to copy to the location specified with name"
      },
      {
        "name": "force",
        "defaultValue": "False",
        "isRequired": false,
        "description": "If the target location is present then the file will not be moved,\nspecify \"force: True\" to overwrite the target file"
      },
      {
        "name": "makedirs",
        "defaultValue": "False",
        "isRequired": false,
        "description": "If the target subdirectories don't exist create them"
      },
      {
        "name": "preserve",
        "defaultValue": "False",
        "isRequired": false,
        "description": "\n\n\nNew in version 2015.5.0.\n\n\n\n\nSet preserve: True to preserve user/group ownership and mode after copying. Default is False. If preserve is set to True, then user/group/mode attributes will be ignored.\n"
      },
      {
        "name": "user",
        "defaultValue": "None",
        "isRequired": false,
        "description": "\n\n\nNew in version 2015.5.0.\n\n\n\n\nThe user to own the copied file, this defaults to the user salt is running as on the minion. If preserve is set to True, then this will be ignored\n"
      },
      {
        "name": "group",
        "defaultValue": "None",
        "isRequired": false,
        "description": "\n\n\nNew in version 2015.5.0.\n\n\n\n\nThe group to own the copied file, this defaults to the group salt is running as on the minion. If preserve is set to True or on Windows this will be ignored\n"
      },
      {
        "name": "mode",
        "defaultValue": "None",
        "isRequired": false,
        "description": "\n\n\nNew in version 2015.5.0.\n\n\n\n\nThe permissions to set on the copied file, aka 644, '0775', '4664'. If preserve is set to True, then this will be ignored. Not supported on Windows.\n\nThe default mode for new files and directories corresponds umask of salt process. For existing files and directories it's not enforced.\n"
      },
      {
        "name": "subdir",
        "defaultValue": "False",
        "isRequired": false,
        "description": "\n\n\nNew in version 2015.5.0.\n\n\n\n\nIf the name is a directory then place the file inside the named directory\n"
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.file.decode",
    "description": "Decode an encoded file and write it to disk",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Path of the file to be written."
      },
      {
        "name": "encoded_data",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The encoded file. Either this option or contents_pillar must be\nspecified."
      },
      {
        "name": "contents_pillar",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A Pillar path to the encoded file. Uses the same path syntax as\n[pillar.get](../../modules/all/salt.modules.pillar.html#salt.modules.pillar.get \"salt.modules.pillar.get\"). The\n[hashutil.base64_encodefile](../../modules/all/salt.modules.hashutil.html#salt.modules.hashutil.base64_encodefile \"salt.modules.hashutil.base64_encodefile\") function can load encoded\ncontent into Pillar. Either this option or encoded_data must be\nspecified."
      },
      {
        "name": "encoding_type",
        "defaultValue": "'base64'",
        "isRequired": false,
        "description": "The type of encoding."
      },
      {
        "name": "checksum",
        "defaultValue": "'md5'",
        "isRequired": false,
        "description": "The hashing algorithm to use to generate checksums. Wraps the\n[hashutil.digest](../../modules/all/salt.modules.hashutil.html#salt.modules.hashutil.digest \"salt.modules.hashutil.digest\") execution\nfunction."
      }
    ]
  },
  {
    "functionId": "salt.states.file.directory",
    "description": "Ensure that a named directory is present and has the right perms",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The location to create or manage a directory"
      },
      {
        "name": "user",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The user to own the directory; this defaults to the user salt is\nrunning as on the minion"
      },
      {
        "name": "group",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The group ownership set for the directory; this defaults to the group\nsalt is running as on the minion. On Windows, this is ignored"
      },
      {
        "name": "recurse",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Enforce user/group ownership and mode of directory recursively. Accepts a list of strings representing what you would like to recurse. If mode is defined, will recurse on both file_mode and dir_mode if they are defined. If ignore_files or ignore_dirs is included, files or directories will be left unchanged respectively. Example:\n\n\n\n/var/log/httpd:\n  file.directory:\n    - user: root\n    - group: root\n    - dir_mode: 755\n    - file_mode: 644\n    - recurse:\n      - user\n      - group\n      - mode\n\n\n\n\n\nLeave files or directories unchanged:\n\n\n\n/var/log/httpd:\n  file.directory:\n    - user: root\n    - group: root\n    - dir_mode: 755\n    - file_mode: 644\n    - recurse:\n      - user\n      - group\n      - mode\n      - ignore_dirs\n\n\n\n\n\n\nNew in version 2015.5.0.\n\n\n"
      },
      {
        "name": "max_depth",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Limit the recursion depth. The default is no limit=None. 'max_depth' and 'clean' are mutually exclusive.\n\n\n\n\nNew in version 2016.11.0.\n\n\n"
      },
      {
        "name": "dir_mode",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "file_mode",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The permissions mode to set any files created if 'mode' is run in 'recurse'. This defaults to dir_mode. Not supported on Windows.\n\nThe default mode for new files and directories corresponds umask of salt process. For existing files and directories it's not enforced.\n"
      },
      {
        "name": "makedirs",
        "defaultValue": "False",
        "isRequired": false,
        "description": "If the directory is located in a path without a parent directory, then\nthe state will fail. If makedirs is set to True, then the parent\ndirectories will be created to facilitate the creation of the named\nfile."
      },
      {
        "name": "clean",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Make sure that only files that are set up by salt and required by this\nfunction are kept. If this option is set then everything in this\ndirectory will be deleted unless it is required.\n'clean' and 'max_depth' are mutually exclusive."
      },
      {
        "name": "require",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Require other resources such as packages or files"
      },
      {
        "name": "exclude_pat",
        "defaultValue": "None",
        "isRequired": false,
        "description": "When 'clean' is set to True, exclude this pattern from removal list\nand preserve in the destination."
      },
      {
        "name": "follow_symlinks",
        "defaultValue": "False",
        "isRequired": false,
        "description": "If the desired path is a symlink (or recurse is defined and a symlink is encountered while recursing), follow it and check the permissions of the directory/file to which the symlink points.\n\n\n\n\nNew in version 2014.1.4.\n\n\n"
      },
      {
        "name": "force",
        "defaultValue": "False",
        "isRequired": false,
        "description": "If the name of the directory exists and is not a directory and force is set to False, the state will fail. If force is set to True, the file in the way of the directory will be deleted to make room for the directory, unless backupname is set, then it will be renamed.\n\n\n\n\nNew in version 2014.7.0.\n\n\n"
      },
      {
        "name": "backupname",
        "defaultValue": "None",
        "isRequired": false,
        "description": "If the name of the directory exists and is not a directory, it will be renamed to the backupname. If the backupname already exists and force is False, the state will fail. Otherwise, the backupname will be removed first.\n\n\n\n\nNew in version 2014.7.0.\n\n\n"
      },
      {
        "name": "allow_symlink",
        "defaultValue": "True",
        "isRequired": false,
        "description": "If allow_symlink is True and the specified path is a symlink, it will be allowed to remain if it points to a directory. If allow_symlink is False then the state will fail, unless force is also set to True, in which case it will be removed or renamed, depending on the value of the backupname argument.\n\n\n\n\nNew in version 2014.7.0.\n\n\n"
      },
      {
        "name": "children_only",
        "defaultValue": "False",
        "isRequired": false,
        "description": "If children_only is True the base of a path is excluded when performing\na recursive operation. In case of /path/to/base, base will be ignored\nwhile all of /path/to/base/* are still operated on."
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.file.exists",
    "description": "Verify that the named file or directory is present or exists.\nEnsures pre-requisites outside of Salt's purview\n(e.g., keytabs, private keys, etc.) have been previously satisfied before\ndeployment.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Absolute path which must exist"
      }
    ]
  },
  {
    "functionId": "salt.states.file.line",
    "description": "Line-based editing of a file.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Filesystem path to the file to be edited."
      },
      {
        "name": "content",
        "defaultValue": null,
        "isRequired": true,
        "description": "Content of the line."
      },
      {
        "name": "match",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Match the target line for an action by a fragment of a string or regular expression.\n\nIf neither before nor after are provided, and match is also None, match becomes the content value.\n"
      },
      {
        "name": "mode",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Defines how to edit a line. One of the following options is required:\n\n*   \nensure\n\n\nIf line does not exist, it will be added.\n\n\n\n\n*   \nreplace\n\n\nIf line already exists, it will be replaced.\n\n\n\n\n*   \ndelete\n\n\nDelete the line, once found.\n\n\n\n\n*   \ninsert\n\n\nInsert a line.\n\n\n\n\n\n\n\nNote\n\nIf mode=insert is used, at least one of the following options must also be defined: location, before, or after. If location is used, it takes precedence over the other two options.\n\n\n"
      },
      {
        "name": "location",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Defines where to place content in the line. Note this option is only used when mode=insert is specified. If a location is passed in, it takes precedence over both the before and after kwargs. Valid locations are:\n\n*   \nstart\n\n\nPlace the content at the beginning of the file.\n\n\n\n\n*   \nend\n\n\nPlace the content at the end of the file.\n\n\n\n\n"
      },
      {
        "name": "before",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Regular expression or an exact case-sensitive fragment of the string.\nThis option is only used when either the ensure or insert mode\nis defined."
      },
      {
        "name": "after",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Regular expression or an exact case-sensitive fragment of the string.\nThis option is only used when either the ensure or insert mode\nis defined."
      },
      {
        "name": "show_changes",
        "defaultValue": "True",
        "isRequired": false,
        "description": "Output a unified diff of the old file and the new file. If False return a boolean if any changes were made. Default is True\n\n\n\n\nNote\n\nUsing this option will store two copies of the file in-memory (the original version and the edited version) in order to generate the diff.\n\n\n"
      },
      {
        "name": "backup",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Create a backup of the original file with the extension:\n\"Year-Month-Day-Hour-Minutes-Seconds\"."
      },
      {
        "name": "quiet",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Do not raise any exceptions. E.g. ignore the fact that the file that is\ntried to be edited does not exist and nothing really happened."
      },
      {
        "name": "indent",
        "defaultValue": "True",
        "isRequired": false,
        "description": "Keep indentation with the previous line. This option is not considered when\nthe delete mode is specified."
      },
      {
        "name": "create",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "user",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "group",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "file_mode",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.file.managed",
    "description": "Manage a given file, this function allows for a file to be downloaded from\nthe salt master and potentially run through a templating system.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The location of the file to manage"
      },
      {
        "name": "source",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The source file to download to the minion, this source file can be hosted on either the salt master server (salt://), the salt minion local file system (/), or on an HTTP or FTP server (http(s)://, ftp://).\n\nBoth HTTPS and HTTP are supported as well as downloading directly from Amazon S3 compatible URLs with both pre-configured and automatic IAM credentials. (see s3.get state documentation) File retrieval from Openstack Swift object storage is supported via swift://container/object_path URLs, see swift.get documentation. For files hosted on the salt file server, if the file is located on the master in the directory named spam, and is called eggs, the source string is salt://spam/eggs. If source is left blank or None (use ~ in YAML), the file will be created as an empty file and the content will not be managed. This is also the case when a file already exists and the source is undefined; the contents of the file will not be changed or managed.\n\nIf the file is hosted on a HTTP or FTP server then the source_hash argument is also required.\n\nA list of sources can also be passed in to provide a default source and a set of fallbacks. The first source in the list that is found to exist will be used and subsequent entries in the list will be ignored. Source list functionality only supports local files and remote files hosted on the salt master server or retrievable via HTTP, HTTPS, or FTP.\n\n\n\nfile_override_example:\n  file.managed:\n    - source:\n      - salt://file_that_does_not_exist\n      - salt://file_that_exists\n\n\n\n"
      },
      {
        "name": "source_hash",
        "defaultValue": "''",
        "isRequired": false,
        "description": "\nThis can be one of the following:\n\n\n1.  a source hash string\n2.  the URI of a file that contains source hash strings\n\n\n\n\nThe function accepts the first encountered long unbroken alphanumeric string of correct length as a valid hash, in order from most secure to least secure:\n\n\n\nType    Length\n======  ======\nsha512     128\nsha384      96\nsha256      64\nsha224      56\nsha1        40\nmd5         32\n\n\n\n\n**Using a Source Hash File**\n\n\nThe file can contain several checksums for several files. Each line must contain both the file name and the hash. If no file name is matched, the first hash encountered will be used, otherwise the most secure hash with the correct source file name will be used.\n\nWhen using a source hash file the source_hash argument needs to be a url, the standard download urls are supported, ftp, http, salt etc:\n\nExample:\n\n\n\ntomdroid-src-0.7.3.tar.gz:\n  file.managed:\n    - name: /tmp/tomdroid-src-0.7.3.tar.gz\n    - source: https://launchpad.net/tomdroid/beta/0.7.3/+download/tomdroid-src-0.7.3.tar.gz\n    - source_hash: https://launchpad.net/tomdroid/beta/0.7.3/+download/tomdroid-src-0.7.3.hash\n\n\n\n\n\nThe following lines are all supported formats:\n\n\n\n/etc/rc.conf ef6e82e4006dee563d98ada2a2a80a27\nsha254c8525aee419eb649f0233be91c151178b30f0dff8ebbdcc8de71b1d5c8bcc06a  /etc/resolv.conf\nead48423703509d37c4a90e6a0d53e143b6fc268\n\n\n\n\n\nDebian file type *.dsc files are also supported.\n\n\n\n\n\n**Inserting the Source Hash in the SLS Data**\n\nThe source_hash can be specified as a simple checksum, like so:\n\n\n\ntomdroid-src-0.7.3.tar.gz:\n  file.managed:\n    - name: /tmp/tomdroid-src-0.7.3.tar.gz\n    - source: https://launchpad.net/tomdroid/beta/0.7.3/+download/tomdroid-src-0.7.3.tar.gz\n    - source_hash: 79eef25f9b0b2c642c62b7f737d4f53f\n\n\n\n\n\n\nNote\n\nReleases prior to 2016.11.0 must also include the hash type, like in the below example:\n\n\n\ntomdroid-src-0.7.3.tar.gz:\n  file.managed:\n    - name: /tmp/tomdroid-src-0.7.3.tar.gz\n    - source: https://launchpad.net/tomdroid/beta/0.7.3/+download/tomdroid-src-0.7.3.tar.gz\n    - source_hash: md5=79eef25f9b0b2c642c62b7f737d4f53f\n\n\n\n\n\nKnown issues:\n\n\nIf the remote server URL has the hash file as an apparent sub-directory of the source file, the module will discover that it has already cached a directory where a file should be cached. For example:\n\n\n\ntomdroid-src-0.7.3.tar.gz:\n  file.managed:\n    - name: /tmp/tomdroid-src-0.7.3.tar.gz\n    - source: https://launchpad.net/tomdroid/beta/0.7.3/+download/tomdroid-src-0.7.3.tar.gz\n    - source_hash: https://launchpad.net/tomdroid/beta/0.7.3/+download/tomdroid-src-0.7.3.tar.gz/+md5\n\n\n\n\n\n"
      },
      {
        "name": "source_hash_name",
        "defaultValue": "None",
        "isRequired": false,
        "description": "When source_hash refers to a hash file, Salt will try to find the correct hash by matching the filename/URI associated with that hash. By default, Salt will look for the filename being managed. When managing a file at path /tmp/foo.txt, then the following line in a hash file would match:\n\n\n\nacbd18db4cc2f85cedef654fccc4a4d8    foo.txt\n\n\n\n\n\nHowever, sometimes a hash file will include multiple similar paths:\n\n\n\n37b51d194a7513e45b56f6524f2d51f2    ./dir1/foo.txt\nacbd18db4cc2f85cedef654fccc4a4d8    ./dir2/foo.txt\n73feffa4b7f6bb68e44cf984c85f6e88    ./dir3/foo.txt\n\n\n\n\n\nIn cases like this, Salt may match the incorrect hash. This argument can be used to tell Salt which filename to match, to ensure that the correct hash is identified. For example:\n\n\n\n/tmp/foo.txt:\n  file.managed:\n    - source: https://mydomain.tld/dir2/foo.txt\n    - source_hash: https://mydomain.tld/hashes\n    - source_hash_name: ./dir2/foo.txt\n\n\n\n\n\n\nNote\n\nThis argument must contain the full filename entry from the checksum file, as this argument is meant to disambiguate matches for multiple files that have the same basename. So, in the example above, simply using foo.txt would not match.\n\n\n\n\n\nNew in version 2016.3.5.\n\n\n"
      },
      {
        "name": "user",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The user to own the file, this defaults to the user salt is running as\non the minion"
      },
      {
        "name": "group",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The group ownership set for the file, this defaults to the group salt\nis running as on the minion On Windows, this is ignored"
      },
      {
        "name": "mode",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The permissions to set on this file, e.g. 644, 0775, or 4664.\n\nThe default mode for new files and directories corresponds umask of salt process. For existing files and directories it's not enforced.\n\n\n\n\nNote\n\nThis option is **not** supported on Windows.\n\n\n\n\n\nChanged in version 2016.11.0: This option can be set to keep, and Salt will keep the mode from the Salt fileserver. This is only supported when the source URL begins with salt://, or for files local to the minion. Because the source option cannot be used with any of the contents options, setting the mode to keep is also incompatible with the contents options.\n\n\n\n\n\nNote\n\nkeep does not work with salt-ssh.\n\nAs a consequence of how the files are transfered to the minion, and the inability to connect back to the master with salt-ssh, salt is unable to stat the file as it exists on the fileserver and thus cannot mirror the mode on the salt-ssh minion\n\n\n"
      },
      {
        "name": "template",
        "defaultValue": "None",
        "isRequired": false,
        "description": "If this setting is applied, the named templating engine will be used to render the downloaded file. The following templates are supported:\n\n*   [cheetah](../../renderers/all/salt.renderers.cheetah.html#module-salt.renderers.cheetah \"salt.renderers.cheetah\")\n*   [genshi](../../renderers/all/salt.renderers.genshi.html#module-salt.renderers.genshi \"salt.renderers.genshi\")\n*   [jinja](../../renderers/all/salt.renderers.jinja.html#module-salt.renderers.jinja \"salt.renderers.jinja\")\n*   [mako](../../renderers/all/salt.renderers.mako.html#module-salt.renderers.mako \"salt.renderers.mako\")\n*   [py](../../renderers/all/salt.renderers.py.html#module-salt.renderers.py \"salt.renderers.py\")\n*   [wempy](../../renderers/all/salt.renderers.wempy.html#module-salt.renderers.wempy \"salt.renderers.wempy\")\n"
      },
      {
        "name": "makedirs",
        "defaultValue": "False",
        "isRequired": false,
        "description": "If set to True, then the parent directories will be created to\nfacilitate the creation of the named file. If False, and the parent\ndirectory of the destination file doesn't exist, the state will fail."
      },
      {
        "name": "dir_mode",
        "defaultValue": "None",
        "isRequired": false,
        "description": "If directories are to be created, passing this option specifies the permissions for those directories. If this is not set, directories will be assigned permissions by adding the execute bit to the mode of the files.\n\nThe default mode for new files and directories corresponds umask of salt process. For existing files and directories it's not enforced.\n"
      },
      {
        "name": "context",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Overrides default context variables passed to the template."
      },
      {
        "name": "replace",
        "defaultValue": "True",
        "isRequired": false,
        "description": "If set to False and the file already exists, the file will not be\nmodified even if changes would otherwise be made. Permissions and\nownership will still be enforced, however."
      },
      {
        "name": "defaults",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Default context passed to the template."
      },
      {
        "name": "backup",
        "defaultValue": "''",
        "isRequired": false,
        "description": "Overrides the default backup mode for this specific file. See\n[backup_mode documentation](../backup_mode.html#file-state-backups) for more details."
      },
      {
        "name": "show_changes",
        "defaultValue": "True",
        "isRequired": false,
        "description": "Output a unified diff of the old file and the new file. If False\nreturn a boolean if any changes were made."
      },
      {
        "name": "create",
        "defaultValue": "True",
        "isRequired": false,
        "description": "If set to False, then the file will only be managed if the file\nalready exists on the system."
      },
      {
        "name": "contents",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Specify the contents of the file. Cannot be used in combination with source. Ignores hashes and does not use a templating engine.\n\nThis value can be either a single string, a multiline YAML string or a list of strings. If a list of strings, then the strings will be joined together with newlines in the resulting file. For example, the below two example states would result in identical file contents:\n\n\n\n/path/to/file1:\n  file.managed:\n    - contents:\n      - This is line 1\n      - This is line 2\n\n/path/to/file2:\n  file.managed:\n    - contents: |\n        This is line 1\n        This is line 2\n\n\n\n"
      },
      {
        "name": "tmp_ext",
        "defaultValue": "''",
        "isRequired": false,
        "description": "Suffix for temp file created by check_cmd. Useful for checkers dependant on config file extension (e.g. the init-checkconf upstart config checker).\n\n\n\n/etc/init/test.conf:\n  file.managed:\n    - user: root\n    - group: root\n    - mode: 0440\n    - tmp_ext: '.conf'\n    - contents:\n      - 'description \"Salt Minion\"''\n      - 'start on started mountall'\n      - 'stop on shutdown'\n      - 'respawn'\n      - 'exec salt-minion'\n    - check_cmd: init-checkconf -f\n\n\n\n"
      },
      {
        "name": "contents_pillar",
        "defaultValue": "None",
        "isRequired": false,
        "description": "\n\n\nNew in version 0.17.0.\n\n\n\n\nOperates like contents, but draws from a value stored in pillar, using the pillar path syntax used in [pillar.get](../../modules/all/salt.modules.pillar.html#salt.modules.pillar.get \"salt.modules.pillar.get\"). This is useful when the pillar value contains newlines, as referencing a pillar variable using a jinja/mako template can result in YAML formatting issues due to the newlines causing indentation mismatches.\n\nFor example, the following could be used to deploy an SSH private key:\n\n\n\n/home/deployer/.ssh/id_rsa:\n  file.managed:\n    - user: deployer\n    - group: deployer\n    - mode: 600\n    - contents_pillar: userdata:deployer:id_rsa\n\n\n\n\n\nThis would populate /home/deployer/.ssh/id_rsa with the contents of pillar['userdata']['deployer']['id_rsa']. An example of this pillar setup would be like so:\n\n\n\nuserdata:\n  deployer:\n    id_rsa: |\n        -----BEGIN RSA PRIVATE KEY-----\n        MIIEowIBAAKCAQEAoQiwO3JhBquPAalQF9qP1lLZNXVjYMIswrMe2HcWUVBgh+vY\n        U7sCwx/dH6+VvNwmCoqmNnP+8gTPKGl1vgAObJAnMT623dMXjVKwnEagZPRJIxDy\n        B/HaAre9euNiY3LvIzBTWRSeMfT+rWvIKVBpvwlgGrfgz70m0pqxu+UyFbAGLin+\n        GpxzZAMaFpZw4sSbIlRuissXZj/sHpQb8p9M5IeO4Z3rjkCP1cxI\n        -----END RSA PRIVATE KEY-----\n\n\n\n\n\n\nNote\n\nThe private key above is shortened to keep the example brief, but shows how to do multiline string in YAML. The key is followed by a pipe character, and the mutliline string is indented two more spaces.\n\nTo avoid the hassle of creating an indented multiline YAML string, the [file_tree external pillar](../../pillar/all/salt.pillar.file_tree.html#module-salt.pillar.file_tree \"salt.pillar.file_tree\") can be used instead. However, this will not work for binary files in Salt releases before 2015.8.4.\n\n\n"
      },
      {
        "name": "contents_grains",
        "defaultValue": "None",
        "isRequired": false,
        "description": "\n\n\nNew in version 2014.7.0.\n\n\n\n\nOperates like contents, but draws from a value stored in grains, using the grains path syntax used in [grains.get](../../modules/all/salt.modules.grains.html#salt.modules.grains.get \"salt.modules.grains.get\"). This functionality works similarly to contents_pillar, but with grains.\n\nFor example, the following could be used to deploy a \"message of the day\" file:\n\n\n\nwrite_motd:\n  file.managed:\n    - name: /etc/motd\n    - contents_grains: motd\n\n\n\n\n\nThis would populate /etc/motd file with the contents of the motd grain. The motd grain is not a default grain, and would need to be set prior to running the state:\n\n\n\nsalt '*' grains.set motd 'Welcome! This system is managed by Salt.'\n\n\n\n"
      },
      {
        "name": "contents_newline",
        "defaultValue": "True",
        "isRequired": false,
        "description": "\n\n\nNew in version 2014.7.0.\n\n\n\n\n\nChanged in version 2015.8.4: This option is now ignored if the contents being deployed contain binary data.\n\n\n\n\nIf True, files managed using contents, contents_pillar, or contents_grains will have a newline added to the end of the file if one is not present. Setting this option to False will omit this final newline.\n"
      },
      {
        "name": "contents_delimiter",
        "defaultValue": "':'",
        "isRequired": false,
        "description": "\n\n\nNew in version 2015.8.4.\n\n\n\n\nCan be used to specify an alternate delimiter for contents_pillar or contents_grains. This delimiter will be passed through to [pillar.get](../../modules/all/salt.modules.pillar.html#salt.modules.pillar.get \"salt.modules.pillar.get\") or [grains.get](../../modules/all/salt.modules.grains.html#salt.modules.grains.get \"salt.modules.grains.get\") when retrieving the contents.\n"
      },
      {
        "name": "allow_empty",
        "defaultValue": "True",
        "isRequired": false,
        "description": "\n\n\nNew in version 2015.8.4.\n\n\n\n\nIf set to False, then the state will fail if the contents specified by contents_pillar or contents_grains are empty.\n"
      },
      {
        "name": "follow_symlinks",
        "defaultValue": "True",
        "isRequired": false,
        "description": "\n\n\nNew in version 2014.7.0.\n\n\n\n\nIf the desired path is a symlink follow it and make changes to the file to which the symlink points.\n"
      },
      {
        "name": "check_cmd",
        "defaultValue": "None",
        "isRequired": false,
        "description": "\n\n\nNew in version 2014.7.0.\n\n\n\n\nThe specified command will be run with an appended argument of a *temporary* file containing the new managed contents. If the command exits with a zero status the new managed contents will be written to the managed destination. If the command exits with a nonzero exit code, the state will fail and no changes will be made to the file.\n\nFor example, the following could be used to verify sudoers before making changes:\n\n\n\n/etc/sudoers:\n  file.managed:\n    - user: root\n    - group: root\n    - mode: 0440\n    - source: salt://sudoers/files/sudoers.jinja\n    - template: jinja\n    - check_cmd: /usr/sbin/visudo -c -f\n\n\n\n\n\n**NOTE**: This check_cmd functions differently than the requisite check_cmd.\n"
      },
      {
        "name": "skip_verify",
        "defaultValue": "False",
        "isRequired": false,
        "description": "If True, hash verification of remote file sources (http://, https://, ftp://) will be skipped, and the source_hash argument will be ignored.\n\n\n\n\nNew in version 2016.3.0.\n\n\n"
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.file.missing",
    "description": "Verify that the named file or directory is missing, this returns True only\nif the named file is missing but does not remove the file if it is present.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Absolute path which must NOT exist"
      }
    ]
  },
  {
    "functionId": "salt.states.file.mknod",
    "description": "Create a special file similar to the 'nix mknod command. The supported\ndevice types are p (fifo pipe), c (character device), and b\n(block device). Provide the major and minor numbers when specifying a\ncharacter device or block device. A fifo pipe does not require this\ninformation. The command will create the necessary dirs if needed. If a\nfile of the same name not of the same type/major/minor exists, it will not\nbe overwritten or unlinked (deleted). This is logically in place as a\nsafety measure because you can really shoot yourself in the foot here and\nit is the behavior of 'nix mknod. It is also important to note that not\njust anyone can create special devices. Usually this is only done as root.\nIf the state is executed as none other than root on a minion, you may\nreceive a permission error.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "name of the file"
      },
      {
        "name": "ntype",
        "defaultValue": null,
        "isRequired": true,
        "description": "node type 'p' (fifo pipe), 'c' (character device), or 'b'\n(block device)"
      },
      {
        "name": "major",
        "defaultValue": "0",
        "isRequired": false,
        "description": "major number of the device\ndoes not apply to a fifo pipe"
      },
      {
        "name": "minor",
        "defaultValue": "0",
        "isRequired": false,
        "description": "minor number of the device\ndoes not apply to a fifo pipe"
      },
      {
        "name": "user",
        "defaultValue": "None",
        "isRequired": false,
        "description": "owning user of the device/pipe"
      },
      {
        "name": "group",
        "defaultValue": "None",
        "isRequired": false,
        "description": "owning group of the device/pipe"
      },
      {
        "name": "mode",
        "defaultValue": "'0600'",
        "isRequired": false,
        "description": "permissions on the device/pipe"
      }
    ]
  },
  {
    "functionId": "salt.states.file.mod_run_check_cmd",
    "description": "Execute the check_cmd logic.",
    "arguments": [
      {
        "name": "cmd",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "filename",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "**check_cmd_opts",
        "defaultValue": "**check_cmd_opts",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.file.patch",
    "description": "Apply a patch to a file or directory.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The file or directory to which the patch will be applied."
      },
      {
        "name": "source",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The source patch to download to the minion, this source file must be\nhosted on the salt master server. If the file is located in the\ndirectory named spam, and is called eggs, the source string is\nsalt://spam/eggs. A source is required."
      },
      {
        "name": "options",
        "defaultValue": "''",
        "isRequired": false,
        "description": "Extra options to pass to patch."
      },
      {
        "name": "dry_run_first",
        "defaultValue": "True",
        "isRequired": false,
        "description": "Run patch with --dry-run first to check if it will apply cleanly."
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.file.prepend",
    "description": "Ensure that some text appears at the beginning of a file",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "text",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "makedirs",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "source",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "source_hash",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "template",
        "defaultValue": "'jinja'",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "sources",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "source_hashes",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "defaults",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "context",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "header",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.file.recurse",
    "description": "Recurse through a subdirectory on the master and copy said subdirectory\nover to the specified path.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The directory to set the recursion in"
      },
      {
        "name": "source",
        "defaultValue": null,
        "isRequired": true,
        "description": "The source directory, this directory is located on the salt master file\nserver and is specified with the salt:// protocol. If the directory is\nlocated on the master in the directory named spam, and is called eggs,\nthe source string is salt://spam/eggs"
      },
      {
        "name": "clean",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Make sure that only files that are set up by salt and required by this\nfunction are kept. If this option is set then everything in this\ndirectory will be deleted unless it is required."
      },
      {
        "name": "require",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Require other resources such as packages or files"
      },
      {
        "name": "user",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The user to own the directory. This defaults to the user salt is\nrunning as on the minion"
      },
      {
        "name": "group",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The group ownership set for the directory. This defaults to the group\nsalt is running as on the minion. On Windows, this is ignored"
      },
      {
        "name": "dir_mode",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The permissions mode to set on any directories created.\n\nThe default mode for new files and directories corresponds umask of salt process. For existing files and directories it's not enforced.\n\n\n\n\nNote\n\nThis option is **not** supported on Windows.\n\n\n"
      },
      {
        "name": "file_mode",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The permissions mode to set on any files created.\n\nThe default mode for new files and directories corresponds umask of salt process. For existing files and directories it's not enforced.\n\n\n\n\nNote\n\nThis option is **not** supported on Windows.\n\n\n\n\n\nChanged in version 2016.11.0: This option can be set to keep, and Salt will keep the mode from the Salt fileserver. This is only supported when the source URL begins with salt://, or for files local to the minion. Because the source option cannot be used with any of the contents options, setting the mode to keep is also incompatible with the contents options.\n\n\n"
      },
      {
        "name": "sym_mode",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The permissions mode to set on any symlink created.\n\nThe default mode for new files and directories corresponds umask of salt process. For existing files and directories it's not enforced.\n\n\n\n\nNote\n\nThis option is **not** supported on Windows.\n\n\n"
      },
      {
        "name": "template",
        "defaultValue": "None",
        "isRequired": false,
        "description": "If this setting is applied, the named templating engine will be used to render the downloaded file. The following templates are supported:\n\n*   [cheetah](../../renderers/all/salt.renderers.cheetah.html#module-salt.renderers.cheetah \"salt.renderers.cheetah\")\n*   [genshi](../../renderers/all/salt.renderers.genshi.html#module-salt.renderers.genshi \"salt.renderers.genshi\")\n*   [jinja](../../renderers/all/salt.renderers.jinja.html#module-salt.renderers.jinja \"salt.renderers.jinja\")\n*   [mako](../../renderers/all/salt.renderers.mako.html#module-salt.renderers.mako \"salt.renderers.mako\")\n*   [py](../../renderers/all/salt.renderers.py.html#module-salt.renderers.py \"salt.renderers.py\")\n*   [wempy](../../renderers/all/salt.renderers.wempy.html#module-salt.renderers.wempy \"salt.renderers.wempy\")\n\n\n\nNote\n\nThe template option is required when recursively applying templates.\n\n\n"
      },
      {
        "name": "context",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Overrides default context variables passed to the template."
      },
      {
        "name": "defaults",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Default context passed to the template."
      },
      {
        "name": "include_empty",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Set this to True if empty directories should also be created\n(default is False)"
      },
      {
        "name": "backup",
        "defaultValue": "''",
        "isRequired": false,
        "description": "Overrides the default backup mode for all replaced files. See\n[backup_mode documentation](../backup_mode.html#file-state-backups) for more details."
      },
      {
        "name": "include_pat",
        "defaultValue": "None",
        "isRequired": false,
        "description": "When copying, include only this pattern from the source. Default is glob match; if prefixed with 'E@', then regexp match. Example:\n\n\n\n- include_pat: hello*       :: glob matches 'hello01', 'hello02'\n                               ... but not 'otherhello'\n- include_pat: E@hello      :: regexp matches 'otherhello',\n                               'hello01' ...\n\n\n\n"
      },
      {
        "name": "exclude_pat",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Exclude this pattern from the source when copying. If both include_pat and exclude_pat are supplied, then it will apply conditions cumulatively. i.e. first select based on include_pat, and then within that result apply exclude_pat.\n\nAlso, when 'clean=True', exclude this pattern from the removal list and preserve in the destination. Example:\n\n\n\n- exclude_pat: APPDATA*               :: glob matches APPDATA.01,\n                                         APPDATA.02,.. for exclusion\n- exclude_pat: E@(APPDATA)|(TEMPDATA) :: regexp matches APPDATA\n                                         or TEMPDATA for exclusion\n\n\n\n"
      },
      {
        "name": "maxdepth",
        "defaultValue": "None",
        "isRequired": false,
        "description": "When copying, only copy paths which are of depth maxdepth from the source path. Example:\n\n\n\n- maxdepth: 0      :: Only include files located in the source\n                      directory\n- maxdepth: 1      :: Only include files located in the source\n                      or immediate subdirectories\n\n\n\n"
      },
      {
        "name": "keep_symlinks",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Keep symlinks when copying from the source. This option will cause\nthe copy operation to terminate at the symlink. If desire behavior\nsimilar to rsync, then set this to True."
      },
      {
        "name": "force_symlinks",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Force symlink creation. This option will force the symlink creation.\nIf a file or directory is obstructing symlink creation it will be\nrecursively removed so that symlink creation can proceed. This\noption is usually not needed except in special circumstances."
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.file.rename",
    "description": "If the source file exists on the system, rename it to the named file. The\nnamed file will not be overwritten if it already exists unless the force\noption is set to True.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The location of the file to rename to"
      },
      {
        "name": "source",
        "defaultValue": null,
        "isRequired": true,
        "description": "The location of the file to move to the location specified with name"
      },
      {
        "name": "force",
        "defaultValue": "False",
        "isRequired": false,
        "description": "If the target location is present then the file will not be moved,\nspecify \"force: True\" to overwrite the target file"
      },
      {
        "name": "makedirs",
        "defaultValue": "False",
        "isRequired": false,
        "description": "If the target subdirectories don't exist create them"
      }
    ]
  },
  {
    "functionId": "salt.states.file.replace",
    "description": "Maintain an edit in a file.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Filesystem path to the file to be edited. If a symlink is specified, it\nwill be resolved to its target."
      },
      {
        "name": "pattern",
        "defaultValue": null,
        "isRequired": true,
        "description": "A regular expression, to be matched using Python's\n[search()](https://docs.python.org/3/library/re.html#re.search \"(in Python v3.6)\")."
      },
      {
        "name": "repl",
        "defaultValue": null,
        "isRequired": true,
        "description": "The replacement text"
      },
      {
        "name": "count",
        "defaultValue": "0",
        "isRequired": false,
        "description": "Maximum number of pattern occurrences to be replaced.  Defaults to 0.\nIf count is a positive integer n, no more than n occurrences will be\nreplaced, otherwise all occurrences will be replaced."
      },
      {
        "name": "flags",
        "defaultValue": "8",
        "isRequired": false,
        "description": "A list of flags defined in the [re module documentation](https://docs.python.org/3/library/re.html#contents-of-module-re \"(in Python v3.6)\"). Each list item should be a string that will correlate to the human-friendly flag name. E.g., ['IGNORECASE', 'MULTILINE']. Optionally, flags may be an int, with a value corresponding to the XOR (|) of all the desired flags. Defaults to 8 (which equates to ['MULTILINE']).\n\n\n\n\nNote\n\nfile.replace reads the entire file as a string to support multiline regex patterns. Therefore, when using anchors such as ^ or $ in the pattern, those anchors may be relative to the line OR relative to the file. The default for file.replace is to treat anchors as relative to the line, which is implemented by setting the default value of flags to ['MULTILINE']. When overriding the default value for flags, if 'MULTILINE' is not present then anchors will be relative to the file. If the desired behavior is for anchors to be relative to the line, then simply add 'MULTILINE' to the list of flags.\n\n\n"
      },
      {
        "name": "bufsize",
        "defaultValue": "1",
        "isRequired": false,
        "description": "How much of the file to buffer into memory at once. The default value\n1 processes one line at a time. The special value file may be\nspecified which will read the entire file into memory before\nprocessing."
      },
      {
        "name": "append_if_not_found",
        "defaultValue": "False",
        "isRequired": false,
        "description": "If set to True, and pattern is not found, then the content will be appended to the file.\n\n\n\n\nNew in version 2014.7.0.\n\n\n"
      },
      {
        "name": "prepend_if_not_found",
        "defaultValue": "False",
        "isRequired": false,
        "description": "If set to True and pattern is not found, then the content will be prepended to the file.\n\n\n\n\nNew in version 2014.7.0.\n\n\n"
      },
      {
        "name": "not_found_content",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Content to use for append/prepend if not found. If None (default), uses repl. Useful when repl uses references to group in pattern.\n\n\n\n\nNew in version 2014.7.0.\n\n\n"
      },
      {
        "name": "backup",
        "defaultValue": "'.bak'",
        "isRequired": false,
        "description": "The file extension to use for a backup of the file before editing. Set\nto False to skip making a backup."
      },
      {
        "name": "show_changes",
        "defaultValue": "True",
        "isRequired": false,
        "description": "Output a unified diff of the old file and the new file. If False\nreturn a boolean if any changes were made. Returns a boolean or a\nstring."
      },
      {
        "name": "ignore_if_missing",
        "defaultValue": "False",
        "isRequired": false,
        "description": "\n\n\nNew in version 2016.3.4.\n\n\n\n\nControls what to do if the file is missing. If set to False, the state will display an error raised by the execution module. If set to True, the state will simply report no changes.\n"
      }
    ]
  },
  {
    "functionId": "salt.states.file.retention_schedule",
    "description": "Apply retention scheduling to backup storage directory.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "retain",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "strptime_format",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "timezone",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.file.serialize",
    "description": "Serializes dataset and store it into managed file. Useful for sharing\nsimple configuration files.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The location of the file to create"
      },
      {
        "name": "dataset",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The dataset that will be serialized"
      },
      {
        "name": "dataset_pillar",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Operates like dataset, but draws from a value stored in pillar, using the pillar path syntax used in [pillar.get](../../modules/all/salt.modules.pillar.html#salt.modules.pillar.get \"salt.modules.pillar.get\"). This is useful when the pillar value contains newlines, as referencing a pillar variable using a jinja/mako template can result in YAML formatting issues due to the newlines causing indentation mismatches.\n\n\n\n\nNew in version 2015.8.0.\n\n\n"
      },
      {
        "name": "user",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The user to own the directory, this defaults to the user salt is\nrunning as on the minion"
      },
      {
        "name": "group",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The group ownership set for the directory, this defaults to the group\nsalt is running as on the minion"
      },
      {
        "name": "mode",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The permissions to set on this file, e.g. 644, 0775, or 4664.\n\nThe default mode for new files and directories corresponds umask of salt process. For existing files and directories it's not enforced.\n\n\n\n\nNote\n\nThis option is **not** supported on Windows.\n\n\n"
      },
      {
        "name": "backup",
        "defaultValue": "''",
        "isRequired": false,
        "description": "Overrides the default backup mode for this specific file."
      },
      {
        "name": "makedirs",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Create parent directories for destination file.\n\n\n\n\nNew in version 2014.1.3.\n\n\n"
      },
      {
        "name": "show_diff",
        "defaultValue": "None",
        "isRequired": false,
        "description": "DEPRECATED: Please use show_changes.\n\nIf set to False, the diff will not be shown in the return data if changes are made.\n"
      },
      {
        "name": "show_changes",
        "defaultValue": "True",
        "isRequired": false,
        "description": "Output a unified diff of the old file and the new file. If False\nreturn a boolean if any changes were made."
      },
      {
        "name": "create",
        "defaultValue": "True",
        "isRequired": false,
        "description": "Default is True, if create is set to False then the file will only be\nmanaged if the file already exists on the system."
      },
      {
        "name": "merge_if_exists",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Default is False, if merge_if_exists is True then the existing file will be parsed and the dataset passed in will be merged with the existing content\n\n\n\n\nNew in version 2014.7.0.\n\n\n"
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.file.symlink",
    "description": "Create a symbolic link (symlink, soft link)",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The location of the symlink to create"
      },
      {
        "name": "target",
        "defaultValue": null,
        "isRequired": true,
        "description": "The location that the symlink points to"
      },
      {
        "name": "force",
        "defaultValue": "False",
        "isRequired": false,
        "description": "If the name of the symlink exists and is not a symlink and\nforce is set to False, the state will fail. If force is set to\nTrue, the file or directory in the way of the symlink file\nwill be deleted to make room for the symlink, unless\nbackupname is set, when it will be renamed"
      },
      {
        "name": "backupname",
        "defaultValue": "None",
        "isRequired": false,
        "description": "If the name of the symlink exists and is not a symlink, it will be\nrenamed to the backupname. If the backupname already\nexists and force is False, the state will fail. Otherwise, the\nbackupname will be removed first."
      },
      {
        "name": "makedirs",
        "defaultValue": "False",
        "isRequired": false,
        "description": "If the location of the symlink does not already have a parent directory\nthen the state will fail, setting makedirs to True will allow Salt to\ncreate the parent directory"
      },
      {
        "name": "user",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The user to own the file, this defaults to the user salt is running as\non the minion"
      },
      {
        "name": "group",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The group ownership set for the file, this defaults to the group salt\nis running as on the minion. On Windows, this is ignored"
      },
      {
        "name": "mode",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The permissions to set on this file, aka 644, 0775, 4664. Not supported on Windows.\n\nThe default mode for new files and directories corresponds umask of salt process. For existing files and directories it's not enforced.\n"
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.file.touch",
    "description": "Replicate the 'nix \"touch\" command to create a new empty\nfile or update the atime and mtime of an existing file.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "name of the file"
      },
      {
        "name": "atime",
        "defaultValue": "None",
        "isRequired": false,
        "description": "atime of the file"
      },
      {
        "name": "mtime",
        "defaultValue": "None",
        "isRequired": false,
        "description": "mtime of the file"
      },
      {
        "name": "makedirs",
        "defaultValue": "False",
        "isRequired": false,
        "description": "whether we should create the parent directory/directories in order to\ntouch the file"
      }
    ]
  },
  {
    "functionId": "salt.states.file.uncomment",
    "description": "Uncomment specified commented lines in a file",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The full path to the file to be edited"
      },
      {
        "name": "regex",
        "defaultValue": null,
        "isRequired": true,
        "description": "A regular expression used to find the lines that are to be uncommented.\nThis regex should not include the comment character. A leading ^\ncharacter will be stripped for convenience (for easily switching\nbetween comment() and uncomment()).  The regex will be searched for\nfrom the beginning of the line, ignoring leading spaces (we prepend\n'^[ t]*')"
      },
      {
        "name": "char",
        "defaultValue": "'#'",
        "isRequired": false,
        "description": "The character to remove in order to uncomment a line"
      },
      {
        "name": "backup",
        "defaultValue": "'.bak'",
        "isRequired": false,
        "description": "The file will be backed up before edit with this file extension;\n\n\n\n\nWarning\n\nThis backup will be overwritten each time sed / comment / uncomment is called. Meaning the backup will only be useful after the first invocation.\n\n\n\n\nSet to False/None to not keep a backup.\n"
      }
    ]
  },
  {
    "functionId": "salt.states.firewall.check",
    "description": "Checks if there is an open connection from the minion to the defined\nhost on a specific port.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "host name or ip address to test connection to"
      },
      {
        "name": "port",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The port to test the connection on"
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "\nAdditional parameters, parameters allowed are:\nproto (tcp or udp)\nfamily (ipv4 or ipv6)\ntimeout\n\n"
      }
    ]
  },
  {
    "functionId": "salt.states.firewalld.present",
    "description": "Ensure a zone has specific attributes.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "block_icmp",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "default",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "masquerade",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "ports",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "port_fwd",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "services",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "prune_services",
        "defaultValue": "True",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "interfaces",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "sources",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "rich_rules",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.firewalld.service",
    "description": "Ensure the service exists and encompasses the specified ports and\nprotocols.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "ports",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "protocols",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.gem.installed",
    "description": "Make sure that a gem is installed.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the gem to install"
      },
      {
        "name": "ruby",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "gem_bin",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "user",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "version",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Specify the version to install for the gem.\nDoesn't play nice with multiple gems at once"
      },
      {
        "name": "rdoc",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Generate RDoc documentation for the gem(s)."
      },
      {
        "name": "ri",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Generate RI documentation for the gem(s)."
      },
      {
        "name": "pre_releases",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Install pre-release version of gem(s) if available."
      },
      {
        "name": "proxy",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Use the specified HTTP proxy server for all outgoing traffic.\nFormat: [http://hostname[:port](http://hostname[:port)]"
      },
      {
        "name": "source",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Use the specified HTTP gem source server to download gem.\nFormat: [http://hostname[:port](http://hostname[:port)]"
      }
    ]
  },
  {
    "functionId": "salt.states.gem.removed",
    "description": "Make sure that a gem is not installed.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the gem to uninstall"
      },
      {
        "name": "ruby",
        "defaultValue": "None",
        "isRequired": false,
        "description": "If RVM or rbenv are installed, the ruby version and gemset to use.\nIgnored if gem_bin is specified."
      },
      {
        "name": "user",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "gem_bin",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Full path to gem binary to use."
      }
    ]
  },
  {
    "functionId": "salt.states.gem.sources_add",
    "description": "Make sure that a gem source is added.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The URL of the gem source to be added"
      },
      {
        "name": "ruby",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "user",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.gem.sources_remove",
    "description": "Make sure that a gem source is removed.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The URL of the gem source to be removed"
      },
      {
        "name": "ruby",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "user",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.git.config_set",
    "description": "Ensure that a config value is set to the desired value(s)",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Name of the git config value to set"
      },
      {
        "name": "value",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Set a single value for the config item"
      },
      {
        "name": "multivar",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Set multiple values for the config item\n\n\n\n\nNote\n\nThe order matters here, if the same parameters are set but in a different order, they will be removed and replaced in the order specified.\n\n\n\n\n\nNew in version 2015.8.0.\n\n\n"
      },
      {
        "name": "repo",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Location of the git repository for which the config value should be\nset. Required unless global is set to True."
      },
      {
        "name": "user",
        "defaultValue": "None",
        "isRequired": false,
        "description": "User under which to run git commands. By default, the commands are run\nby the user under which the minion is running."
      },
      {
        "name": "password",
        "defaultValue": "None",
        "isRequired": false,
        "description": "> Windows only. Required when specifying user. This parameter will be\nignored on non-Windows platforms.\n\n\n\n\n\nNew in version 2016.3.4.\n\n\n"
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.git.config_unset",
    "description": "Ensure that the named config key is not present",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the configuration key to unset. This value can be a regex,\nbut the regex must match the entire key name. For example, foo\\.\nwould not match all keys in the foo section, it would be necessary\nto use foo\\..+ to do so."
      },
      {
        "name": "value_regex",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Regex indicating the values to unset for the matching key(s)\n\n\n\n\nNote\n\nThis option behaves differently depending on whether or not all is set to True. If it is, then all values matching the regex will be deleted (this is the only way to delete multiple values from a multivar). If all is set to False, then this state will fail if the regex matches more than one value in a multivar.\n\n\n"
      },
      {
        "name": "repo",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Location of the git repository for which the config value should be\nset. Required unless global is set to True."
      },
      {
        "name": "user",
        "defaultValue": "None",
        "isRequired": false,
        "description": "User under which to run git commands. By default, commands are run by\nthe user under which the minion is running."
      },
      {
        "name": "password",
        "defaultValue": "None",
        "isRequired": false,
        "description": "> Windows only. Required when specifying user. This parameter will be\nignored on non-Windows platforms.\n\n\n\n\n\nNew in version 2016.3.4.\n\n\n"
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.git.detached",
    "description": "Make sure a repository is cloned to the given target directory and is\na detached HEAD checkout of the commit ID resolved from ref.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Address of the remote repository."
      },
      {
        "name": "ref",
        "defaultValue": null,
        "isRequired": true,
        "description": "The branch, tag, or commit ID to checkout after clone.\nIf a branch or tag is specified it will be resolved to a commit ID\nand checked out."
      },
      {
        "name": "target",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Name of the target directory where repository is about to be cloned."
      },
      {
        "name": "remote",
        "defaultValue": "'origin'",
        "isRequired": false,
        "description": "Git remote to use. If this state needs to clone the repo, it will clone\nit using this value as the initial remote name. If the repository\nalready exists, and a remote by this name is not present, one will be\nadded."
      },
      {
        "name": "user",
        "defaultValue": "None",
        "isRequired": false,
        "description": "User under which to run git commands. By default, commands are run by\nthe user under which the minion is running."
      },
      {
        "name": "password",
        "defaultValue": "None",
        "isRequired": false,
        "description": "> Windows only. Required when specifying user. This parameter will be\nignored on non-Windows platforms.\n\n\n\n\n\nNew in version 2016.3.4.\n\n\n"
      },
      {
        "name": "force_clone",
        "defaultValue": "False",
        "isRequired": false,
        "description": "If the target directory exists and is not a git repository, then\nthis state will fail. Set this argument to True to remove the\ncontents of the target directory and clone the repo into it."
      },
      {
        "name": "force_checkout",
        "defaultValue": "False",
        "isRequired": false,
        "description": "When checking out the revision ID, the state will fail if there are\nunwritten changes. Set this argument to True to discard unwritten\nchanges when checking out."
      },
      {
        "name": "fetch_remote",
        "defaultValue": "True",
        "isRequired": false,
        "description": "If False a fetch will not be performed and only local refs\nwill be reachable."
      },
      {
        "name": "hard_reset",
        "defaultValue": "False",
        "isRequired": false,
        "description": "If True a hard reset will be performed before the checkout and any uncommitted modifications to the working directory will be discarded. Untracked files will remain in place.\n\n\n\n\nNote\n\nChanges resulting from a hard reset will not trigger requisites.\n\n\n"
      },
      {
        "name": "submodules",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Update submodules"
      },
      {
        "name": "identity",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A path on the minion (or a SaltStack fileserver URL, e.g.\nsalt://path/to/identity_file) to a private key to use for SSH\nauthentication."
      },
      {
        "name": "https_user",
        "defaultValue": "None",
        "isRequired": false,
        "description": "HTTP Basic Auth username for HTTPS (only) clones"
      },
      {
        "name": "https_pass",
        "defaultValue": "None",
        "isRequired": false,
        "description": "HTTP Basic Auth password for HTTPS (only) clones"
      },
      {
        "name": "onlyif",
        "defaultValue": "False",
        "isRequired": false,
        "description": "A command to run as a check, run the named command only if the command\npassed to the onlyif option returns true"
      },
      {
        "name": "unless",
        "defaultValue": "False",
        "isRequired": false,
        "description": "A command to run as a check, only run the named command if the command\npassed to the unless option returns false"
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.git.latest",
    "description": "Make sure the repository is cloned to the given directory and is\nup-to-date.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Address of the remote repository, as passed to git clone\n\n\n\n\nNote\n\nFrom the [Git documentation](https://git-scm.com/book/en/v2/Git-on-the-Server-The-Protocols#The-SSH-Protocol), there are two URL formats supported for SSH authentication. The below two examples are equivalent:\n\n\n\n# ssh:// URL\nssh://user@server/project.git\n\n# SCP-like syntax\nuser@server:project.git\n\n\n\n\n\nA common mistake is to use an ssh:// URL, but with a colon after the domain instead of a slash. This is invalid syntax in Git, and will therefore not work in Salt. When in doubt, confirm that a git clone works for the URL before using it in Salt.\n\nIt has been reported by some users that SCP-like syntax is incompatible with git repos hosted on [Atlassian Stash/BitBucket Server](https://www.atlassian.com/software/bitbucket/server). In these cases, it may be necessary to use ssh:// URLs for SSH authentication.\n\n\n"
      },
      {
        "name": "rev",
        "defaultValue": "'HEAD'",
        "isRequired": false,
        "description": "The remote branch, tag, or revision ID to checkout after clone / before update. If specified, then Salt will also ensure that the tracking branch is set to /, unless rev refers to a tag or SHA1, in which case Salt will ensure that the tracking branch is unset.\n\nIf rev is not specified, it will be assumed to be HEAD, and Salt will not manage the tracking branch at all.\n\n\n\n\nChanged in version 2015.8.0: If not specified, rev now defaults to the remote repository's HEAD.\n\n\n"
      },
      {
        "name": "target",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Name of the target directory where repository is about to be cloned"
      },
      {
        "name": "branch",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Name of the local branch into which to checkout the specified rev. If not specified, then Salt will not care what branch is being used locally and will just use whatever branch is currently there.\n\n\n\n\nNew in version 2015.8.0.\n\n\n\n\n\nNote\n\nIf this argument is not specified, this means that Salt will not change the local branch if the repository is reset to another branch/tag/SHA1. For example, assume that the following state was run initially:\n\n\n\nfoo_app:\n  git.latest:\n    - name: https://mydomain.tld/apps/foo.git\n    - target: /var/www/foo\n    - user: www\n\n\n\n\n\nThis would have cloned the HEAD of that repo (since a rev wasn't specified), and because branch is not specified, the branch in the local clone at /var/www/foo would be whatever the default branch is on the remote repository (usually master, but not always). Now, assume that it becomes necessary to switch this checkout to the dev branch. This would require rev to be set, and probably would also require force_reset to be enabled:\n\n\n\nfoo_app:\n  git.latest:\n    - name: https://mydomain.tld/apps/foo.git\n    - target: /var/www/foo\n    - user: www\n    - rev: dev\n    - force_reset: True\n\n\n\n\n\nThe result of this state would be to perform a hard-reset to origin/dev. Since branch was not specified though, while /var/www/foo would reflect the contents of the remote repo's dev branch, the local branch would still remain whatever it was when it was cloned. To make the local branch match the remote one, set branch as well, like so:\n\n\n\nfoo_app:\n  git.latest:\n    - name: https://mydomain.tld/apps/foo.git\n    - target: /var/www/foo\n    - user: www\n    - rev: dev\n    - branch: dev\n    - force_reset: True\n\n\n\n\n\nThis may seem redundant, but Salt tries to support a wide variety of use cases, and doing it this way allows for the use case where the local branch doesn't need to be strictly managed.\n\n\n"
      },
      {
        "name": "user",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Local system user under which to run git commands. By default, commands are run by the user under which the minion is running.\n\n\n\n\nNote\n\nThis is not to be confused with the username for http(s)/SSH authentication.\n\n\n\n\n\nNew in version 0.17.0.\n\n\n"
      },
      {
        "name": "password",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Windows only. Required when specifying user. This parameter will be ignored on non-Windows platforms.\n\n\n\n\nNew in version 2016.3.4.\n\n\n"
      },
      {
        "name": "update_head",
        "defaultValue": "True",
        "isRequired": false,
        "description": "If set to False, then the remote repository will be fetched (if necessary) to ensure that the commit to which rev points exists in the local checkout, but no changes will be made to the local HEAD.\n\n\n\n\nNew in version 2015.8.3.\n\n\n"
      },
      {
        "name": "force_checkout",
        "defaultValue": "False",
        "isRequired": false,
        "description": "When checking out the local branch, the state will fail if there are\nunwritten changes. Set this argument to True to discard unwritten\nchanges when checking out."
      },
      {
        "name": "force_clone",
        "defaultValue": "False",
        "isRequired": false,
        "description": "If the target directory exists and is not a git repository, then\nthis state will fail. Set this argument to True to remove the\ncontents of the target directory and clone the repo into it."
      },
      {
        "name": "force_fetch",
        "defaultValue": "False",
        "isRequired": false,
        "description": "If a fetch needs to be performed, non-fast-forward fetches will cause this state to fail. Set this argument to True to force the fetch even if it is a non-fast-forward update.\n\n\n\n\nNew in version 2015.8.0.\n\n\n"
      },
      {
        "name": "force_reset",
        "defaultValue": "False",
        "isRequired": false,
        "description": "If the update is not a fast-forward, this state will fail. Set this\nargument to True to force a hard-reset to the remote revision in\nthese cases."
      },
      {
        "name": "submodules",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Update submodules on clone or branch change"
      },
      {
        "name": "bare",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Set to True if the repository is to be a bare clone of the remote\nrepository."
      },
      {
        "name": "mirror",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Set to True if the repository is to be a mirror of the remote\nrepository. This implies that bare set to True, and thus is\nincompatible with rev."
      },
      {
        "name": "remote",
        "defaultValue": "'origin'",
        "isRequired": false,
        "description": "Git remote to use. If this state needs to clone the repo, it will clone\nit using this value as the initial remote name. If the repository\nalready exists, and a remote by this name is not present, one will be\nadded."
      },
      {
        "name": "fetch_tags",
        "defaultValue": "True",
        "isRequired": false,
        "description": "If True, then when a fetch is performed all tags will be fetched,\neven those which are not reachable by any branch on the remote."
      },
      {
        "name": "depth",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Defines depth in history when git a clone is needed in order to ensure\nlatest. E.g. depth: 1 is useful when deploying from a repository\nwith a long history. Use rev to specify branch. This is not compatible\nwith tags or revision IDs."
      },
      {
        "name": "identity",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Path to a private key to use for ssh URLs. This can be either a single string, or a list of strings. For example:\n\n\n\n# Single key\ngit@github.com:user/repo.git:\n  git.latest:\n    - user: deployer\n    - identity: /home/deployer/.ssh/id_rsa\n\n# Two keys\ngit@github.com:user/repo.git:\n  git.latest:\n    - user: deployer\n    - identity:\n      - /home/deployer/.ssh/id_rsa\n      - /home/deployer/.ssh/id_rsa_alternate\n\n\n\n\n\nIf multiple keys are specified, they will be tried one-by-one in order for each git command which needs to authenticate.\n\n\n\n\nWarning\n\nUnless Salt is invoked from the minion using salt-call, the key(s) must be passphraseless. For greater security with passphraseless private keys, see the [sshd(8)](http://www.man7.org/linux/man-pages/man8/sshd.8.html#AUTHORIZED_KEYS_FILE%20FORMAT) manpage for information on securing the keypair from the remote side in the authorized_keys file.\n\n\n\n\n\nChanged in version 2015.8.7: Salt will no longer attempt to use passphrase-protected keys unless invoked from the minion using salt-call, to prevent blocking waiting for user input.\n\n\n\n\n\nChanged in version 2016.3.0: Key can now be specified as a SaltStack fileserver URL (e.g. salt://path/to/identity_file).\n\n\n"
      },
      {
        "name": "https_user",
        "defaultValue": "None",
        "isRequired": false,
        "description": "HTTP Basic Auth username for HTTPS (only) clones\n\n\n\n\nNew in version 2015.5.0.\n\n\n"
      },
      {
        "name": "https_pass",
        "defaultValue": "None",
        "isRequired": false,
        "description": "HTTP Basic Auth password for HTTPS (only) clones\n\n\n\n\nNew in version 2015.5.0.\n\n\n"
      },
      {
        "name": "onlyif",
        "defaultValue": "False",
        "isRequired": false,
        "description": "A command to run as a check, run the named command only if the command\npassed to the onlyif option returns true"
      },
      {
        "name": "unless",
        "defaultValue": "False",
        "isRequired": false,
        "description": "A command to run as a check, only run the named command if the command\npassed to the unless option returns false"
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.git.mod_run_check",
    "description": "Execute the onlyif and unless logic. Return a result dict if:",
    "arguments": [
      {
        "name": "cmd_kwargs",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "onlyif",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "unless",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.git.present",
    "description": "Ensure that a repository exists in the given directory",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Path to the directory\n\n\n\n\nChanged in version 2015.8.0: This path must now be absolute\n\n\n"
      },
      {
        "name": "force",
        "defaultValue": "False",
        "isRequired": false,
        "description": "If True, and if name points to an existing directory which does\nnot contain a git repository, then the contents of that directory will\nbe recursively removed and a new repository will be initialized in its\nplace."
      },
      {
        "name": "bare",
        "defaultValue": "True",
        "isRequired": false,
        "description": "If True, and a repository must be initialized, then the repository will be a bare repository.\n\n\n\n\nNote\n\nThis differs from the default behavior of [git.init](../../modules/all/salt.modules.git.html#salt.modules.git.init \"salt.modules.git.init\"), make sure to set this value to False if a bare repo is not desired.\n\n\n"
      },
      {
        "name": "template",
        "defaultValue": "None",
        "isRequired": false,
        "description": "If a new repository is initialized, this argument will specify an alternate [`template directory`_](#id1)\n\n\n\n\nNew in version 2015.8.0.\n\n\n"
      },
      {
        "name": "separate_git_dir",
        "defaultValue": "None",
        "isRequired": false,
        "description": "If a new repository is initialized, this argument will specify an alternate $GIT_DIR\n\n\n\n\nNew in version 2015.8.0.\n\n\n"
      },
      {
        "name": "shared",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Set sharing permissions on git repo. See [git-init(1)](http://git-scm.com/docs/git-init) for more details.\n\n\n\n\nNew in version 2015.5.0.\n\n\n"
      },
      {
        "name": "user",
        "defaultValue": "None",
        "isRequired": false,
        "description": "User under which to run git commands. By default, commands are run by the user under which the minion is running.\n\n\n\n\nNew in version 0.17.0.\n\n\n"
      },
      {
        "name": "password",
        "defaultValue": "None",
        "isRequired": false,
        "description": "> Windows only. Required when specifying user. This parameter will be\nignored on non-Windows platforms.\n\n\n\n\n\nNew in version 2016.3.4.\n\n\n"
      }
    ]
  },
  {
    "functionId": "salt.states.github.absent",
    "description": "Ensure a github user is absent",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Github handle of the user in organization"
      },
      {
        "name": "profile",
        "defaultValue": "'github'",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.github.present",
    "description": "Ensure a user is present",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "This is the github handle of the user in the organization"
      },
      {
        "name": "profile",
        "defaultValue": "'github'",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.github.repo_absent",
    "description": "Ensure a repo is absent.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "This is the name of the repository in the organization."
      },
      {
        "name": "profile",
        "defaultValue": "'github'",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.github.repo_present",
    "description": "Ensure a repository is present",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "This is the name of the repository."
      },
      {
        "name": "description",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The description of the repository."
      },
      {
        "name": "homepage",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The URL with more information about the repository."
      },
      {
        "name": "private",
        "defaultValue": "False",
        "isRequired": false,
        "description": "The visiblity of the repository. Note that private repositories require\na paid GitHub account."
      },
      {
        "name": "has_issues",
        "defaultValue": "True",
        "isRequired": false,
        "description": "Whether to enable issues for this repository."
      },
      {
        "name": "has_wiki",
        "defaultValue": "True",
        "isRequired": false,
        "description": "Whether to enable the wiki for this repository."
      },
      {
        "name": "has_downloads",
        "defaultValue": "True",
        "isRequired": false,
        "description": "Whether to enable downloads for this repository."
      },
      {
        "name": "auto_init",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Whether to create an initial commit with an empty README."
      },
      {
        "name": "gitignore_template",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The desired language or platform for a .gitignore, e.g \"Haskell\"."
      },
      {
        "name": "license_template",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The desired LICENSE template to apply, e.g \"mit\" or \"mozilla\"."
      },
      {
        "name": "profile",
        "defaultValue": "'github'",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.github.team_absent",
    "description": "Ensure a team is absent.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "This is the name of the team in the organization."
      },
      {
        "name": "profile",
        "defaultValue": "'github'",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.github.team_present",
    "description": "Ensure a team is present",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "This is the name of the team in the organization."
      },
      {
        "name": "description",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The description of the team."
      },
      {
        "name": "repo_names",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The names of repositories to add the team to."
      },
      {
        "name": "privacy",
        "defaultValue": "'secret'",
        "isRequired": false,
        "description": "The level of privacy for the team, can be 'secret' or 'closed'. Defaults\nto secret."
      },
      {
        "name": "permission",
        "defaultValue": "'pull'",
        "isRequired": false,
        "description": "The default permission for new repositories added to the team, can be\n'pull', 'push' or 'admin'. Defaults to pull."
      },
      {
        "name": "members",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The members belonging to the team, specified as a dict of member name to\noptional configuration. Options include 'enforce_mfa_from' and 'mfa_exempt'."
      },
      {
        "name": "enforce_mfa",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Whether to enforce MFA requirements on members of the team. If True then\nall members without mfa_exempt: True configured will be removed from\nthe team. Note that no_mfa_grace_seconds may be set to allow members\na grace period."
      },
      {
        "name": "no_mfa_grace_seconds",
        "defaultValue": "0",
        "isRequired": false,
        "description": "The number of seconds of grace time that a member will have to enable MFA\nbefore being removed from the team. The grace period will begin from\nenforce_mfa_from on the member configuration, which defaults to\n1970/01/01."
      },
      {
        "name": "profile",
        "defaultValue": "'github'",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.glance.image_present",
    "description": "Checks if given image is present with properties\nset as specified.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "visibility",
        "defaultValue": "'public'",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "protected",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "checksum",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "location",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "wait_for",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "timeout",
        "defaultValue": "30",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.glusterfs.add_volume_bricks",
    "description": "Add brick(s) to an existing volume",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Volume name"
      },
      {
        "name": "bricks",
        "defaultValue": null,
        "isRequired": true,
        "description": "List of bricks to add to the volume"
      }
    ]
  },
  {
    "functionId": "salt.states.glusterfs.created",
    "description": "Deprecated version of more descriptively named volume_present",
    "arguments": [
      {
        "name": "*args",
        "defaultValue": "*args",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.glusterfs.peered",
    "description": "Check if node is peered.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The remote host with which to peer."
      }
    ]
  },
  {
    "functionId": "salt.states.glusterfs.started",
    "description": "Check if volume has been started",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "name of the volume"
      }
    ]
  },
  {
    "functionId": "salt.states.glusterfs.volume_present",
    "description": "Ensure that the volume exists",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "name of the volume"
      },
      {
        "name": "bricks",
        "defaultValue": null,
        "isRequired": true,
        "description": "list of brick paths"
      },
      {
        "name": "stripe",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "replica",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "device_vg",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "transport",
        "defaultValue": "'tcp'",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "start",
        "defaultValue": "False",
        "isRequired": false,
        "description": "ensure that the volume is also started"
      },
      {
        "name": "force",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.gnomedesktop.desktop_interface",
    "description": "desktop_interface: sets values in the org.gnome.desktop.interface schema",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "user",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "automatic_mnemonics",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "buttons_have_icons",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "can_change_accels",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "clock_format",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "clock_show_date",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "clock_show_seconds",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "cursor_blink",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "cursor_blink_time",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "cursor_blink_timeout",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "cursor_size",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "cursor_theme",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "document_font_name",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "enable_animations",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "font_name",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "gtk_color_palette",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "gtk_color_scheme",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "gtk_im_module",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "gtk_im_preedit_style",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "gtk_im_status_style",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "gtk_key_theme",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "gtk_theme",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "gtk_timeout_initial",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "gtk_timeout_repeat",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "icon_theme",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "menubar_accel",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "menubar_detachable",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "menus_have_icons",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "menus_have_tearoff",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "monospace_font_name",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "show_input_method_menu",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "show_unicode_menu",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "text_scaling_factor",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "toolbar_detachable",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "toolbar_icons_size",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "toolbar_style",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "toolkit_accessibility",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.gnomedesktop.desktop_lockdown",
    "description": "desktop_lockdown: sets values in the org.gnome.desktop.lockdown schema",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "user",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "disable_application_handlers",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "disable_command_line",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "disable_lock_screen",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "disable_log_out",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "disable_print_setup",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "disable_printing",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "disable_save_to_disk",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "disable_user_switching",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "user_administration_disabled",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.gnomedesktop.wm_preferences",
    "description": "wm_preferences: sets values in the org.gnome.desktop.wm.preferences schema",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "user",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "action_double_click_titlebar",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "action_middle_click_titlebar",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "action_right_click_titlebar",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "application_based",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "audible_bell",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "auto_raise",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "auto_raise_delay",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "button_layout",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "disable_workarounds",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "focus_mode",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "focus_new_windows",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "mouse_button_modifier",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "num_workspaces",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "raise_on_click",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "resize_with_right_button",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "theme",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "titlebar_font",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "titlebar_uses_system_font",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "visual_bell",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "visual_bell_type",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "workspace_names",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.gpg.absent",
    "description": "Ensure GPG public key is absent in keychain",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The unique name or keyid for the GPG public key."
      },
      {
        "name": "keys",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The keyId or keyIds to add to the GPG keychain."
      },
      {
        "name": "user",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Add GPG keys to the user's keychain"
      },
      {
        "name": "gnupghome",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Override GNUPG Home directory"
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.gpg.present",
    "description": "Ensure GPG public key is present in keychain",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The unique name or keyid for the GPG public key."
      },
      {
        "name": "keys",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The keyId or keyIds to add to the GPG keychain."
      },
      {
        "name": "user",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Add GPG keys to the user's keychain"
      },
      {
        "name": "keyserver",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The keyserver to retrieve the keys from."
      },
      {
        "name": "gnupghome",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Override GNUPG Home directory"
      },
      {
        "name": "trust",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Trust level for the key in the keychain,\nignored by default.  Valid trust levels:\nexpired, unknown, not_trusted, marginally,\nfully, ultimately"
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.grafana.dashboard_absent",
    "description": "Ensure the named grafana dashboard is deleted.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Name of the grafana dashboard."
      },
      {
        "name": "hosts",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "profile",
        "defaultValue": "'grafana'",
        "isRequired": false,
        "description": "A pillar key or dict that contains a list of hosts and an\nelasticsearch index to use."
      }
    ]
  },
  {
    "functionId": "salt.states.grafana.dashboard_present",
    "description": "Ensure the grafana dashboard exists and is managed.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Name of the grafana dashboard."
      },
      {
        "name": "dashboard",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A dict that defines a dashboard that should be managed."
      },
      {
        "name": "dashboard_from_pillar",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A pillar key that contains a grafana dashboard dict. Mutually exclusive\nwith dashboard."
      },
      {
        "name": "rows",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A list of grafana rows."
      },
      {
        "name": "rows_from_pillar",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A list of pillar keys that contain lists of grafana dashboard rows.\nRows defined in the pillars will be appended to the rows defined in the\nstate."
      },
      {
        "name": "profile",
        "defaultValue": "'grafana'",
        "isRequired": false,
        "description": "A pillar key or dict that contains a list of hosts and an\nelasticsearch index to use."
      }
    ]
  },
  {
    "functionId": "salt.states.grafana_dashboard.absent",
    "description": "Ensure the named grafana dashboard is absent.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Name of the grafana dashboard."
      },
      {
        "name": "profile",
        "defaultValue": "'grafana'",
        "isRequired": false,
        "description": "A pillar key or dict that contains grafana information"
      }
    ]
  },
  {
    "functionId": "salt.states.grafana_dashboard.present",
    "description": "Ensure the grafana dashboard exists and is managed.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Name of the grafana dashboard."
      },
      {
        "name": "base_dashboards_from_pillar",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A pillar key that contains a list of dashboards to inherit from"
      },
      {
        "name": "base_panels_from_pillar",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A pillar key that contains a list of panels to inherit from"
      },
      {
        "name": "base_rows_from_pillar",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A pillar key that contains a list of rows to inherit from"
      },
      {
        "name": "dashboard",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A dict that defines a dashboard that should be managed."
      },
      {
        "name": "profile",
        "defaultValue": "'grafana'",
        "isRequired": false,
        "description": "A pillar key or dict that contains grafana information"
      }
    ]
  },
  {
    "functionId": "salt.states.grafana_datasource.absent",
    "description": "Ensure that a data source is present.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Name of the data source to remove."
      },
      {
        "name": "profile",
        "defaultValue": "'grafana'",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.grafana_datasource.present",
    "description": "Ensure that a data source is present.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Name of the data source."
      },
      {
        "name": "type",
        "defaultValue": null,
        "isRequired": true,
        "description": "Which type of data source it is ('graphite', 'influxdb' etc.)."
      },
      {
        "name": "url",
        "defaultValue": null,
        "isRequired": true,
        "description": "The URL to the data source API."
      },
      {
        "name": "access",
        "defaultValue": "'proxy'",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "user",
        "defaultValue": "''",
        "isRequired": false,
        "description": "Optional - user to authenticate with the data source"
      },
      {
        "name": "password",
        "defaultValue": "''",
        "isRequired": false,
        "description": "Optional - password to authenticate with the data source"
      },
      {
        "name": "database",
        "defaultValue": "''",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "basic_auth",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Optional - set to True to use HTTP basic auth to authenticate with the\ndata source."
      },
      {
        "name": "basic_auth_user",
        "defaultValue": "''",
        "isRequired": false,
        "description": "Optional - HTTP basic auth username."
      },
      {
        "name": "basic_auth_password",
        "defaultValue": "''",
        "isRequired": false,
        "description": "Optional - HTTP basic auth password."
      },
      {
        "name": "is_default",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Default: False"
      },
      {
        "name": "json_data",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "profile",
        "defaultValue": "'grafana'",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.grains.absent",
    "description": "Delete a grain from the grains config file",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The grain name"
      },
      {
        "name": "destructive",
        "defaultValue": "False",
        "isRequired": false,
        "description": "If destructive is True, delete the entire grain. If\ndestructive is False, set the grain's value to None. Defaults to False."
      },
      {
        "name": "delimiter",
        "defaultValue": "':'",
        "isRequired": false,
        "description": "A delimiter different from the default can be provided.\n\n\n\n\nNew in version v2015.8.2.\n\n\n"
      },
      {
        "name": "force",
        "defaultValue": "False",
        "isRequired": false,
        "description": "If force is True, the existing grain will be overwritten regardless of its existing or provided value type. Defaults to False\n\n\n\n\nNew in version v2015.8.2.\n\n\n"
      }
    ]
  },
  {
    "functionId": "salt.states.grains.append",
    "description": "Append a value to a list in the grains config file. The grain that is being\nappended to (name) must exist before the new value can be added.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The grain name"
      },
      {
        "name": "value",
        "defaultValue": null,
        "isRequired": true,
        "description": "The value to append"
      },
      {
        "name": "convert",
        "defaultValue": "False",
        "isRequired": false,
        "description": "If convert is True, convert non-list contents into a list.\nIf convert is False and the grain contains non-list contents, an error\nis given. Defaults to False."
      },
      {
        "name": "delimiter",
        "defaultValue": "':'",
        "isRequired": false,
        "description": "A delimiter different from the default can be provided.\n\n\n\n\nNew in version v2015.8.2.\n\n\n"
      }
    ]
  },
  {
    "functionId": "salt.states.grains.list_absent",
    "description": "Delete a value from a grain formed as a list.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The grain name."
      },
      {
        "name": "value",
        "defaultValue": null,
        "isRequired": true,
        "description": "The value to delete from the grain list."
      },
      {
        "name": "delimiter",
        "defaultValue": "':'",
        "isRequired": false,
        "description": "A delimiter different from the default : can be provided.\n\n\n\n\nNew in version v2015.8.2.\n\n\n"
      }
    ]
  },
  {
    "functionId": "salt.states.grains.list_present",
    "description": "Ensure the value is present in the list-type grain. Note: If the grain that is\nprovided in name is not present on the system, this new grain will be created\nwith the corresponding provided value.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The grain name."
      },
      {
        "name": "value",
        "defaultValue": null,
        "isRequired": true,
        "description": "The value is present in the list type grain."
      },
      {
        "name": "delimiter",
        "defaultValue": "':'",
        "isRequired": false,
        "description": "A delimiter different from the default : can be provided.\n\n\n\n\nNew in version v2015.8.2.\n\n\n"
      }
    ]
  },
  {
    "functionId": "salt.states.grains.present",
    "description": "Ensure that a grain is set",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The grain name"
      },
      {
        "name": "value",
        "defaultValue": null,
        "isRequired": true,
        "description": "The value to set on the grain"
      },
      {
        "name": "delimiter",
        "defaultValue": "':'",
        "isRequired": false,
        "description": "A delimiter different from the default can be provided.\n\n\n\n\nNew in version v2015.8.2.\n\n\n"
      },
      {
        "name": "force",
        "defaultValue": "False",
        "isRequired": false,
        "description": "If force is True, the existing grain will be overwritten regardless of its existing or provided value type. Defaults to False\n\n\n\n\nNew in version v2015.8.2.\n\n\n"
      }
    ]
  },
  {
    "functionId": "salt.states.group.absent",
    "description": "Ensure that the named group is absent",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the group to remove"
      }
    ]
  },
  {
    "functionId": "salt.states.group.present",
    "description": "Ensure that a group is present",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the group to manage"
      },
      {
        "name": "gid",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The group id to assign to the named group; if left empty, then the next\navailable group id will be assigned"
      },
      {
        "name": "system",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Whether or not the named group is a system group.  This is essentially\nthe '-r' option of 'groupadd'."
      },
      {
        "name": "addusers",
        "defaultValue": "None",
        "isRequired": false,
        "description": "List of additional users to be added as a group members."
      },
      {
        "name": "delusers",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Ensure these user are removed from the group membership."
      },
      {
        "name": "members",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Replace existing group members with a list of new members."
      }
    ]
  },
  {
    "functionId": "salt.states.hg.latest",
    "description": "Make sure the repository is cloned to the given directory and is up to date",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Address of the remote repository as passed to \"hg clone\""
      },
      {
        "name": "rev",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The remote branch, tag, or revision hash to clone/pull"
      },
      {
        "name": "target",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Target destination directory path on minion to clone into"
      },
      {
        "name": "clean",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Force a clean update with -C (Default: False)"
      },
      {
        "name": "user",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Name of the user performing repository management operations\n\n\n\n\nNew in version 0.17.0.\n\n\n"
      },
      {
        "name": "identity",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Private SSH key on the minion server for authentication ([ssh://](ssh://))\n\n\n\n\nNew in version 2015.5.0.\n\n\n"
      },
      {
        "name": "force",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Force hg to clone into pre-existing directories (deletes contents)"
      },
      {
        "name": "opts",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Include additional arguments and options to the hg command line"
      }
    ]
  },
  {
    "functionId": "salt.states.hipchat.send_message",
    "description": "Send a message to a Hipchat room.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The unique name for this event."
      },
      {
        "name": "room_id",
        "defaultValue": null,
        "isRequired": true,
        "description": "The room to send the message to. Can either be the ID or the name."
      },
      {
        "name": "from_name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of that is to be shown in the \"from\" field.\nIf not specified, defaults to."
      },
      {
        "name": "message",
        "defaultValue": null,
        "isRequired": true,
        "description": "The message that is to be sent to the Hipchat room."
      },
      {
        "name": "api_url",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "api_key",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "api_version",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "message_color",
        "defaultValue": "'yellow'",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "notify",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.host.absent",
    "description": "Ensure that the named host is absent",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The host to remove"
      },
      {
        "name": "ip",
        "defaultValue": null,
        "isRequired": true,
        "description": "The ip addr(s) of the host to remove"
      }
    ]
  },
  {
    "functionId": "salt.states.host.only",
    "description": "Ensure that only the given hostnames are associated with the\ngiven IP address.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The IP address to associate with the given hostnames."
      },
      {
        "name": "hostnames",
        "defaultValue": null,
        "isRequired": true,
        "description": "Either a single hostname or a list of hostnames to associate\nwith the given IP address in the given order.  Any other\nhostname associated with the IP address is removed.  If no\nhostnames are specified, all hostnames associated with the\ngiven IP address are removed."
      }
    ]
  },
  {
    "functionId": "salt.states.host.present",
    "description": "Ensures that the named host is present with the given ip",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The host to assign an ip to"
      },
      {
        "name": "ip",
        "defaultValue": null,
        "isRequired": true,
        "description": "The ip addr(s) to apply to the host"
      }
    ]
  },
  {
    "functionId": "salt.states.htpasswd.user_exists",
    "description": "Make sure the user is inside the specified htpasswd file",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "User name"
      },
      {
        "name": "password",
        "defaultValue": "None",
        "isRequired": false,
        "description": "User password"
      },
      {
        "name": "htpasswd_file",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Path to the htpasswd file"
      },
      {
        "name": "options",
        "defaultValue": "''",
        "isRequired": false,
        "description": "See [salt.modules.htpasswd.useradd](../../modules/all/salt.modules.htpasswd.html#salt.modules.htpasswd.useradd \"salt.modules.htpasswd.useradd\")"
      },
      {
        "name": "force",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Touch the file even if user already created"
      },
      {
        "name": "runas",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The system user to run htpasswd command with"
      }
    ]
  },
  {
    "functionId": "salt.states.http.query",
    "description": "Perform an HTTP query and statefully return the result",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the query."
      },
      {
        "name": "match",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Specifies a pattern to look for in the return text. By default, this will\nperform a string comparison of looking for the value of match in the return\ntext."
      },
      {
        "name": "match_type",
        "defaultValue": "'string'",
        "isRequired": false,
        "description": "Specifies the type of pattern matching to use. Default is string, but can also be set to pcre to use regular expression matching if a more complex pattern matching is required.\n\n\n\n\nNote\n\nDespite the name of match_type for this argument, this setting actually uses Python's re.search() function rather than Python's re.match() function.\n\n\n"
      },
      {
        "name": "status",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The status code for a URL for which to be checked. Can be used instead of\nor in addition to the match setting."
      },
      {
        "name": "wait_for",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.http.wait_for_successful_query",
    "description": "Like query but, repeat and wait until match/match_type or status is fulfilled. State returns result from last\nquery state in case of success or if no successful query was made within wait_for timeout.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "wait_for",
        "defaultValue": "300",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.ifttt.trigger_event",
    "description": "Trigger an event in IFTTT",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The unique name for this event."
      },
      {
        "name": "event",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the event to trigger in IFTTT."
      },
      {
        "name": "value1",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "value2",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "value3",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.incron.absent",
    "description": "Verifies that the specified incron job is absent for the specified user; only\nthe name is matched when removing a incron job.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unique comment describing the entry"
      },
      {
        "name": "path",
        "defaultValue": null,
        "isRequired": true,
        "description": "The path that should be watched"
      },
      {
        "name": "mask",
        "defaultValue": null,
        "isRequired": true,
        "description": "The mask of events that should be monitored for"
      },
      {
        "name": "cmd",
        "defaultValue": null,
        "isRequired": true,
        "description": "The cmd that should be executed"
      },
      {
        "name": "user",
        "defaultValue": "'root'",
        "isRequired": false,
        "description": "The name of the user who's crontab needs to be modified, defaults to\nthe root user"
      }
    ]
  },
  {
    "functionId": "salt.states.incron.present",
    "description": "Verifies that the specified incron job is present for the specified user.\nFor more advanced information about what exactly can be set in the cron\ntiming parameters, check your incron system's documentation. Most Unix-like\nsystems' incron documentation can be found via the incrontab man page:\nman 5 incrontab.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unique comment describing the entry"
      },
      {
        "name": "path",
        "defaultValue": null,
        "isRequired": true,
        "description": "The path that should be watched"
      },
      {
        "name": "mask",
        "defaultValue": null,
        "isRequired": true,
        "description": "The mask of events that should be monitored for"
      },
      {
        "name": "cmd",
        "defaultValue": null,
        "isRequired": true,
        "description": "The cmd that should be executed"
      },
      {
        "name": "user",
        "defaultValue": "'root'",
        "isRequired": false,
        "description": "The name of the user who's crontab needs to be modified, defaults to\nthe root user"
      }
    ]
  },
  {
    "functionId": "salt.states.influxdb08_database.absent",
    "description": "Ensure that the named database is absent",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the database to remove"
      },
      {
        "name": "user",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The user to connect as (must be able to remove the database)"
      },
      {
        "name": "password",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The password of the user"
      },
      {
        "name": "host",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The host to connect to"
      },
      {
        "name": "port",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The port to connect to"
      }
    ]
  },
  {
    "functionId": "salt.states.influxdb08_database.present",
    "description": "Ensure that the named database is present",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the database to create"
      },
      {
        "name": "user",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The user to connect as (must be able to remove the database)"
      },
      {
        "name": "password",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The password of the user"
      },
      {
        "name": "host",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The host to connect to"
      },
      {
        "name": "port",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The port to connect to"
      }
    ]
  },
  {
    "functionId": "salt.states.influxdb08_user.absent",
    "description": "Ensure that the named cluster admin or database user is absent.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the user to remove"
      },
      {
        "name": "database",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The database to remove the user from"
      },
      {
        "name": "user",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The user to connect as (must be able to remove the user)"
      },
      {
        "name": "password",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The password of the user"
      },
      {
        "name": "host",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The host to connect to"
      },
      {
        "name": "port",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The port to connect to"
      }
    ]
  },
  {
    "functionId": "salt.states.influxdb08_user.present",
    "description": "Ensure that the cluster admin or database user is present.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the user to manage"
      },
      {
        "name": "passwd",
        "defaultValue": null,
        "isRequired": true,
        "description": "The password of the user"
      },
      {
        "name": "database",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The database to create the user in"
      },
      {
        "name": "user",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The user to connect as (must be able to create the user)"
      },
      {
        "name": "password",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The password of the user"
      },
      {
        "name": "host",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The host to connect to"
      },
      {
        "name": "port",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The port to connect to"
      }
    ]
  },
  {
    "functionId": "salt.states.influxdb_database.absent",
    "description": "Ensure that given database is absent.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Name of the database to remove."
      },
      {
        "name": "**client_args",
        "defaultValue": "**client_args",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.influxdb_database.present",
    "description": "Ensure that given database is present.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Name of the database to create."
      },
      {
        "name": "**client_args",
        "defaultValue": "**client_args",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.influxdb_user.absent",
    "description": "Ensure that given user is absent.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the user to manage"
      },
      {
        "name": "**client_args",
        "defaultValue": "**client_args",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.influxdb_user.present",
    "description": "Ensure that given user is present.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Name of the user to manage"
      },
      {
        "name": "password",
        "defaultValue": null,
        "isRequired": true,
        "description": "Password of the user"
      },
      {
        "name": "admin",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Whether the user should have cluster administration\nprivileges or not."
      },
      {
        "name": "**client_args",
        "defaultValue": "**client_args",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.infoblox.absent",
    "description": "Ensure a record does not exists",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Name of the record"
      },
      {
        "name": "record_type",
        "defaultValue": null,
        "isRequired": true,
        "description": "record type (host, a, cname, etc)"
      },
      {
        "name": "dns_view",
        "defaultValue": null,
        "isRequired": true,
        "description": "DNS View"
      },
      {
        "name": "infoblox_server",
        "defaultValue": "None",
        "isRequired": false,
        "description": "infoblox server to connect to (will try pillar if not specified)"
      },
      {
        "name": "infoblox_user",
        "defaultValue": "None",
        "isRequired": false,
        "description": "username to use to connect to infoblox (will try pillar if not specified)"
      },
      {
        "name": "infoblox_password",
        "defaultValue": "None",
        "isRequired": false,
        "description": "password to use to connect to infoblox (will try pillar if not specified)"
      },
      {
        "name": "infoblox_api_version",
        "defaultValue": "'v1.4.2'",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "sslVerify",
        "defaultValue": "True",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.infoblox.present",
    "description": "Ensure a record exists",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Name of the record"
      },
      {
        "name": "value",
        "defaultValue": null,
        "isRequired": true,
        "description": "Value of the record"
      },
      {
        "name": "record_type",
        "defaultValue": null,
        "isRequired": true,
        "description": "record type (host, a, cname, etc)"
      },
      {
        "name": "dns_view",
        "defaultValue": null,
        "isRequired": true,
        "description": "DNS View"
      },
      {
        "name": "infoblox_server",
        "defaultValue": "None",
        "isRequired": false,
        "description": "infoblox server to connect to (will try pillar if not specified)"
      },
      {
        "name": "infoblox_user",
        "defaultValue": "None",
        "isRequired": false,
        "description": "username to use to connect to infoblox (will try pillar if not specified)"
      },
      {
        "name": "infoblox_password",
        "defaultValue": "None",
        "isRequired": false,
        "description": "password to use to connect to infoblox (will try pillar if not specified)"
      },
      {
        "name": "infoblox_api_version",
        "defaultValue": "'v1.4.2'",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "sslVerify",
        "defaultValue": "True",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.ini_manage.options_absent",
    "description": "options present in file and not specified in sections\ndict will be untouched",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "sections",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "separator",
        "defaultValue": "'",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.ini_manage.options_present",
    "description": "options present in file and not specified in sections\ndict will be untouched",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "sections",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "separator",
        "defaultValue": "'",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.ini_manage.sections_absent",
    "description": "options present in file and not specified in sections will be deleted\nchanges dict will contain the sections that changed",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "sections",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "separator",
        "defaultValue": "'",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.ini_manage.sections_present",
    "description": "This will only create empty sections. To also create options, use\noptions_present state",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "sections",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "separator",
        "defaultValue": "'",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.ipmi.boot_device",
    "description": "Request power state change",
    "arguments": [
      {
        "name": "name",
        "defaultValue": "'default'",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.ipmi.power",
    "description": "Request power state change",
    "arguments": [
      {
        "name": "name",
        "defaultValue": "'power_on'",
        "isRequired": false,
        "description": "\nEnsure power state one of:\n\n\n*   power_on -- system turn on\n*   power_off -- system turn off (without waiting for OS)\n*   shutdown -- request OS proper shutdown\n*   reset -- reset (without waiting for OS)\n*   boot -- If system is off, then 'on', else 'reset'\n\n\n"
      },
      {
        "name": "wait",
        "defaultValue": "300",
        "isRequired": false,
        "description": "wait X seconds for the job to complete before forcing.\n(defaults to 300 seconds)"
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.ipmi.user_absent",
    "description": "Remove user\nDelete all user (uid) records having the matching name.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "string name of user to delete"
      },
      {
        "name": "channel",
        "defaultValue": "14",
        "isRequired": false,
        "description": "channel to remove user access from defaults to 14 for auto."
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.ipmi.user_present",
    "description": "Ensure IPMI user and user privileges.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "name of user (limit 16 bytes)"
      },
      {
        "name": "uid",
        "defaultValue": null,
        "isRequired": true,
        "description": "user id number (1 to 7)"
      },
      {
        "name": "password",
        "defaultValue": null,
        "isRequired": true,
        "description": "user password (limit 16 bytes)"
      },
      {
        "name": "channel",
        "defaultValue": "14",
        "isRequired": false,
        "description": "ipmi channel defaults to 14 for auto"
      },
      {
        "name": "callback",
        "defaultValue": "False",
        "isRequired": false,
        "description": "User Restricted to Callback\n\n\nFalse = User Privilege Limit is determined by the User Privilege Limit\nparameter privilege_level, for both callback and non-callback connections.\nTrue  = User Privilege Limit is determined by the privilege_level\nparameter for callback connections, but is restricted to Callback\nlevel for non-callback connections. Thus, a user can only initiate\na Callback when they 'call in' to the BMC, but once the callback\nconnection has been made, the user could potentially establish a\nsession as an Operator.\n\n"
      },
      {
        "name": "link_auth",
        "defaultValue": "True",
        "isRequired": false,
        "description": "User Link authentication\nTrue/False\nuser name and password information will be used for link\nauthentication, e.g. PPP CHAP) for the given channel. Link\nauthentication itself is a global setting for the channel and is\nenabled/disabled via the serial/modem configuration parameters."
      },
      {
        "name": "ipmi_msg",
        "defaultValue": "True",
        "isRequired": false,
        "description": "User IPMI Messaging\nTrue/False\nuser name and password information will be used for IPMI\nMessaging. In this case, 'IPMI Messaging' refers to the ability to\nexecute generic IPMI commands that are not associated with a\nparticular payload type. For example, if IPMI Messaging is disabled for\na user, but that user is enabled for activating the SOL\npayload type, then IPMI commands associated with SOL and session\nmanagement, such as Get SOL Configuration Parameters and Close Session\nare available, but generic IPMI commands such as Get SEL Time are\nunavailable.)\nipmi_msg"
      },
      {
        "name": "privilege_level",
        "defaultValue": "'administrator'",
        "isRequired": false,
        "description": "*   callback\n*   user\n*   operator\n*   administrator\n*   proprietary\n*   no_access\n"
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.ipset.absent",
    "description": "Remove a entry or entries from a chain",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "A user-defined name to call this entry by in another part of a state or\nformula. This should not be an actual entry."
      },
      {
        "name": "entry",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "entries",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "family",
        "defaultValue": "'ipv4'",
        "isRequired": false,
        "description": "Network family, ipv4 or ipv6."
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.ipset.flush",
    "description": "Flush current ipset set",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "family",
        "defaultValue": "'ipv4'",
        "isRequired": false,
        "description": "Networking family, either ipv4 or ipv6"
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.ipset.present",
    "description": "Append a entry to a set",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "A user-defined name to call this entry by in another part of a state or\nformula. This should not be an actual entry."
      },
      {
        "name": "entry",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A single entry to add to a set or a list of entries to add to a set"
      },
      {
        "name": "family",
        "defaultValue": "'ipv4'",
        "isRequired": false,
        "description": "Network family, ipv4 or ipv6."
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.ipset.set_absent",
    "description": "Verify the set is absent.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "family",
        "defaultValue": "'ipv4'",
        "isRequired": false,
        "description": "Networking family, either ipv4 or ipv6"
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.ipset.set_present",
    "description": "Verify the set exists.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "A user-defined set name."
      },
      {
        "name": "set_type",
        "defaultValue": null,
        "isRequired": true,
        "description": "The type for the set."
      },
      {
        "name": "family",
        "defaultValue": "'ipv4'",
        "isRequired": false,
        "description": "Networking family, either ipv4 or ipv6"
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.iptables.append",
    "description": "Add a rule to the end of the specified chain.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "A user-defined name to call this rule by in another part of a state or\nformula. This should not be an actual rule."
      },
      {
        "name": "table",
        "defaultValue": "'filter'",
        "isRequired": false,
        "description": "The table that owns the chain which should be modified"
      },
      {
        "name": "family",
        "defaultValue": "'ipv4'",
        "isRequired": false,
        "description": "Network family, ipv4 or ipv6."
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.iptables.chain_absent",
    "description": "Verify the chain is absent.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "table",
        "defaultValue": "'filter'",
        "isRequired": false,
        "description": "The table to remove the chain from"
      },
      {
        "name": "family",
        "defaultValue": "'ipv4'",
        "isRequired": false,
        "description": "Networking family, either ipv4 or ipv6"
      }
    ]
  },
  {
    "functionId": "salt.states.iptables.chain_present",
    "description": "Verify the chain is exist.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "A user-defined chain name."
      },
      {
        "name": "table",
        "defaultValue": "'filter'",
        "isRequired": false,
        "description": "The table to own the chain."
      },
      {
        "name": "family",
        "defaultValue": "'ipv4'",
        "isRequired": false,
        "description": "Networking family, either ipv4 or ipv6"
      }
    ]
  },
  {
    "functionId": "salt.states.iptables.delete",
    "description": "Delete a rule to a chain",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "A user-defined name to call this rule by in another part of a state or\nformula. This should not be an actual rule."
      },
      {
        "name": "table",
        "defaultValue": "'filter'",
        "isRequired": false,
        "description": "The table that owns the chain that should be modified"
      },
      {
        "name": "family",
        "defaultValue": "'ipv4'",
        "isRequired": false,
        "description": "Networking family, either ipv4 or ipv6"
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.iptables.flush",
    "description": "Flush current iptables state",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "table",
        "defaultValue": "'filter'",
        "isRequired": false,
        "description": "The table that owns the chain that should be modified"
      },
      {
        "name": "family",
        "defaultValue": "'ipv4'",
        "isRequired": false,
        "description": "Networking family, either ipv4 or ipv6"
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.iptables.insert",
    "description": "Insert a rule into a chain",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "A user-defined name to call this rule by in another part of a state or\nformula. This should not be an actual rule."
      },
      {
        "name": "table",
        "defaultValue": "'filter'",
        "isRequired": false,
        "description": "The table that owns the chain that should be modified"
      },
      {
        "name": "family",
        "defaultValue": "'ipv4'",
        "isRequired": false,
        "description": "Networking family, either ipv4 or ipv6"
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.iptables.mod_aggregate",
    "description": "The mod_aggregate function which looks up all rules in the available\nlow chunks and merges them into a single rules ref in the present low data",
    "arguments": [
      {
        "name": "low",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "chunks",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "running",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.iptables.set_policy",
    "description": "Sets the default policy for iptables firewall tables",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "table",
        "defaultValue": "'filter'",
        "isRequired": false,
        "description": "The table that owns the chain that should be modified"
      },
      {
        "name": "family",
        "defaultValue": "'ipv4'",
        "isRequired": false,
        "description": "Networking family, either ipv4 or ipv6"
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.jboss7.bindings_exist",
    "description": "Ensures that given JNDI binding are present on the server.\nIf a binding doesn't exist on the server it will be created.\nIf it already exists its value will be changed.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "jboss_config",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "bindings",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "profile",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.jboss7.datasource_exists",
    "description": "Ensures that a datasource with given properties exist on the jboss instance.\nIf datasource doesn't exist, it is created, otherwise only the properties that are different will be updated.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Datasource property name"
      },
      {
        "name": "jboss_config",
        "defaultValue": null,
        "isRequired": true,
        "description": "Dict with connection properties (see state description)"
      },
      {
        "name": "datasource_properties",
        "defaultValue": null,
        "isRequired": true,
        "description": "Dict with datasource properties"
      },
      {
        "name": "recreate",
        "defaultValue": "False",
        "isRequired": false,
        "description": "If set to True and datasource exists it will be removed and created again. However, if there are deployments that depend on the datasource, it will not me possible to remove it."
      },
      {
        "name": "profile",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The profile name for this datasource (domain mode only)"
      }
    ]
  },
  {
    "functionId": "salt.states.jboss7.deployed",
    "description": "Ensures that the given application is deployed on server.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "jboss_config",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "salt_source",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.jboss7.reloaded",
    "description": "Reloads configuration of jboss server.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "jboss_config",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "timeout",
        "defaultValue": "60",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "interval",
        "defaultValue": "5",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.jenkins.absent",
    "description": "Ensure the job is present in the Jenkins\nconfigured jobs",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the Jenkins job to remove."
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.jenkins.present",
    "description": "Ensure the job is present in the Jenkins\nconfigured jobs",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The unique name for the Jenkins job"
      },
      {
        "name": "config",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The Salt URL for the file to use for\nconfiguring the job."
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.junos.cli",
    "description": "Executes the CLI commands and reuturns the text output.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.junos.commit",
    "description": "Commits the changes loaded into the candidate configuration.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.junos.diff",
    "description": "Gets the difference between the candidate and the current configuration.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.junos.file_copy",
    "description": "Copies the file from the local device to the junos device.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "dest",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.junos.install_config",
    "description": "Loads and commits the configuration provided.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.junos.install_os",
    "description": "Installs the given image on the device. After the installation is complete\nthe device is rebooted, if reboot=True is given as a keyworded argument.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.junos.rollback",
    "description": "Rollbacks the committed changes.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.junos.rpc",
    "description": "name: the rpc to be executed.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "dest",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "format",
        "defaultValue": "'xml'",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "args",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.junos.set_hostname",
    "description": "name: the name to be given to the device",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "commit_changes",
        "defaultValue": "True",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.junos.shutdown",
    "description": "Shuts down the device.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "time",
        "defaultValue": "0",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.junos.zeroize",
    "description": "Resets the device to default factory settings.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.k8s.label_absent",
    "description": "Ensure the label doesn't exist on the kube node.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Name of the label."
      },
      {
        "name": "node",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Override node ID."
      },
      {
        "name": "apiserver",
        "defaultValue": "None",
        "isRequired": false,
        "description": "K8S apiserver URL."
      }
    ]
  },
  {
    "functionId": "salt.states.k8s.label_folder_absent",
    "description": "Ensure the label folder doesn't exist on the kube node.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Name of the label folder."
      },
      {
        "name": "node",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Override node ID."
      },
      {
        "name": "apiserver",
        "defaultValue": "None",
        "isRequired": false,
        "description": "K8S apiserver URL."
      }
    ]
  },
  {
    "functionId": "salt.states.k8s.label_present",
    "description": "Ensure the label exists on the kube node.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Name of the label."
      },
      {
        "name": "value",
        "defaultValue": null,
        "isRequired": true,
        "description": "Value of the label."
      },
      {
        "name": "node",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Override node ID."
      },
      {
        "name": "apiserver",
        "defaultValue": "None",
        "isRequired": false,
        "description": "K8S apiserver URL."
      }
    ]
  },
  {
    "functionId": "salt.states.kapacitor.task_absent",
    "description": "Ensure that a task is absent from Kapacitor.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Name of the task."
      }
    ]
  },
  {
    "functionId": "salt.states.kapacitor.task_present",
    "description": "Ensure that a task is present and up-to-date in Kapacitor.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Name of the task."
      },
      {
        "name": "tick_script",
        "defaultValue": null,
        "isRequired": true,
        "description": "Path to the TICK script for the task. Can be a salt:// source."
      },
      {
        "name": "task_type",
        "defaultValue": "'stream'",
        "isRequired": false,
        "description": "Task type. Defaults to 'stream'"
      },
      {
        "name": "database",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Which database to fetch data from. Defaults to None, which will use the\ndefault database in InfluxDB."
      },
      {
        "name": "retention_policy",
        "defaultValue": "'default'",
        "isRequired": false,
        "description": "Which retention policy to fetch data from. Defaults to 'default'."
      },
      {
        "name": "enable",
        "defaultValue": "True",
        "isRequired": false,
        "description": "Whether to enable the task or not. Defaults to True."
      }
    ]
  },
  {
    "functionId": "salt.states.keyboard.system",
    "description": "Set the keyboard layout for the system",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The keyboard layout to use"
      }
    ]
  },
  {
    "functionId": "salt.states.keyboard.xorg",
    "description": "Set the keyboard layout for XOrg",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.keystone.endpoint_absent",
    "description": "Ensure that the endpoint for a service doesn't exist in Keystone catalog",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the service whose endpoints should not exist"
      },
      {
        "name": "profile",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "**connection_args",
        "defaultValue": "**connection_args",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.keystone.endpoint_present",
    "description": "Ensure the specified endpoints exists for service",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The Service name"
      },
      {
        "name": "publicurl",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The public url of service endpoint (for V2 API)"
      },
      {
        "name": "internalurl",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The internal url of service endpoint (for V2 API)"
      },
      {
        "name": "adminurl",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The admin url of the service endpoint (for V2 API)"
      },
      {
        "name": "region",
        "defaultValue": "'RegionOne'",
        "isRequired": false,
        "description": "The region of the endpoint"
      },
      {
        "name": "profile",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "url",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The endpoint URL (for V3 API)"
      },
      {
        "name": "interface",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The interface type, which describes the visibility\nof the endpoint. (for V3 API)"
      },
      {
        "name": "**connection_args",
        "defaultValue": "**connection_args",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.keystone.project_absent",
    "description": "Ensure that the keystone project is absent.\nAlias for tenant_absent from V2 API to fulfill\nV3 API naming convention.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the project that should not exist"
      },
      {
        "name": "profile",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "**connection_args",
        "defaultValue": "**connection_args",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.keystone.project_present",
    "description": "Ensures that the keystone project exists\nAlias for tenant_present from V2 API to fulfill\nV3 API naming convention.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the project to manage"
      },
      {
        "name": "description",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The description to use for this project"
      },
      {
        "name": "enabled",
        "defaultValue": "True",
        "isRequired": false,
        "description": "Availability state for this project"
      },
      {
        "name": "profile",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "**connection_args",
        "defaultValue": "**connection_args",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.keystone.role_absent",
    "description": "Ensure that the keystone role is absent.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the role that should not exist"
      },
      {
        "name": "profile",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "**connection_args",
        "defaultValue": "**connection_args",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.keystone.role_present",
    "description": "'\nEnsures that the keystone role exists",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the role that should be present"
      },
      {
        "name": "profile",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "**connection_args",
        "defaultValue": "**connection_args",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.keystone.service_absent",
    "description": "Ensure that the service doesn't exist in Keystone catalog",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the service that should not exist"
      },
      {
        "name": "profile",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "**connection_args",
        "defaultValue": "**connection_args",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.keystone.service_present",
    "description": "Ensure service present in Keystone catalog",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the service"
      },
      {
        "name": "service_type",
        "defaultValue": null,
        "isRequired": true,
        "description": "The type of Openstack Service"
      },
      {
        "name": "description",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "profile",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "**connection_args",
        "defaultValue": "**connection_args",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.keystone.tenant_absent",
    "description": "Ensure that the keystone tenant is absent.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the tenant that should not exist"
      },
      {
        "name": "profile",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "**connection_args",
        "defaultValue": "**connection_args",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.keystone.tenant_present",
    "description": "Ensures that the keystone tenant exists",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the tenant to manage"
      },
      {
        "name": "description",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The description to use for this tenant"
      },
      {
        "name": "enabled",
        "defaultValue": "True",
        "isRequired": false,
        "description": "Availability state for this tenant"
      },
      {
        "name": "profile",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "**connection_args",
        "defaultValue": "**connection_args",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.keystone.user_absent",
    "description": "Ensure that the keystone user is absent.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the user that should not exist"
      },
      {
        "name": "profile",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "**connection_args",
        "defaultValue": "**connection_args",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.keystone.user_present",
    "description": "Ensure that the keystone user is present with the specified properties.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the user to manage"
      },
      {
        "name": "password",
        "defaultValue": null,
        "isRequired": true,
        "description": "The password to use for this user.\n\n\n\n\nNote\n\nIf the user already exists and a different password was set for the user than the one specified here, the password for the user will be updated. Please set the password_reset option to False if this is not the desired behavior.\n\n\n"
      },
      {
        "name": "email",
        "defaultValue": null,
        "isRequired": true,
        "description": "The email address for this user"
      },
      {
        "name": "tenant",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The tenant (name) for this user"
      },
      {
        "name": "enabled",
        "defaultValue": "True",
        "isRequired": false,
        "description": "Availability state for this user"
      },
      {
        "name": "roles",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The roles the user should have under given tenants. Passed as a dictionary mapping tenant names to a list of roles in this tenant, i.e.:\n\n\n\nroles:\n    admin:   # tenant\n      - admin  # role\n    service:\n      - admin\n      - Member\n\n\n\n"
      },
      {
        "name": "profile",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "password_reset",
        "defaultValue": "True",
        "isRequired": false,
        "description": "Whether or not to reset password after initial set. Defaults to\nTrue."
      },
      {
        "name": "project",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The project (name) for this user (overrides tenant in api v3)"
      },
      {
        "name": "**connection_args",
        "defaultValue": "**connection_args",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.kmod.absent",
    "description": "Verify that the named kernel module is not loaded",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the kernel module to verify is not loaded"
      },
      {
        "name": "persist",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Remove module from /etc/modules"
      },
      {
        "name": "comment",
        "defaultValue": "True",
        "isRequired": false,
        "description": "Comment out module in /etc/modules rather than remove it"
      },
      {
        "name": "mods",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A list of modules to verify are unloaded. If this argument is used, the name argument, although still required, is not used, and becomes a placeholder\n\n\n\n\nNew in version 2016.3.0.\n\n\n"
      }
    ]
  },
  {
    "functionId": "salt.states.kmod.present",
    "description": "Ensure that the specified kernel module is loaded",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the kernel module to verify is loaded"
      },
      {
        "name": "persist",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Also add module to /etc/modules"
      },
      {
        "name": "mods",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A list of modules to verify are loaded. If this argument is used, the name argument, although still required, is not used, and becomes a placeholder\n\n\n\n\nNew in version 2016.3.0.\n\n\n"
      }
    ]
  },
  {
    "functionId": "salt.states.layman.absent",
    "description": "Verify that the overlay is absent",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the overlay to delete"
      }
    ]
  },
  {
    "functionId": "salt.states.layman.present",
    "description": "Verify that the overlay is present",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the overlay to add"
      }
    ]
  },
  {
    "functionId": "salt.states.ldap.managed",
    "description": "Ensure the existence (or not) of LDAP entries and their attributes",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "entries",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "connect_spec",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.libcloud_dns.record_absent",
    "description": "Ensures a record is absent.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "zone",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "type",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "data",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "profile",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.libcloud_dns.record_present",
    "description": "Ensures a record is present.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "zone",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "type",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "data",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "profile",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.libcloud_dns.state_result",
    "description": "Unknown",
    "arguments": [
      {
        "name": "result",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "message",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.libcloud_dns.zone_absent",
    "description": "Ensures a record is absent.",
    "arguments": [
      {
        "name": "domain",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "profile",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.libcloud_dns.zone_present",
    "description": "Ensures a record is present.",
    "arguments": [
      {
        "name": "domain",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "type",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "profile",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.linux_acl.absent",
    "description": "Ensure a Linux ACL does not exist",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "acl_type",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "acl_name",
        "defaultValue": "''",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "perms",
        "defaultValue": "''",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "recurse",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.linux_acl.present",
    "description": "Ensure a Linux ACL is present",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "acl_type",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "acl_name",
        "defaultValue": "''",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "perms",
        "defaultValue": "''",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "recurse",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.locale.present",
    "description": "Generate a locale if it is not present",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the locale to be present. Some distributions require the\ncharmap to be specified as part of the locale at this point."
      }
    ]
  },
  {
    "functionId": "salt.states.locale.system",
    "description": "Set the locale for the system",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the locale to use"
      }
    ]
  },
  {
    "functionId": "salt.states.lvm.lv_absent",
    "description": "Remove a given existing logical volume from a named existing volume group",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The logical volume to remove"
      },
      {
        "name": "vgname",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The volume group name"
      }
    ]
  },
  {
    "functionId": "salt.states.lvm.lv_present",
    "description": "Create a new logical volume",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the logical volume"
      },
      {
        "name": "vgname",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The volume group name for this logical volume"
      },
      {
        "name": "size",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The initial size of the logical volume"
      },
      {
        "name": "extents",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The number of logical extents to allocate"
      },
      {
        "name": "snapshot",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The name of the snapshot"
      },
      {
        "name": "pv",
        "defaultValue": "''",
        "isRequired": false,
        "description": "The physical volume to use"
      },
      {
        "name": "thinvolume",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "thinpool",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.lvm.pv_absent",
    "description": "Ensure that a Physical Device is not being used by lvm",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The device name to initialize."
      }
    ]
  },
  {
    "functionId": "salt.states.lvm.pv_present",
    "description": "Set a physical device to be used as an LVM physical volume",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The device name to initialize."
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.lvm.vg_absent",
    "description": "Remove an LVM volume group",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The volume group to remove"
      }
    ]
  },
  {
    "functionId": "salt.states.lvm.vg_present",
    "description": "Create an LVM volume group",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The volume group name to create"
      },
      {
        "name": "devices",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A list of devices that will be added to the volume group"
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.lvs_server.absent",
    "description": "Ensure the LVS Real Server in specified service is absent.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the LVS server."
      },
      {
        "name": "protocol",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The service protocol(only support tcp, udp and fwmark service)."
      },
      {
        "name": "service_address",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The LVS service address."
      },
      {
        "name": "server_address",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The LVS real server address."
      }
    ]
  },
  {
    "functionId": "salt.states.lvs_server.present",
    "description": "Ensure that the named service is present.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The LVS server name"
      },
      {
        "name": "protocol",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The service protocol"
      },
      {
        "name": "service_address",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The LVS service address"
      },
      {
        "name": "server_address",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The real server address."
      },
      {
        "name": "packet_forward_method",
        "defaultValue": "'dr'",
        "isRequired": false,
        "description": "The LVS packet forwarding method(dr for direct routing, tunnel for tunneling, nat for network access translation)."
      },
      {
        "name": "weight",
        "defaultValue": "1",
        "isRequired": false,
        "description": "The capacity  of a server relative to the others in the pool."
      }
    ]
  },
  {
    "functionId": "salt.states.lvs_service.absent",
    "description": "Ensure the LVS service is absent.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the LVS service"
      },
      {
        "name": "protocol",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The service protocol"
      },
      {
        "name": "service_address",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The LVS service address"
      }
    ]
  },
  {
    "functionId": "salt.states.lvs_service.present",
    "description": "Ensure that the named service is present.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The LVS service name"
      },
      {
        "name": "protocol",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The service protocol"
      },
      {
        "name": "service_address",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The LVS service address"
      },
      {
        "name": "scheduler",
        "defaultValue": "'wlc'",
        "isRequired": false,
        "description": "Algorithm for allocating TCP connections and UDP datagrams to real servers."
      }
    ]
  },
  {
    "functionId": "salt.states.lxc.absent",
    "description": "Ensure a container is not present, destroying it if present",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Name of the container to destroy"
      },
      {
        "name": "stop",
        "defaultValue": "False",
        "isRequired": false,
        "description": "stop before destroying default: false\n\n\n\n\nNew in version 2015.5.2.\n\n\n"
      },
      {
        "name": "path",
        "defaultValue": "None",
        "isRequired": false,
        "description": "path to the container parent default: /var/lib/lxc (system default)\n\n\n\n\nNew in version 2015.8.0.\n\n\n"
      }
    ]
  },
  {
    "functionId": "salt.states.lxc.edited_conf",
    "description": "Edit LXC configuration options",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "lxc_conf",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "lxc_conf_unset",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.lxc.frozen",
    "description": "Ensure that a container is frozen",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the container"
      },
      {
        "name": "start",
        "defaultValue": "True",
        "isRequired": false,
        "description": "Start container first, if necessary. If False, then this state will\nfail if the container is not running."
      },
      {
        "name": "path",
        "defaultValue": "None",
        "isRequired": false,
        "description": "path to the container parent default: /var/lib/lxc (system default)\n\n\n\n\nNew in version 2015.8.0.\n\n\n"
      }
    ]
  },
  {
    "functionId": "salt.states.lxc.present",
    "description": "Create the named container if it does not exist",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the container to be created"
      },
      {
        "name": "running",
        "defaultValue": "None",
        "isRequired": false,
        "description": "*   If True, ensure that the container is running\n*   If False, ensure that the container is stopped\n*   If None, do nothing with regards to the running state of the\ncontainer\n\n\n\nNew in version 2015.8.0.\n\n\n"
      },
      {
        "name": "clone_from",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Create named container as a clone of the specified container"
      },
      {
        "name": "snapshot",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Use Copy On Write snapshots (LVM). Only supported with clone_from."
      },
      {
        "name": "profile",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Profile to use in container creation (see the [LXC Tutorial](../../../topics/tutorials/lxc.html#tutorial-lxc-profiles-container) for more information). Values in a\nprofile will be overridden by the parameters listed below."
      },
      {
        "name": "network_profile",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Network Profile to use in container creation (see the [LXC Tutorial](../../../topics/tutorials/lxc.html#tutorial-lxc-profiles-container) for more information). Values in a profile will be overridden by the parameters listed below.\n\n\n\n\nNew in version 2015.5.2.\n\n\n"
      },
      {
        "name": "template",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "options",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "image",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "config",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "fstype",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "size",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "backing",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "vgname",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "lvname",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "path",
        "defaultValue": "None",
        "isRequired": false,
        "description": "path to the container parent default: /var/lib/lxc (system default)\n\n\n\n\nNew in version 2015.8.0.\n\n\n"
      }
    ]
  },
  {
    "functionId": "salt.states.lxc.running",
    "description": "Ensure that a container is running",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the container"
      },
      {
        "name": "restart",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Restart container if it is already running"
      },
      {
        "name": "path",
        "defaultValue": "None",
        "isRequired": false,
        "description": "path to the container parent default: /var/lib/lxc (system default)\n\n\n\n\nNew in version 2015.8.0.\n\n\n"
      }
    ]
  },
  {
    "functionId": "salt.states.lxc.set_pass",
    "description": "This state function has been disabled, as it did not conform to design\nguidelines. Specifically, due to the fact that lxc.set_password uses chpasswd(8) to set the password,\nthere was no method to make this action idempotent (in other words, the\npassword would be changed every time). This makes this state redundant,\nsince the following state will do the same thing:",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.lxc.stopped",
    "description": "Ensure that a container is stopped",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the container"
      },
      {
        "name": "kill",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Do not wait for the container to stop, kill all tasks in the container. Older LXC versions will stop containers like this irrespective of this argument.\n\n\n\n\nNew in version 2015.5.0.\n\n\n"
      },
      {
        "name": "path",
        "defaultValue": "None",
        "isRequired": false,
        "description": "path to the container parent default: /var/lib/lxc (system default)\n\n\n\n\nNew in version 2015.8.0.\n\n\n"
      }
    ]
  },
  {
    "functionId": "salt.states.mac_assistive.installed",
    "description": "Make sure that we have the given bundle ID or path to command\ninstalled in the assistive access panel.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The bundle ID or path to command"
      },
      {
        "name": "enabled",
        "defaultValue": "True",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.mac_defaults.absent",
    "description": "Make sure the defaults value is absent",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The key of the given domain to remove"
      },
      {
        "name": "domain",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the domain to remove from"
      },
      {
        "name": "user",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The user to write the defaults to"
      }
    ]
  },
  {
    "functionId": "salt.states.mac_defaults.write",
    "description": "Write a default to the system",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The key of the given domain to write to"
      },
      {
        "name": "domain",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the domain to write to"
      },
      {
        "name": "value",
        "defaultValue": null,
        "isRequired": true,
        "description": "The value to write to the given key"
      },
      {
        "name": "vtype",
        "defaultValue": "'string'",
        "isRequired": false,
        "description": "The type of value to be written, valid types are string, data, int[eger],\nfloat, bool[ean], date, array, array-add, dict, dict-add"
      },
      {
        "name": "user",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The user to write the defaults to"
      }
    ]
  },
  {
    "functionId": "salt.states.mac_keychain.default_keychain",
    "description": "Set the default keychain to use",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The chain in which to use as the default"
      },
      {
        "name": "domain",
        "defaultValue": "'user'",
        "isRequired": false,
        "description": "The domain to use valid values are user|system|common|dynamic, the default is user"
      },
      {
        "name": "user",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The user to run as"
      }
    ]
  },
  {
    "functionId": "salt.states.mac_keychain.installed",
    "description": "Install a p12 certificate file into the macOS keychain",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The certificate to install"
      },
      {
        "name": "password",
        "defaultValue": null,
        "isRequired": true,
        "description": "The password for the certificate being installed formatted in the way\ndescribed for openssl command in the PASS PHRASE ARGUMENTS section"
      },
      {
        "name": "keychain",
        "defaultValue": "'/Library/Keychains/System.keychain'",
        "isRequired": false,
        "description": "The keychain to install the certificate to, this defaults to\n/Library/Keychains/System.keychain"
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.mac_keychain.uninstalled",
    "description": "Uninstall a p12 certificate file from the macOS keychain",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The certificate to uninstall, this can be a path for a .p12 or the friendly\nname"
      },
      {
        "name": "password",
        "defaultValue": null,
        "isRequired": true,
        "description": "The password for the certificate being installed formatted in the way\ndescribed for openssl command in the PASS PHRASE ARGUMENTS section"
      },
      {
        "name": "keychain",
        "defaultValue": "'/Library/Keychains/System.keychain'",
        "isRequired": false,
        "description": "The keychain to remove the certificate from, this defaults to\n/Library/Keychains/System.keychain"
      },
      {
        "name": "keychain_password",
        "defaultValue": "None",
        "isRequired": false,
        "description": "If your keychain is likely to be locked pass the password and it will be unlocked\nbefore running the import"
      }
    ]
  },
  {
    "functionId": "salt.states.mac_package.installed",
    "description": "Install a Mac OS Package from a pkg or dmg file, if given a dmg file it\nwill first be mounted in a temporary location",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The pkg or dmg file to install"
      },
      {
        "name": "target",
        "defaultValue": "'LocalSystem'",
        "isRequired": false,
        "description": "The location in which to install the package. This can be a path or LocalSystem"
      },
      {
        "name": "dmg",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Is the given file a dmg file?"
      },
      {
        "name": "store",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Should the pkg be installed as if it was from the Mac OS Store?"
      },
      {
        "name": "app",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Is the file a .app? If so then we'll just copy that to /Applications/ or the given\ntarget"
      },
      {
        "name": "mpkg",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Is the file a .mpkg? If so then we'll check all of the .pkg files found are installed"
      },
      {
        "name": "user",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Name of the user performing the unless or onlyif checks"
      },
      {
        "name": "onlyif",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A command to run as a check, run the named command only if the command\npassed to the onlyif option returns true"
      },
      {
        "name": "unless",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A command to run as a check, only run the named command if the command\npassed to the unless option returns false"
      },
      {
        "name": "force",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Force the package to be installed even if its already been found installed"
      },
      {
        "name": "allow_untrusted",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Allow the installation of untrusted packages"
      },
      {
        "name": "version_check",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The command and version that we want to check against, the version number can use regex."
      }
    ]
  },
  {
    "functionId": "salt.states.mac_xattr.delete",
    "description": "Make sure the given attributes are deleted from the file/directory",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The path to the file/directory"
      },
      {
        "name": "attributes",
        "defaultValue": null,
        "isRequired": true,
        "description": "The attributes that should be removed from the file/directory, this is accepted as\nan array."
      }
    ]
  },
  {
    "functionId": "salt.states.mac_xattr.exists",
    "description": "Make sure the given attributes exist on the file/directory",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The path to the file/directory"
      },
      {
        "name": "attributes",
        "defaultValue": null,
        "isRequired": true,
        "description": "The attributes that should exist on the file/directory, this is accepted as\nan array, with key and value split with an equals sign, if you want to specify\na hex value then add 0x to the beginning of the value."
      }
    ]
  },
  {
    "functionId": "salt.states.makeconf.absent",
    "description": "Verify that the variable is not in the make.conf.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The variable name. This will automatically be converted to upper\ncase since variables in make.conf are in upper case"
      }
    ]
  },
  {
    "functionId": "salt.states.makeconf.present",
    "description": "Verify that the variable is in the make.conf and has the provided\nsettings. If value is set, contains and excludes will be ignored.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The variable name. This will automatically be converted to upper\ncase since variables in make.conf are in upper case"
      },
      {
        "name": "value",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Enforce that the value of the variable is set to the provided value"
      },
      {
        "name": "contains",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Enforce that the value of the variable contains the provided value"
      },
      {
        "name": "excludes",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Enforce that the value of the variable does not contain the provided\nvalue."
      }
    ]
  },
  {
    "functionId": "salt.states.marathon_app.absent",
    "description": "Ensure that the marathon app with the given id is not present.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.marathon_app.config",
    "description": "Ensure that the marathon app with the given id is present and is configured\nto match the given config values.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "config",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.marathon_app.running",
    "description": "Ensure that the marathon app with the given id is present and restart if set.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "restart",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "force",
        "defaultValue": "True",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.mdadm.absent",
    "description": "Verify that the raid is absent",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of raid device to be destroyed"
      }
    ]
  },
  {
    "functionId": "salt.states.mdadm.present",
    "description": "Verify that the raid is present",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of raid device to be created"
      },
      {
        "name": "level",
        "defaultValue": null,
        "isRequired": true,
        "description": "The RAID level to use when creating the raid."
      },
      {
        "name": "devices",
        "defaultValue": null,
        "isRequired": true,
        "description": "A list of devices used to build the array."
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.memcached.absent",
    "description": "Ensure that a memcached key is not present.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The key"
      },
      {
        "name": "value",
        "defaultValue": "None",
        "isRequired": false,
        "description": "If specified, only ensure that the key is absent if it matches the\nspecified value."
      },
      {
        "name": "host",
        "defaultValue": "'127.0.0.1'",
        "isRequired": false,
        "description": "The memcached server IP address"
      },
      {
        "name": "port",
        "defaultValue": "11211",
        "isRequired": false,
        "description": "The memcached server port"
      },
      {
        "name": "time",
        "defaultValue": "0",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.memcached.managed",
    "description": "Manage a memcached key.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The key to manage"
      },
      {
        "name": "value",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The value to set for that key"
      },
      {
        "name": "host",
        "defaultValue": "'127.0.0.1'",
        "isRequired": false,
        "description": "The memcached server IP address"
      },
      {
        "name": "port",
        "defaultValue": "11211",
        "isRequired": false,
        "description": "The memcached server port"
      },
      {
        "name": "time",
        "defaultValue": "0",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "min_compress_len",
        "defaultValue": "0",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.modjk.worker_activated",
    "description": "Activate all the workers in the modjk load balancer",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "workers",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "profile",
        "defaultValue": "'default'",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.modjk.worker_disabled",
    "description": "Disable all the workers in the modjk load balancer",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "workers",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "profile",
        "defaultValue": "'default'",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.modjk.worker_recover",
    "description": "Recover all the workers in the modjk load balancer",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "workers",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "profile",
        "defaultValue": "'default'",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.modjk.worker_stopped",
    "description": "Stop all the workers in the modjk load balancer",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "workers",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "profile",
        "defaultValue": "'default'",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.modjk_worker.activate",
    "description": "Activate the named worker from the lbn load balancers at the targeted\nminions",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "lbn",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "target",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "profile",
        "defaultValue": "'default'",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "expr_form",
        "defaultValue": "'glob'",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.modjk_worker.disable",
    "description": "Disable the named worker from the lbn load balancers at the targeted\nminions.\nThe worker will get traffic only for current sessions and won't get new\nones.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "lbn",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "target",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "profile",
        "defaultValue": "'default'",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "expr_form",
        "defaultValue": "'glob'",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.modjk_worker.stop",
    "description": "Stop the named worker from the lbn load balancers at the targeted minions\nThe worker won't get any traffic from the lbn",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "lbn",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "target",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "profile",
        "defaultValue": "'default'",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "expr_form",
        "defaultValue": "'glob'",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.module.mod_watch",
    "description": "This function is an alias of run.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The module function to execute"
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.module.run",
    "description": "Run a single module function",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The module function to execute"
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.module.wait",
    "description": "Run a single module function only if the watch statement calls it",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The module function to execute"
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Pass any arguments needed to execute the function"
      }
    ]
  },
  {
    "functionId": "salt.states.mongodb_database.absent",
    "description": "Ensure that the named database is absent",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the database to remove"
      },
      {
        "name": "user",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The user to connect as (must be able to create the user)"
      },
      {
        "name": "password",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The password of the user"
      },
      {
        "name": "host",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The host to connect to"
      },
      {
        "name": "port",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The port to connect to"
      },
      {
        "name": "authdb",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The database in which to authenticate"
      }
    ]
  },
  {
    "functionId": "salt.states.mongodb_user.absent",
    "description": "Ensure that the named user is absent",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the user to remove"
      },
      {
        "name": "user",
        "defaultValue": "None",
        "isRequired": false,
        "description": "MongoDB user with sufficient privilege to create the user"
      },
      {
        "name": "password",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Password for the admin user specified by the user parameter"
      },
      {
        "name": "host",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The hostname/IP address of the MongoDB server"
      },
      {
        "name": "port",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The port on which MongoDB is listening"
      },
      {
        "name": "database",
        "defaultValue": "'admin'",
        "isRequired": false,
        "description": "The database from which to remove the user specified by the name\nparameter"
      },
      {
        "name": "authdb",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The database in which to authenticate"
      }
    ]
  },
  {
    "functionId": "salt.states.mongodb_user.present",
    "description": "Ensure that the user is present with the specified properties",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the user to manage"
      },
      {
        "name": "passwd",
        "defaultValue": null,
        "isRequired": true,
        "description": "The password of the user to manage"
      },
      {
        "name": "database",
        "defaultValue": "'admin'",
        "isRequired": false,
        "description": "The database in which to create the user\n\n\n\n\nNote\n\nIf the database doesn't exist, it will be created.\n\n\n"
      },
      {
        "name": "user",
        "defaultValue": "None",
        "isRequired": false,
        "description": "MongoDB user with sufficient privilege to create the user"
      },
      {
        "name": "password",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Password for the admin user specified with the user parameter"
      },
      {
        "name": "host",
        "defaultValue": "'localhost'",
        "isRequired": false,
        "description": "The hostname/IP address of the MongoDB server"
      },
      {
        "name": "port",
        "defaultValue": "27017",
        "isRequired": false,
        "description": "The port on which MongoDB is listening"
      },
      {
        "name": "authdb",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The database in which to authenticate"
      }
    ]
  },
  {
    "functionId": "salt.states.monit.monitor",
    "description": "Get the summary from module monit and try to see if service is\nbeing monitored. If not then monitor the service.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.monit.unmonitor",
    "description": "Get the summary from module monit and try to see if service is\nbeing monitored. If it is then stop monitoring the service.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.mount.mod_watch",
    "description": "The mounted watcher, called to invoke the watch command.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the mount point"
      },
      {
        "name": "user",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.mount.mounted",
    "description": "Verify that a device is mounted",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The path to the location where the device is to be mounted"
      },
      {
        "name": "device",
        "defaultValue": null,
        "isRequired": true,
        "description": "The device name, typically the device node, such as /dev/sdb1\nor UUID=066e0200-2867-4ebe-b9e6-f30026ca2314 or LABEL=DATA"
      },
      {
        "name": "fstype",
        "defaultValue": null,
        "isRequired": true,
        "description": "The filesystem type, this will be xfs, ext2/3/4 in the case of classic\nfilesystems, and fuse in the case of fuse mounts"
      },
      {
        "name": "mkmnt",
        "defaultValue": "False",
        "isRequired": false,
        "description": "If the mount point is not present then the state will fail, set mkmnt: True\nto create the mount point if it is otherwise not present"
      },
      {
        "name": "opts",
        "defaultValue": "'defaults'",
        "isRequired": false,
        "description": "A list object of options or a comma delimited list"
      },
      {
        "name": "dump",
        "defaultValue": "0",
        "isRequired": false,
        "description": "The dump value to be passed into the fstab, Default is 0"
      },
      {
        "name": "pass_num",
        "defaultValue": "0",
        "isRequired": false,
        "description": "The pass value to be passed into the fstab, Default is 0"
      },
      {
        "name": "config",
        "defaultValue": "'/etc/fstab'",
        "isRequired": false,
        "description": "Set an alternative location for the fstab, Default is /etc/fstab"
      },
      {
        "name": "persist",
        "defaultValue": "True",
        "isRequired": false,
        "description": "Set if the mount should be saved in the fstab, Default is True"
      },
      {
        "name": "mount",
        "defaultValue": "True",
        "isRequired": false,
        "description": "Set if the mount should be mounted immediately, Default is True"
      },
      {
        "name": "user",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The user to own the mount; this defaults to the user salt is\nrunning as on the minion"
      },
      {
        "name": "match_on",
        "defaultValue": "'auto'",
        "isRequired": false,
        "description": "A name or list of fstab properties on which this state should be applied.\nDefault is auto, a special value indicating to guess based on fstype.\nIn general, auto matches on name for recognized special devices and\ndevice otherwise."
      },
      {
        "name": "device_name_regex",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A list of device exact names or regular expressions which should not force a remount. For example, glusterfs may be mounted with a comma-separated list of servers in fstab, but the /proc/self/mountinfo will show only the first available server.\n\n\n\n{% set glusterfs_ip_list = ['10.0.0.1', '10.0.0.2', '10.0.0.3'] %}\n\nmount glusterfs volume:\n  mount.mounted:\n    - name: /mnt/glusterfs_mount_point\n    - device: {{ glusterfs_ip_list|join(',') }}:/volume_name\n    - fstype: glusterfs\n    - opts: _netdev,rw,defaults,direct-io-mode=disable\n    - mkmnt: True\n    - persist: True\n    - dump: 0\n    - pass_num: 0\n    - device_name_regex:\n      - ({{ glusterfs_ip_list|join('|') }}):/volume_name\n\n\n\n\n\n\nNew in version 2016.11.0.\n\n\n"
      },
      {
        "name": "extra_mount_invisible_options",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A list of extra options that are not visible through the /proc/self/mountinfo interface.\n\nIf a option is not visible through this interface it will always remount the device. This option extends the builtin mount_invisible_options list.\n"
      },
      {
        "name": "extra_mount_invisible_keys",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A list of extra key options that are not visible through the /proc/self/mountinfo interface.\n\nIf a key option is not visible through this interface it will always remount the device. This option extends the builtin mount_invisible_keys list.\n\nA good example for a key option is the password option:\n\n\n\npassword=badsecret\n\n\n\n"
      },
      {
        "name": "extra_mount_ignore_fs_keys",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A dict of filesystem options which should not force a remount. This will update the internal dictionary. The dict should look like this:\n\n\n\n{\n    'ramfs': ['size']\n}\n\n\n\n"
      },
      {
        "name": "extra_mount_translate_options",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A dict of mount options that gets translated when mounted. To prevent a remount add additional options to the default dictionary. This will update the internal dictionary. The dictionary should look like this:\n\n\n\n{\n    'tcp': 'proto=tcp',\n    'udp': 'proto=udp'\n}\n\n\n\n"
      },
      {
        "name": "hidden_opts",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A list of mount options that will be ignored when considering a remount as part of the state application\n\n\n\n\nNew in version 2015.8.2.\n\n\n"
      }
    ]
  },
  {
    "functionId": "salt.states.mount.swap",
    "description": "Activates a swap device",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "persist",
        "defaultValue": "True",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "config",
        "defaultValue": "'/etc/fstab'",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.mount.unmounted",
    "description": "Verify that a device is not mounted",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The path to the location where the device is to be unmounted from"
      },
      {
        "name": "device",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The device to be unmounted. This is optional because the device could be mounted in multiple places.\n\n\n\n\nNew in version 2015.5.0.\n\n\n"
      },
      {
        "name": "config",
        "defaultValue": "'/etc/fstab'",
        "isRequired": false,
        "description": "Set an alternative location for the fstab, Default is /etc/fstab"
      },
      {
        "name": "persist",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Set if the mount should be purged from the fstab, Default is False"
      },
      {
        "name": "user",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The user to own the mount; this defaults to the user salt is\nrunning as on the minion"
      }
    ]
  },
  {
    "functionId": "salt.states.mysql_database.absent",
    "description": "Ensure that the named database is absent",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the database to remove"
      },
      {
        "name": "**connection_args",
        "defaultValue": "**connection_args",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.mysql_database.present",
    "description": "Ensure that the named database is present with the specified properties",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the database to manage"
      },
      {
        "name": "character_set",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "collate",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "**connection_args",
        "defaultValue": "**connection_args",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.mysql_grants.absent",
    "description": "Ensure that the grant is absent",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name (key) of the grant to add"
      },
      {
        "name": "grant",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The grant priv_type (i.e. select,insert,update OR all privileges)"
      },
      {
        "name": "database",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The database priv_level (i.e. db.tbl OR db.*)"
      },
      {
        "name": "user",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The user to apply the grant to"
      },
      {
        "name": "host",
        "defaultValue": "'localhost'",
        "isRequired": false,
        "description": "The network/host that the grant should apply to"
      },
      {
        "name": "grant_option",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "escape",
        "defaultValue": "True",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "**connection_args",
        "defaultValue": "**connection_args",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.mysql_grants.present",
    "description": "Ensure that the grant is present with the specified properties",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name (key) of the grant to add"
      },
      {
        "name": "grant",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The grant priv_type (i.e. select,insert,update OR all privileges)"
      },
      {
        "name": "database",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The database priv_level (i.e. db.tbl OR db.*)"
      },
      {
        "name": "user",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The user to apply the grant to"
      },
      {
        "name": "host",
        "defaultValue": "'localhost'",
        "isRequired": false,
        "description": "The network/host that the grant should apply to"
      },
      {
        "name": "grant_option",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Adds the WITH GRANT OPTION to the defined grant. Default is False"
      },
      {
        "name": "escape",
        "defaultValue": "True",
        "isRequired": false,
        "description": "Defines if the database value gets escaped or not. Default is True"
      },
      {
        "name": "revoke_first",
        "defaultValue": "False",
        "isRequired": false,
        "description": "By default, MySQL will not do anything if you issue a command to grant privileges that are more restrictive than what's already in place. This effectively means that you cannot downgrade permissions without first revoking permissions applied to a db.table/user pair first.\n\nTo have Salt forcibly revoke perms before applying a new grant, enable the 'revoke_first options.\n\nWARNING: This will *remove* permissions for a database before attempting to apply new permissions. There is no guarantee that new permissions will be applied correctly which can leave your database security in an unknown and potentially dangerous state. Use with caution!\n\nDefault is False\n"
      },
      {
        "name": "ssl_option",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Adds the specified ssl options for the connecting user as requirements for this grant. Value is a list of single-element dicts corresponding to the list of ssl options to use.\n\nPossible key/value pairings for the dicts in the value:\n\n\n\n- SSL: True\n- X509: True\n- SUBJECT: \n- ISSUER: \n- CIPHER: \n\n\n\n\n\nThe non-boolean ssl options take a string as their values, which should be an appropriate value as specified by the MySQL documentation for these options.\n\nDefault is False (no ssl options will be used)\n"
      },
      {
        "name": "**connection_args",
        "defaultValue": "**connection_args",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.mysql_query.run",
    "description": "Execute an arbitrary query on the specified database",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Used only as an ID"
      },
      {
        "name": "database",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the database to execute the query on"
      },
      {
        "name": "query",
        "defaultValue": null,
        "isRequired": true,
        "description": "The query to execute"
      },
      {
        "name": "output",
        "defaultValue": "None",
        "isRequired": false,
        "description": "grain: output in a grain\nother: the file to store results\nNone:  output to the result comment (default)"
      },
      {
        "name": "grain",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "key",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "overwrite",
        "defaultValue": "True",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "**connection_args",
        "defaultValue": "**connection_args",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.mysql_user.absent",
    "description": "Ensure that the named user is absent",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the user to remove"
      },
      {
        "name": "host",
        "defaultValue": "'localhost'",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "**connection_args",
        "defaultValue": "**connection_args",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.mysql_user.present",
    "description": "Ensure that the named user is present with the specified properties. A\npasswordless user can be configured by omitting password and\npassword_hash, and setting allow_passwordless to True.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the user to manage"
      },
      {
        "name": "host",
        "defaultValue": "'localhost'",
        "isRequired": false,
        "description": "Host for which this user/password combo applies"
      },
      {
        "name": "password",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The password to use for this user. Will take precedence over the\npassword_hash option if both are specified."
      },
      {
        "name": "password_hash",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The password in hashed form. Be sure to quote the password because YAML doesn't like the *. A password hash can be obtained from the mysql command-line client like so:\n\n\n\nmysql> SELECT PASSWORD('mypass');\n+-------------------------------------------+\n| PASSWORD('mypass')                        |\n+-------------------------------------------+\n| *6C8989366EAF75BB670AD8EA7A7FC1176A95CEF4 |\n+-------------------------------------------+\n1 row in set (0.00 sec)\n\n\n\n"
      },
      {
        "name": "allow_passwordless",
        "defaultValue": "False",
        "isRequired": false,
        "description": "If True, then password and password_hash can be omitted to permit a passwordless login.\n\n\n\n\nNew in version 0.16.2.\n\n\n"
      },
      {
        "name": "unix_socket",
        "defaultValue": "False",
        "isRequired": false,
        "description": "If True and allow_passwordless is True, the unix_socket auth\nplugin will be used."
      },
      {
        "name": "password_column",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "**connection_args",
        "defaultValue": "**connection_args",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.netntp.managed",
    "description": "Manages the configuration of NTP peers and servers on the device, as specified in the state SLS file.\nNTP entities not specified in these lists will be removed whilst entities not configured on the device will be set.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "peers",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "servers",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.netsnmp.managed",
    "description": "Configures the SNMP on the device as specified in the SLS file.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "config",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "defaults",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.netusers.managed",
    "description": "Manages the configuration of the users on the device, as specified in the state SLS file. Users not defined in that\nfile will be remove whilst users not configured on the device, will be added.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "users",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "defaults",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.network.managed",
    "description": "Ensure that the named interface is configured properly.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the interface to manage"
      },
      {
        "name": "type",
        "defaultValue": null,
        "isRequired": true,
        "description": "Type of interface and configuration."
      },
      {
        "name": "enabled",
        "defaultValue": "True",
        "isRequired": false,
        "description": "Designates the state of this interface."
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.network.routes",
    "description": "Manage network interface static routes.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Interface name to apply the route to."
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.network.system",
    "description": "Ensure that global network settings are configured properly.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Custom name to represent this configuration change."
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.nftables.append",
    "description": "Append a rule to a chain",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "A user-defined name to call this rule by in another part of a state or\nformula. This should not be an actual rule."
      },
      {
        "name": "family",
        "defaultValue": "'ipv4'",
        "isRequired": false,
        "description": "Network family, ipv4 or ipv6."
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.nftables.chain_absent",
    "description": "Verify the chain is absent.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "table",
        "defaultValue": "'filter'",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "family",
        "defaultValue": "'ipv4'",
        "isRequired": false,
        "description": "Networking family, either ipv4 or ipv6"
      }
    ]
  },
  {
    "functionId": "salt.states.nftables.chain_present",
    "description": "Verify the chain is exist.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "A user-defined chain name."
      },
      {
        "name": "table",
        "defaultValue": "'filter'",
        "isRequired": false,
        "description": "The table to own the chain."
      },
      {
        "name": "table_type",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "hook",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "priority",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "family",
        "defaultValue": "'ipv4'",
        "isRequired": false,
        "description": "Networking family, either ipv4 or ipv6"
      }
    ]
  },
  {
    "functionId": "salt.states.nftables.delete",
    "description": "Delete a rule to a chain",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "A user-defined name to call this rule by in another part of a state or\nformula. This should not be an actual rule."
      },
      {
        "name": "family",
        "defaultValue": "'ipv4'",
        "isRequired": false,
        "description": "Networking family, either ipv4 or ipv6"
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.nftables.flush",
    "description": "Flush current nftables state",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "family",
        "defaultValue": "'ipv4'",
        "isRequired": false,
        "description": "Networking family, either ipv4 or ipv6"
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.nftables.insert",
    "description": "Insert a rule into a chain",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "A user-defined name to call this rule by in another part of a state or\nformula. This should not be an actual rule."
      },
      {
        "name": "family",
        "defaultValue": "'ipv4'",
        "isRequired": false,
        "description": "Networking family, either ipv4 or ipv6"
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.npm.bootstrap",
    "description": "Bootstraps a node.js application.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "user",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The user to run NPM with\n\n\n\n\nNew in version 0.17.0.\n\n\n"
      },
      {
        "name": "silent",
        "defaultValue": "True",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.npm.cache_cleaned",
    "description": "Ensure that the given package is not cached.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The name of the package to remove from the cache, or None for all packages"
      },
      {
        "name": "user",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The user to run NPM with"
      }
    ]
  },
  {
    "functionId": "salt.states.npm.installed",
    "description": "Verify that the given package is installed and is at the correct version\n(if specified).",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The package to install\n\n\n\n\nChanged in version 2014.7.2: This parameter is no longer lowercased by salt so that case-sensitive NPM package names will work.\n\n\n"
      },
      {
        "name": "pkgs",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A list of packages to install with a single npm invocation; specifying this argument will ignore the name argument\n\n\n\n\nNew in version 2014.7.0.\n\n\n"
      },
      {
        "name": "dir",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The target directory in which to install the package, or None for\nglobal installation"
      },
      {
        "name": "user",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The user to run NPM with\n\n\n\n\nNew in version 0.17.0.\n\n\n"
      },
      {
        "name": "force_reinstall",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Install the package even if it is already installed"
      },
      {
        "name": "registry",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The NPM registry from which to install the package\n\n\n\n\nNew in version 2014.7.0.\n\n\n"
      },
      {
        "name": "env",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A list of environment variables to be set prior to execution. The format is the same as the [cmd.run](salt.states.cmd.html#salt.states.cmd.run \"salt.states.cmd.run\"). state function.\n\n\n\n\nNew in version 2014.7.0.\n\n\n"
      }
    ]
  },
  {
    "functionId": "salt.states.npm.removed",
    "description": "Verify that the given package is not installed.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "dir",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The target directory in which to install the package, or None for\nglobal installation"
      },
      {
        "name": "user",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The user to run NPM with\n\n\n\n\nNew in version 0.17.0.\n\n\n"
      }
    ]
  },
  {
    "functionId": "salt.states.ntp.managed",
    "description": "Manage NTP servers",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "servers",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A list of NTP servers"
      }
    ]
  },
  {
    "functionId": "salt.states.nxos.config_absent",
    "description": "Ensure a specific configuration line does not exist in the running config",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "config line to remove"
      }
    ]
  },
  {
    "functionId": "salt.states.nxos.config_present",
    "description": "Ensure a specific configuration line exists in the running config",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "config line to set"
      }
    ]
  },
  {
    "functionId": "salt.states.nxos.replace",
    "description": "Replace all instances of a string or full line in the running config",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "String to replace"
      },
      {
        "name": "repl",
        "defaultValue": null,
        "isRequired": true,
        "description": "The replacement text"
      },
      {
        "name": "full_match",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Whether name will match the full line or only a subset of the line.\nDefaults to False. When False, .* is added around name for matching\nin the show run config."
      }
    ]
  },
  {
    "functionId": "salt.states.nxos.user_absent",
    "description": "Ensure a user is not present",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "username to remove if it exists"
      }
    ]
  },
  {
    "functionId": "salt.states.nxos.user_present",
    "description": "Ensure a user is present with the specified groups",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Name of user"
      },
      {
        "name": "password",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Encrypted or Plain Text password for user"
      },
      {
        "name": "roles",
        "defaultValue": "None",
        "isRequired": false,
        "description": "List of roles the user should be assigned.  Any roles not in this list will be removed"
      },
      {
        "name": "encrypted",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Whether the password is encrypted already or not.  Defaults to False"
      },
      {
        "name": "crypt_salt",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Salt to use when encrypting the password.  Default is None (salt is\nrandomly generated for unhashed passwords)"
      },
      {
        "name": "algorithm",
        "defaultValue": "'sha256'",
        "isRequired": false,
        "description": "Algorithm to use for hashing password.  Defaults to sha256.\nAccepts md5, blowfish, sha256, sha512"
      }
    ]
  },
  {
    "functionId": "salt.states.openstack_config.absent",
    "description": "Ensure a value is not set in an OpenStack configuration file.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "filename",
        "defaultValue": null,
        "isRequired": true,
        "description": "The full path to the configuration file"
      },
      {
        "name": "section",
        "defaultValue": null,
        "isRequired": true,
        "description": "The section in which the parameter will be set"
      },
      {
        "name": "parameter",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.openstack_config.present",
    "description": "Ensure a value is set in an OpenStack configuration file.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "filename",
        "defaultValue": null,
        "isRequired": true,
        "description": "The full path to the configuration file"
      },
      {
        "name": "section",
        "defaultValue": null,
        "isRequired": true,
        "description": "The section in which the parameter will be set"
      },
      {
        "name": "value",
        "defaultValue": null,
        "isRequired": true,
        "description": "The value to set"
      },
      {
        "name": "parameter",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.openvswitch_bridge.absent",
    "description": "Ensures that the named bridge does not exist, eventually deletes it.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.openvswitch_bridge.present",
    "description": "Ensures that the named bridge exists, eventually creates it.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.openvswitch_port.absent",
    "description": "Ensures that the named port exists on bridge, eventually deletes it.\nIf bridge is not set, port is removed from  whatever bridge contains it.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "bridge",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.openvswitch_port.present",
    "description": "Ensures that the named port exists on bridge, eventually creates it.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "bridge",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "type",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "id",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "remote",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "dst_port",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.pagerduty.create_event",
    "description": "Create an event on the PagerDuty service",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "This is a short description of the event."
      },
      {
        "name": "details",
        "defaultValue": null,
        "isRequired": true,
        "description": "This can be a more detailed description of the event."
      },
      {
        "name": "service_key",
        "defaultValue": null,
        "isRequired": true,
        "description": "This key can be found by using pagerduty.list_services."
      },
      {
        "name": "profile",
        "defaultValue": null,
        "isRequired": true,
        "description": "This refers to the configuration profile to use to connect to the\nPagerDuty service."
      }
    ]
  },
  {
    "functionId": "salt.states.pagerduty_escalation_policy.absent",
    "description": "Ensure that a PagerDuty escalation policy does not exist.\nAccepts all the arguments that pagerduty_escalation_policy.present accepts;\nbut ignores all arguments except the name.",
    "arguments": [
      {
        "name": "profile",
        "defaultValue": "'pagerduty'",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "subdomain",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "api_key",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.pagerduty_escalation_policy.present",
    "description": "Ensure that a pagerduty escalation policy exists.  Will create or update as needed.",
    "arguments": [
      {
        "name": "profile",
        "defaultValue": "'pagerduty'",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "subdomain",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "api_key",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.pagerduty_schedule.absent",
    "description": "Ensure that a pagerduty schedule does not exist.\nName can be pagerduty schedule id or pagerduty schedule name.",
    "arguments": [
      {
        "name": "profile",
        "defaultValue": "'pagerduty'",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "subdomain",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "api_key",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.pagerduty_schedule.present",
    "description": "Ensure that a pagerduty schedule exists.\nThis method accepts as args everything defined in\nhttps://developer.pagerduty.com/documentation/rest/schedules/create.\nThis means that most arguments are in a dict called \"schedule.\"",
    "arguments": [
      {
        "name": "profile",
        "defaultValue": "'pagerduty'",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "subdomain",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "api_key",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.pagerduty_service.absent",
    "description": "Ensure a pagerduty service does not exist.\nName can be the service name or pagerduty service id.",
    "arguments": [
      {
        "name": "profile",
        "defaultValue": "'pagerduty'",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "subdomain",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "api_key",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.pagerduty_service.present",
    "description": "Ensure pagerduty service exists.\nThis method accepts as arguments everything defined in\nhttps://developer.pagerduty.com/documentation/rest/services/create",
    "arguments": [
      {
        "name": "profile",
        "defaultValue": "'pagerduty'",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "subdomain",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "api_key",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.pagerduty_user.absent",
    "description": "Ensure pagerduty user does not exist.\nName can be pagerduty id, email address, or user name.",
    "arguments": [
      {
        "name": "profile",
        "defaultValue": "'pagerduty'",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "subdomain",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "api_key",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.pagerduty_user.present",
    "description": "Ensure pagerduty user exists.\nArguments match those supported by\nhttps://developer.pagerduty.com/documentation/rest/users/create.",
    "arguments": [
      {
        "name": "profile",
        "defaultValue": "'pagerduty'",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "subdomain",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "api_key",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.pcs.auth",
    "description": "Ensure all nodes are authorized to the cluster",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Irrelevant, not used (recommended: pcs_auth__auth)"
      },
      {
        "name": "nodes",
        "defaultValue": null,
        "isRequired": true,
        "description": "a list of nodes which should be authorized to the cluster"
      },
      {
        "name": "pcsuser",
        "defaultValue": "'hacluster'",
        "isRequired": false,
        "description": "user for communitcation with pcs (default: hacluster)"
      },
      {
        "name": "pcspasswd",
        "defaultValue": "'hacluster'",
        "isRequired": false,
        "description": "password for pcsuser (default: hacluster)"
      },
      {
        "name": "extra_args",
        "defaultValue": "None",
        "isRequired": false,
        "description": "list of extra option for the 'pcs cluster auth' command"
      }
    ]
  },
  {
    "functionId": "salt.states.pcs.cib_present",
    "description": "Ensure that a CIB-file with the content of the current live CIB is created",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Irrelevant, not used (recommended: {{formulaname}}__cib_present_{{cibname}})"
      },
      {
        "name": "cibname",
        "defaultValue": null,
        "isRequired": true,
        "description": "name/path of the file containing the CIB"
      },
      {
        "name": "scope",
        "defaultValue": "None",
        "isRequired": false,
        "description": "specific section of the CIB (default:"
      },
      {
        "name": "extra_args",
        "defaultValue": "None",
        "isRequired": false,
        "description": "additional options for creating the CIB-file"
      }
    ]
  },
  {
    "functionId": "salt.states.pcs.cib_pushed",
    "description": "Ensure that a CIB-file is pushed if it is changed since the creation of it with pcs.cib_present",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Irrelevant, not used (recommended: {{formulaname}}__cib_pushed_{{cibname}})"
      },
      {
        "name": "cibname",
        "defaultValue": null,
        "isRequired": true,
        "description": "name/path of the file containing the CIB"
      },
      {
        "name": "scope",
        "defaultValue": "None",
        "isRequired": false,
        "description": "specific section of the CIB"
      },
      {
        "name": "extra_args",
        "defaultValue": "None",
        "isRequired": false,
        "description": "additional options for creating the CIB-file"
      }
    ]
  },
  {
    "functionId": "salt.states.pcs.cluster_node_present",
    "description": "Add a node to the Pacemaker cluster via PCS\nShould be run on one cluster node only\n(there may be races)\nCan only be run on a already setup/added node",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Irrelevant, not used (recommended: pcs_setup__node_add_{{node}})"
      },
      {
        "name": "node",
        "defaultValue": null,
        "isRequired": true,
        "description": "node that should be added"
      },
      {
        "name": "extra_args",
        "defaultValue": "None",
        "isRequired": false,
        "description": "list of extra option for the 'pcs cluster node add' command"
      }
    ]
  },
  {
    "functionId": "salt.states.pcs.cluster_setup",
    "description": "Setup Pacemaker cluster on nodes.\nShould be run on one cluster node only\n(there may be races)",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Irrelevant, not used (recommended: pcs_setup__setup)"
      },
      {
        "name": "nodes",
        "defaultValue": null,
        "isRequired": true,
        "description": "a list of nodes which should be set up"
      },
      {
        "name": "pcsclustername",
        "defaultValue": "'pcscluster'",
        "isRequired": false,
        "description": "Name of the Pacemaker cluster"
      },
      {
        "name": "extra_args",
        "defaultValue": "None",
        "isRequired": false,
        "description": "list of extra option for the 'pcs cluster setup' command"
      }
    ]
  },
  {
    "functionId": "salt.states.pcs.constraint_present",
    "description": "Ensure that a constraint is created",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Irrelevant, not used (recommended: {{formulaname}}__constraint_present_{{constraint_id}})"
      },
      {
        "name": "constraint_id",
        "defaultValue": null,
        "isRequired": true,
        "description": "name for the constraint (try first to create manually to find out the autocreated name)"
      },
      {
        "name": "constraint_type",
        "defaultValue": null,
        "isRequired": true,
        "description": "constraint type (location, colocation, order)"
      },
      {
        "name": "constraint_options",
        "defaultValue": "None",
        "isRequired": false,
        "description": "options for creating the constraint"
      },
      {
        "name": "cibname",
        "defaultValue": "None",
        "isRequired": false,
        "description": "use a cached CIB-file named like cibname instead of the live CIB"
      }
    ]
  },
  {
    "functionId": "salt.states.pcs.prop_has_value",
    "description": "Ensure that a property in the cluster is set to a given value",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Irrelevant, not used (recommended: pcs_properties__prop_has_value_{{prop}})"
      },
      {
        "name": "prop",
        "defaultValue": null,
        "isRequired": true,
        "description": "name of the property"
      },
      {
        "name": "value",
        "defaultValue": null,
        "isRequired": true,
        "description": "value of the property prop"
      },
      {
        "name": "extra_args",
        "defaultValue": "None",
        "isRequired": false,
        "description": "additional options for the pcs property command"
      },
      {
        "name": "cibname",
        "defaultValue": "None",
        "isRequired": false,
        "description": "use a cached CIB-file named like cibname instead of the live CIB"
      }
    ]
  },
  {
    "functionId": "salt.states.pcs.resource_defaults_to",
    "description": "Ensure a resource default in the cluster is set to a given value",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Irrelevant, not used (recommended: pcs_properties__resource_defaults_to_{{default}})"
      },
      {
        "name": "default",
        "defaultValue": null,
        "isRequired": true,
        "description": "name of the default resource property"
      },
      {
        "name": "value",
        "defaultValue": null,
        "isRequired": true,
        "description": "value of the default resource property"
      },
      {
        "name": "extra_args",
        "defaultValue": "None",
        "isRequired": false,
        "description": "additional options for the pcs command"
      },
      {
        "name": "cibname",
        "defaultValue": "None",
        "isRequired": false,
        "description": "use a cached CIB-file named like cibname instead of the live CIB"
      }
    ]
  },
  {
    "functionId": "salt.states.pcs.resource_op_defaults_to",
    "description": "Ensure a resource operation default in the cluster is set to a given value",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Irrelevant, not used (recommended: pcs_properties__resource_op_defaults_to_{{op_default}})"
      },
      {
        "name": "op_default",
        "defaultValue": null,
        "isRequired": true,
        "description": "name of the operation default resource property"
      },
      {
        "name": "value",
        "defaultValue": null,
        "isRequired": true,
        "description": "value of the operation default resource property"
      },
      {
        "name": "extra_args",
        "defaultValue": "None",
        "isRequired": false,
        "description": "additional options for the pcs command"
      },
      {
        "name": "cibname",
        "defaultValue": "None",
        "isRequired": false,
        "description": "use a cached CIB-file named like cibname instead of the live CIB"
      }
    ]
  },
  {
    "functionId": "salt.states.pcs.resource_present",
    "description": "Ensure that a resource is created",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Irrelevant, not used (recommended: {{formulaname}}__resource_present_{{resource_id}})"
      },
      {
        "name": "resource_id",
        "defaultValue": null,
        "isRequired": true,
        "description": "name for the resource"
      },
      {
        "name": "resource_type",
        "defaultValue": null,
        "isRequired": true,
        "description": "resource type (f.e. ocf:heartbeat:IPaddr2 or VirtualIP)"
      },
      {
        "name": "resource_options",
        "defaultValue": "None",
        "isRequired": false,
        "description": "additional options for creating the resource"
      },
      {
        "name": "cibname",
        "defaultValue": "None",
        "isRequired": false,
        "description": "use a cached CIB-file named like cibname instead of the live CIB"
      }
    ]
  },
  {
    "functionId": "salt.states.pcs.stonith_present",
    "description": "Ensure that a fencing resource is created",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Irrelevant, not used (recommended: pcs_stonith__created_{{stonith_id}})"
      },
      {
        "name": "stonith_id",
        "defaultValue": null,
        "isRequired": true,
        "description": "name for the stonith resource"
      },
      {
        "name": "stonith_device_type",
        "defaultValue": null,
        "isRequired": true,
        "description": "name of the stonith agent fence_eps, fence_xvm f.e."
      },
      {
        "name": "stonith_device_options",
        "defaultValue": "None",
        "isRequired": false,
        "description": "additional options for creating the stonith resource"
      },
      {
        "name": "cibname",
        "defaultValue": "None",
        "isRequired": false,
        "description": "use a cached CIB-file named like cibname instead of the live CIB"
      }
    ]
  },
  {
    "functionId": "salt.states.pecl.installed",
    "description": "Make sure that a pecl extension is installed.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The pecl extension name to install"
      },
      {
        "name": "version",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The pecl extension version to install. This option may be\nignored to install the latest stable version."
      },
      {
        "name": "defaults",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Use default answers for extensions such as pecl_http which ask\nquestions before installation. Without this option, the pecl.installed\nstate will hang indefinitely when trying to install these extensions."
      },
      {
        "name": "force",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Whether to force the installed version or not"
      },
      {
        "name": "preferred_state",
        "defaultValue": "'stable'",
        "isRequired": false,
        "description": "The pecl extension state to install"
      }
    ]
  },
  {
    "functionId": "salt.states.pecl.removed",
    "description": "Make sure that a pecl extension is not installed.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The pecl extension name to uninstall"
      }
    ]
  },
  {
    "functionId": "salt.states.pip_state.installed",
    "description": "Make sure the package is installed",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the python package to install. You can also specify version\nnumbers here using the standard operators ==, >=, <=. If\nrequirements is given, this parameter will be ignored."
      },
      {
        "name": "pkgs",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "pip_bin",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "requirements",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "bin_env",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "use_wheel",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "no_use_wheel",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "log",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "proxy",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "timeout",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "repo",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "editable",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "find_links",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "index_url",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "extra_index_url",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "no_index",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "mirrors",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "build",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "target",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "download",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "download_cache",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "source",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "upgrade",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "force_reinstall",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "ignore_installed",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "exists_action",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "no_deps",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "no_install",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "no_download",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "install_options",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "global_options",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "user",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "no_chown",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "cwd",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "pre_releases",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "cert",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "allow_all_external",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "allow_external",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "allow_unverified",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "process_dependency_links",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "env_vars",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "use_vt",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "trusted_host",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "no_cache_dir",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "cache_dir",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.pip_state.removed",
    "description": "Make sure that a package is not installed.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the package to uninstall"
      },
      {
        "name": "requirements",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "bin_env",
        "defaultValue": "None",
        "isRequired": false,
        "description": "the pip executable or virtualenenv to use"
      },
      {
        "name": "log",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "proxy",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "timeout",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "user",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The user under which to run pip"
      },
      {
        "name": "cwd",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "use_vt",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Use VT terminal emulation (see output while installing)"
      }
    ]
  },
  {
    "functionId": "salt.states.pip_state.uptodate",
    "description": "Verify that the system is completely up to date.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name has no functional value and is only used as a tracking\nreference"
      },
      {
        "name": "bin_env",
        "defaultValue": "None",
        "isRequired": false,
        "description": "the pip executable or virtualenenv to use"
      },
      {
        "name": "user",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The user under which to run pip"
      },
      {
        "name": "cwd",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "use_vt",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Use VT terminal emulation (see output while installing)"
      }
    ]
  },
  {
    "functionId": "salt.states.pkg.group_installed",
    "description": "Ensure that an entire package group is installed. This state is currently\nonly supported for the yum and pacman\npackage managers.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "skip",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Packages that would normally be installed by the package group (\"default\" packages), which should not be installed.\n\n\n\nLoad Balancer:\n  pkg.group_installed:\n    - skip:\n      - piranha\n\n\n\n"
      },
      {
        "name": "include",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Packages which are included in a group, which would not normally be installed by a yum groupinstall (\"optional\" packages). Note that this will not enforce group membership; if you include packages which are not members of the specified groups, they will still be installed.\n\n\n\nLoad Balancer:\n  pkg.group_installed:\n    - include:\n      - haproxy\n\n\n\n\n\n\nChanged in version 2016.3.0: This option can no longer be passed as a comma-separated list, it must now be passed as a list (as shown in the above example).\n\n\n"
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.pkg.installed",
    "description": "Unknown",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "version",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "refresh",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "fromrepo",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "skip_verify",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "skip_suggestions",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "pkgs",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "sources",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "allow_updates",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "pkg_verify",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "normalize",
        "defaultValue": "True",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "ignore_epoch",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "reinstall",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "update_holds",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.pkg.latest",
    "description": "This parameter controls whether or not the package repo database is\nupdated prior to checking for the latest available version of the\nrequested packages.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the package to maintain at the latest available version.\nThis parameter is ignored if \"pkgs\" is used."
      },
      {
        "name": "refresh",
        "defaultValue": "None",
        "isRequired": false,
        "description": "This parameter controls whether or not the package repo database is updated prior to checking for the latest available version of the requested packages.\n\nIf True, the package database will be refreshed (apt-get update or equivalent, depending on platform) before checking for the latest available version of the requested packages.\n\nIf False, the package database will *not* be refreshed before checking.\n\nIf unset, then Salt treats package database refreshes differently depending on whether or not a pkg state has been executed already during the current Salt run. Once a refresh has been performed in a pkg state, for the remainder of that Salt run no other refreshes will be performed for pkg states which do not explicitly set refresh to True. This prevents needless additional refreshes from slowing down the Salt run.\n"
      },
      {
        "name": "fromrepo",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Specify a repository from which to install"
      },
      {
        "name": "skip_verify",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Skip the GPG verification check for the package to be installed"
      },
      {
        "name": "pkgs",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "watch_flags",
        "defaultValue": "True",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.pkg.mod_aggregate",
    "description": "The mod_aggregate function which looks up all packages in the available\nlow chunks and merges them into a single pkgs ref in the present low data",
    "arguments": [
      {
        "name": "low",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "chunks",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "running",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.pkg.mod_init",
    "description": "Set a flag to tell the install functions to refresh the package database.\nThis ensures that the package database is refreshed only once during\na state run significantly improving the speed of package management\nduring a state run.",
    "arguments": [
      {
        "name": "low",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.pkg.mod_watch",
    "description": "Install/reinstall a package based on a watch requisite",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.pkg.purged",
    "description": "Verify that a package is not installed, calling pkg.purge if necessary\nto purge the package. All configuration files are also removed.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the package to be purged."
      },
      {
        "name": "version",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The version of the package that should be removed. Don't do anything if the package is installed with an unmatching version.\n\n\n\n\nImportant\n\nAs of version 2015.8.7, for distros which use yum/dnf, packages which have a version with a nonzero epoch (that is, versions which start with a number followed by a colon like in the example above) must have the epoch included when specifying the version number. For example:\n\n\n\nvim-enhanced:\n  pkg.installed:\n    - version: 2:7.4.160-1.el7\n\n\n\n\n\nIn version 2015.8.9, an **ignore_epoch** argument has been added to [pkg.installed](#salt.states.pkg.installed \"salt.states.pkg.installed\"), [pkg.removed](#salt.states.pkg.installed \"salt.states.pkg.installed\"), and [pkg.purged](#salt.states.pkg.installed \"salt.states.pkg.installed\") states, which causes the epoch to be disregarded when the state checks to see if the desired version was installed. If **ignore_epoch** was not set to True, and instead of 2:7.4.160-1.el7 a version of 7.4.160-1.el7 were used, this state would report success since the actual installed version includes the epoch, and the specified version would not match.\n\n\n"
      },
      {
        "name": "pkgs",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "normalize",
        "defaultValue": "True",
        "isRequired": false,
        "description": "Normalize the package name by removing the architecture, if the architecture of the package is different from the architecture of the operating system. The ability to disable this behavior is useful for poorly-created packages which include the architecture as an actual part of the name, such as kernel modules which match a specific kernel version.\n\n\n\n\nNew in version 2015.8.0.\n\n\n"
      },
      {
        "name": "ignore_epoch",
        "defaultValue": "False",
        "isRequired": false,
        "description": "When a package version contains an non-zero epoch (e.g. 1:3.14.159-2.el7, and a specific version of a package is desired, set this option to True to ignore the epoch when comparing versions. This allows for the following SLS to be used:\n\n\n\n# Actual vim-enhanced version: 2:7.4.160-1.el7\nvim-enhanced:\n  pkg.purged:\n    - version: 7.4.160-1.el7\n    - ignore_epoch: True\n\n\n\n\n\nWithout this option set to True in the above example, the state would falsely report success since the actual installed version is 2:7.4.160-1.el7. Alternatively, this option can be left as False and the full version string (with epoch) can be specified in the SLS file:\n\n\n\nvim-enhanced:\n  pkg.purged:\n    - version: 2:7.4.160-1.el7\n\n\n\n\n\n\nNew in version 2015.8.9.\n\n\n"
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.pkg.removed",
    "description": "Verify that a package is not installed, calling pkg.remove if necessary\nto remove the package.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the package to be removed."
      },
      {
        "name": "version",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The version of the package that should be removed. Don't do anything if the package is installed with an unmatching version.\n\n\n\n\nImportant\n\nAs of version 2015.8.7, for distros which use yum/dnf, packages which have a version with a nonzero epoch (that is, versions which start with a number followed by a colon like in the example above) must have the epoch included when specifying the version number. For example:\n\n\n\nvim-enhanced:\n  pkg.installed:\n    - version: 2:7.4.160-1.el7\n\n\n\n\n\nIn version 2015.8.9, an **ignore_epoch** argument has been added to [pkg.installed](#salt.states.pkg.installed \"salt.states.pkg.installed\"), [pkg.removed](#salt.states.pkg.installed \"salt.states.pkg.installed\"), and [pkg.purged](#salt.states.pkg.installed \"salt.states.pkg.installed\") states, which causes the epoch to be disregarded when the state checks to see if the desired version was installed. If **ignore_epoch** was not set to True, and instead of 2:7.4.160-1.el7 a version of 7.4.160-1.el7 were used, this state would report success since the actual installed version includes the epoch, and the specified version would not match.\n\n\n"
      },
      {
        "name": "pkgs",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "normalize",
        "defaultValue": "True",
        "isRequired": false,
        "description": "Normalize the package name by removing the architecture, if the architecture of the package is different from the architecture of the operating system. The ability to disable this behavior is useful for poorly-created packages which include the architecture as an actual part of the name, such as kernel modules which match a specific kernel version.\n\n\n\n\nNew in version 2015.8.0.\n\n\n"
      },
      {
        "name": "ignore_epoch",
        "defaultValue": "False",
        "isRequired": false,
        "description": "When a package version contains an non-zero epoch (e.g. 1:3.14.159-2.el7, and a specific version of a package is desired, set this option to True to ignore the epoch when comparing versions. This allows for the following SLS to be used:\n\n\n\n# Actual vim-enhanced version: 2:7.4.160-1.el7\nvim-enhanced:\n  pkg.removed:\n    - version: 7.4.160-1.el7\n    - ignore_epoch: True\n\n\n\n\n\nWithout this option set to True in the above example, the state would falsely report success since the actual installed version is 2:7.4.160-1.el7. Alternatively, this option can be left as False and the full version string (with epoch) can be specified in the SLS file:\n\n\n\nvim-enhanced:\n  pkg.removed:\n    - version: 2:7.4.160-1.el7\n\n\n\n\n\n\nNew in version 2015.8.9.\n\n\n"
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.pkg.uptodate",
    "description": "Verify that the system is completely up to date.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name has no functional value and is only used as a tracking\nreference"
      },
      {
        "name": "refresh",
        "defaultValue": "False",
        "isRequired": false,
        "description": "refresh the package database before checking for new upgrades"
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.pkgbuild.built",
    "description": "Ensure that the named package is built and exists in the named directory",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name to track the build, the name value is otherwise unused"
      },
      {
        "name": "runas",
        "defaultValue": null,
        "isRequired": true,
        "description": "The user to run the build process as"
      },
      {
        "name": "dest_dir",
        "defaultValue": null,
        "isRequired": true,
        "description": "The directory on the minion to place the built package(s)"
      },
      {
        "name": "spec",
        "defaultValue": null,
        "isRequired": true,
        "description": "The location of the spec file (used for rpms)"
      },
      {
        "name": "sources",
        "defaultValue": null,
        "isRequired": true,
        "description": "The list of package sources"
      },
      {
        "name": "tgt",
        "defaultValue": null,
        "isRequired": true,
        "description": "The target platform to run the build on"
      },
      {
        "name": "template",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Run the spec file through a templating engine\n\n\n\n\nChanged in version 2015.8.2: This argument is now optional, allowing for no templating engine to be used if none is desired.\n\n\n"
      },
      {
        "name": "deps",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Packages required to ensure that the named package is built\ncan be hosted on either the salt master server or on an HTTP\nor FTP server.  Both HTTPS and HTTP are supported as well as\ndownloading directly from Amazon S3 compatible URLs with both\npre-configured and automatic IAM credentials"
      },
      {
        "name": "env",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A dictionary of environment variables to be set prior to execution. Example:\n\n\n\n- env:\n    DEB_BUILD_OPTIONS: 'nocheck'\n\n\n\n\n\n\nWarning\n\nThe above illustrates a common PyYAML pitfall, that **yes**, **no**, **on**, **off**, **true**, and **false** are all loaded as boolean True and False values, and must be enclosed in quotes to be used as strings. More info on this (and other) PyYAML idiosyncrasies can be found [here](../../../topics/troubleshooting/yaml_idiosyncrasies.html#yaml-idiosyncrasies).\n\n\n"
      },
      {
        "name": "results",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The names of the expected rpms that will be built"
      },
      {
        "name": "force",
        "defaultValue": "False",
        "isRequired": false,
        "description": "If True, packages will be built even if they already exist in the dest_dir. This is useful when building a package for continuous or nightly package builds.\n\n\n\n\nNew in version 2015.8.2.\n\n\n"
      },
      {
        "name": "saltenv",
        "defaultValue": "'base'",
        "isRequired": false,
        "description": "The saltenv to use for files downloaded from the salt filesever"
      },
      {
        "name": "log_dir",
        "defaultValue": "'/var/log/salt/pkgbuild'",
        "isRequired": false,
        "description": "Root directory for log files created from the build. Logs will be organized by package name, version, OS release, and CPU architecture under this directory.\n\n\n\n\nNew in version 2015.8.2.\n\n\n"
      }
    ]
  },
  {
    "functionId": "salt.states.pkgbuild.repo",
    "description": "Make a package repository and optionally sign it and packages present",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The directory to find packages that will be in the repository"
      },
      {
        "name": "keyid",
        "defaultValue": "None",
        "isRequired": false,
        "description": "\n\n\nChanged in version 2016.3.0.\n\n\n\n\nOptional Key ID to use in signing packages and repository. Utilizes Public and Private keys associated with keyid which have been loaded into the minion's Pillar data.\n\nFor example, contents from a Pillar data file with named Public and Private keys as follows:\n\n\n\ngpg_pkg_priv_key: |\n  -----BEGIN PGP PRIVATE KEY BLOCK-----\n  Version: GnuPG v1\n\n  lQO+BFciIfQBCADAPCtzx7I5Rl32escCMZsPzaEKWe7bIX1em4KCKkBoX47IG54b\n  w82PCE8Y1jF/9Uk2m3RKVWp3YcLlc7Ap3gj6VO4ysvVz28UbnhPxsIkOlf2cq8qc\n  .\n  .\n  Ebe+8JCQTwqSXPRTzXmy/b5WXDeM79CkLWvuGpXFor76D+ECMRPv/rawukEcNptn\n  R5OmgHqvydEnO4pWbn8JzQO9YX/Us0SMHBVzLC8eIi5ZIopzalvX\n  =JvW8\n  -----END PGP PRIVATE KEY BLOCK-----\n\ngpg_pkg_priv_keyname: gpg_pkg_key.pem\n\ngpg_pkg_pub_key: |\n  -----BEGIN PGP PUBLIC KEY BLOCK-----\n  Version: GnuPG v1\n\n  mQENBFciIfQBCADAPCtzx7I5Rl32escCMZsPzaEKWe7bIX1em4KCKkBoX47IG54b\n  w82PCE8Y1jF/9Uk2m3RKVWp3YcLlc7Ap3gj6VO4ysvVz28UbnhPxsIkOlf2cq8qc\n  .\n  .\n  bYP7t5iwJmQzRMyFInYRt77wkJBPCpJc9FPNebL9vlZcN4zv0KQta+4alcWivvoP\n  4QIxE+/+trC6QRw2m2dHk6aAeq/J0Sc7ilZufwnNA71hf9SzRIwcFXMsLx4iLlki\n  inNqW9c=\n  =s1CX\n  -----END PGP PUBLIC KEY BLOCK-----\n\ngpg_pkg_pub_keyname: gpg_pkg_key.pub\n\n\n\n"
      },
      {
        "name": "env",
        "defaultValue": "None",
        "isRequired": false,
        "description": "\n\n\nChanged in version 2016.3.0.\n\n\n\n\nA dictionary of environment variables to be utilized in creating the repository. Example:\n\n\n\n- env:\n    OPTIONS: 'ask-passphrase'\n\n\n\n\n\n\nWarning\n\nThe above illustrates a common PyYAML pitfall, that **yes**, **no**, **on**, **off**, **true**, and **false** are all loaded as boolean True and False values, and must be enclosed in quotes to be used as strings. More info on this (and other) PyYAML idiosyncrasies can be found [here](../../../topics/troubleshooting/yaml_idiosyncrasies.html#yaml-idiosyncrasies).\n\nUse of OPTIONS on some platforms, for example: ask-passphrase, will require gpg-agent or similar to cache passphrases.\n\n\n\n\n\nNote\n\nThis parameter is not used for making yum repositories.\n\n\n"
      },
      {
        "name": "use_passphrase",
        "defaultValue": "False",
        "isRequired": false,
        "description": "\n\n\nNew in version 2016.3.0.\n\n\n\n\nUse a passphrase with the signing key presented in keyid. Passphrase is received from Pillar data which could be passed on the command line with pillar parameter. For example:\n\n\n\npillar='{ \"gpg_passphrase\" : \"my_passphrase\" }'\n\n\n\n"
      },
      {
        "name": "gnupghome",
        "defaultValue": "'/etc/salt/gpgkeys'",
        "isRequired": false,
        "description": "\n\n\nNew in version 2016.3.0.\n\n\n\n\nLocation where GPG related files are stored, used with 'keyid'\n"
      },
      {
        "name": "runas",
        "defaultValue": "'builder'",
        "isRequired": false,
        "description": "\n\n\nNew in version 2016.3.0.\n\n\n\n\nUser to create the repository as, and optionally sign packages.\n\n\n\n\nNote\n\nEnsure the user has correct permissions to any files and directories which are to be utilized.\n\n\n"
      },
      {
        "name": "timeout",
        "defaultValue": "15.0",
        "isRequired": false,
        "description": "\n\n\nNew in version 2016.3.4.\n\n\n\n\nTimeout in seconds to wait for the prompt for inputting the passphrase.\n"
      }
    ]
  },
  {
    "functionId": "salt.states.pkgrepo.absent",
    "description": "This function deletes the specified repo on the system, if it exists. It\nis essentially a wrapper around pkg.del_repo.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the package repo, as it would be referred to when running\nthe regular package manager commands."
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.pkgrepo.managed",
    "description": "This state manages software package repositories. Currently, yum, apt, and zypper repositories are supported.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "This value will be used in two ways: Firstly, it will be the repo ID,\nas seen in the entry in square brackets (e.g. [foo]) for a given\nrepo. Secondly, it will be the name of the file as stored in\n/etc/yum.repos.d (e.g. /etc/yum.repos.d/foo.conf)."
      },
      {
        "name": "ppa",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.portage_config.flags",
    "description": "Enforce the given flags on the given package or DEPEND atom.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the package or its DEPEND atom"
      },
      {
        "name": "use",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A list of USE flags"
      },
      {
        "name": "accept_keywords",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A list of keywords to accept. ~ARCH means current host arch, and will\nbe translated into a line without keywords"
      },
      {
        "name": "env",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A list of environment files"
      },
      {
        "name": "license",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A list of accepted licenses"
      },
      {
        "name": "properties",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A list of additional properties"
      },
      {
        "name": "unmask",
        "defaultValue": "False",
        "isRequired": false,
        "description": "A boolean to unmask the package"
      },
      {
        "name": "mask",
        "defaultValue": "False",
        "isRequired": false,
        "description": "A boolean to mask the package"
      }
    ]
  },
  {
    "functionId": "salt.states.portage_config.mod_init",
    "description": "Enforce a nice structure on the configuration files.",
    "arguments": [
      {
        "name": "low",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.ports.installed",
    "description": "Verify that the desired port is installed, and that it was compiled with\nthe desired options.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "options",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Make sure that the desired non-default options are set\n\n\n\n\nWarning\n\nAny build options not passed here assume the default values for the port, and are not just differences from the existing cached options from a previous make config.\n\n\n"
      }
    ]
  },
  {
    "functionId": "salt.states.postgres_cluster.absent",
    "description": "Ensure that the named cluster is absent",
    "arguments": [
      {
        "name": "version",
        "defaultValue": null,
        "isRequired": true,
        "description": "Version of the postgresql server of the cluster to remove"
      },
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the cluster to remove\n\n\n\n\nNew in version 2015.XX.\n\n\n"
      }
    ]
  },
  {
    "functionId": "salt.states.postgres_cluster.present",
    "description": "Ensure that the named cluster is present with the specified properties.\nFor more information about all of these options see man pg_createcluster(1)",
    "arguments": [
      {
        "name": "version",
        "defaultValue": null,
        "isRequired": true,
        "description": "Version of the postgresql cluster"
      },
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the cluster"
      },
      {
        "name": "port",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Cluster port"
      },
      {
        "name": "encoding",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The character encoding scheme to be used in this database"
      },
      {
        "name": "locale",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Locale with which to create cluster"
      },
      {
        "name": "datadir",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Where the cluster is stored\n\n\n\n\nNew in version 2015.XX.\n\n\n"
      }
    ]
  },
  {
    "functionId": "salt.states.postgres_database.absent",
    "description": "Ensure that the named database is absent",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the database to remove"
      },
      {
        "name": "user",
        "defaultValue": "None",
        "isRequired": false,
        "description": "System user all operations should be performed on behalf of\n\n\n\n\nNew in version 0.17.0.\n\n\n"
      },
      {
        "name": "maintenance_db",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "db_password",
        "defaultValue": "None",
        "isRequired": false,
        "description": "user password if any password for a specified user"
      },
      {
        "name": "db_host",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Database host if different from config or default"
      },
      {
        "name": "db_port",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Database port if different from config or default"
      },
      {
        "name": "db_user",
        "defaultValue": "None",
        "isRequired": false,
        "description": "database username if different from config or default"
      }
    ]
  },
  {
    "functionId": "salt.states.postgres_database.present",
    "description": "Ensure that the named database is present with the specified properties.\nFor more information about all of these options see man createdb(1)",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the database to manage"
      },
      {
        "name": "tablespace",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Default tablespace for the database"
      },
      {
        "name": "encoding",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The character encoding scheme to be used in this database"
      },
      {
        "name": "lc_collate",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The LC_COLLATE setting to be used in this database"
      },
      {
        "name": "lc_ctype",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The LC_CTYPE setting to be used in this database"
      },
      {
        "name": "owner",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The username of the database owner"
      },
      {
        "name": "owner_recurse",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Recurse owner change to all relations in the database"
      },
      {
        "name": "template",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The template database from which to build this database"
      },
      {
        "name": "user",
        "defaultValue": "None",
        "isRequired": false,
        "description": "System user all operations should be performed on behalf of"
      },
      {
        "name": "maintenance_db",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "db_password",
        "defaultValue": "None",
        "isRequired": false,
        "description": "user password if any password for a specified user"
      },
      {
        "name": "db_host",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Database host if different from config or default"
      },
      {
        "name": "db_port",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Database port if different from config or default\n\n\n\n\nNew in version 0.17.0.\n\n\n"
      },
      {
        "name": "db_user",
        "defaultValue": "None",
        "isRequired": false,
        "description": "database username if different from config or default"
      }
    ]
  },
  {
    "functionId": "salt.states.postgres_extension.absent",
    "description": "Ensure that the named extension is absent.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Extension name of the extension to remove"
      },
      {
        "name": "if_exists",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Add if exist slug"
      },
      {
        "name": "restrict",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Add restrict slug"
      },
      {
        "name": "cascade",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Drop on cascade"
      },
      {
        "name": "user",
        "defaultValue": "None",
        "isRequired": false,
        "description": "System user all operations should be performed on behalf of"
      },
      {
        "name": "maintenance_db",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Database to act on"
      },
      {
        "name": "db_user",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Database username if different from config or default"
      },
      {
        "name": "db_password",
        "defaultValue": "None",
        "isRequired": false,
        "description": "User password if any password for a specified user"
      },
      {
        "name": "db_host",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Database host if different from config or default"
      },
      {
        "name": "db_port",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Database port if different from config or default"
      }
    ]
  },
  {
    "functionId": "salt.states.postgres_extension.present",
    "description": "Ensure that the named extension is present.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the extension to be installed"
      },
      {
        "name": "if_not_exists",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Add an IF NOT EXISTS parameter to the DDL statement"
      },
      {
        "name": "schema",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Schema to install the extension into"
      },
      {
        "name": "ext_version",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Version to install"
      },
      {
        "name": "from_version",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Old extension version if already installed"
      },
      {
        "name": "user",
        "defaultValue": "None",
        "isRequired": false,
        "description": "System user all operations should be performed on behalf of"
      },
      {
        "name": "maintenance_db",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Database to act on"
      },
      {
        "name": "db_user",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Database username if different from config or default"
      },
      {
        "name": "db_password",
        "defaultValue": "None",
        "isRequired": false,
        "description": "User password if any password for a specified user"
      },
      {
        "name": "db_host",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Database host if different from config or default"
      },
      {
        "name": "db_port",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Database port if different from config or default"
      }
    ]
  },
  {
    "functionId": "salt.states.postgres_group.absent",
    "description": "Ensure that the named group is absent",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The groupname of the group to remove"
      },
      {
        "name": "user",
        "defaultValue": "None",
        "isRequired": false,
        "description": "System user all operations should be performed on behalf of\n\n\n\n\nNew in version 0.17.0.\n\n\n"
      },
      {
        "name": "maintenance_db",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "db_password",
        "defaultValue": "None",
        "isRequired": false,
        "description": "user password if any password for a specified user"
      },
      {
        "name": "db_host",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Database host if different from config or default"
      },
      {
        "name": "db_port",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Database port if different from config or default"
      },
      {
        "name": "db_user",
        "defaultValue": "None",
        "isRequired": false,
        "description": "database username if different from config or defaul"
      }
    ]
  },
  {
    "functionId": "salt.states.postgres_group.present",
    "description": "Ensure that the named group is present with the specified privileges\nPlease note that the user/group notion in postgresql is just abstract, we\nhave roles, where users can be seen as roles with the LOGIN privilege\nand groups the others.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the group to manage"
      },
      {
        "name": "createdb",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Is the group allowed to create databases?"
      },
      {
        "name": "createroles",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Is the group allowed to create other roles/users"
      },
      {
        "name": "createuser",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Alias to create roles, and history problem, in pgsql normally\ncreateuser == superuser"
      },
      {
        "name": "encrypted",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Should the password be encrypted in the system catalog?"
      },
      {
        "name": "superuser",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Should the new group be a \"superuser\""
      },
      {
        "name": "inherit",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Should the group inherit permissions"
      },
      {
        "name": "login",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Should the group have login perm"
      },
      {
        "name": "replication",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Should the new group be allowed to initiate streaming replication"
      },
      {
        "name": "password",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The group's password It can be either a plain string or a md5 postgresql hashed password:\n\n\n\n'md5{MD5OF({password}{role}}'\n\n\n\n\n\nIf encrypted is None or True, the password will be automatically encrypted to the previous format if it is not already done.\n"
      },
      {
        "name": "refresh_password",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Password refresh flag\n\nBoolean attribute to specify whether to password comparison check should be performed.\n\nIf refresh_password is True, the password will be automatically updated without extra password change check.\n\nThis behaviour makes it possible to execute in environments without superuser access available, e.g. Amazon RDS for PostgreSQL\n"
      },
      {
        "name": "groups",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A string of comma separated groups the group should be in"
      },
      {
        "name": "user",
        "defaultValue": "None",
        "isRequired": false,
        "description": "System user all operations should be performed on behalf of\n\n\n\n\nNew in version 0.17.0.\n\n\n"
      },
      {
        "name": "maintenance_db",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "db_password",
        "defaultValue": "None",
        "isRequired": false,
        "description": "user password if any password for a specified user"
      },
      {
        "name": "db_host",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Database host if different from config or default"
      },
      {
        "name": "db_port",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Database port if different from config or default"
      },
      {
        "name": "db_user",
        "defaultValue": "None",
        "isRequired": false,
        "description": "database username if different from config or default"
      }
    ]
  },
  {
    "functionId": "salt.states.postgres_initdb.present",
    "description": "Initialize the PostgreSQL data directory",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the directory to initialize"
      },
      {
        "name": "user",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The database superuser name"
      },
      {
        "name": "password",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The password to set for the postgres user"
      },
      {
        "name": "auth",
        "defaultValue": "'password'",
        "isRequired": false,
        "description": "The default authentication method for local connections"
      },
      {
        "name": "encoding",
        "defaultValue": "'UTF8'",
        "isRequired": false,
        "description": "The default encoding for new databases"
      },
      {
        "name": "locale",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The default locale for new databases"
      },
      {
        "name": "runas",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The system user the operation should be performed on behalf of"
      }
    ]
  },
  {
    "functionId": "salt.states.postgres_language.absent",
    "description": "Ensure that a named language is absent in the specified\ndatabase.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the language to remove"
      },
      {
        "name": "maintenance_db",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the database in which the language is to be installed"
      },
      {
        "name": "user",
        "defaultValue": "None",
        "isRequired": false,
        "description": "System user all operations should be performed on behalf of"
      },
      {
        "name": "db_password",
        "defaultValue": "None",
        "isRequired": false,
        "description": "user password if any password for a specified user"
      },
      {
        "name": "db_host",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Database host if different from config or default"
      },
      {
        "name": "db_port",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Database port if different from config or default"
      },
      {
        "name": "db_user",
        "defaultValue": "None",
        "isRequired": false,
        "description": "database username if different from config or default"
      }
    ]
  },
  {
    "functionId": "salt.states.postgres_language.present",
    "description": "Ensure that a named language is present in the specified\ndatabase.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the language to install"
      },
      {
        "name": "maintenance_db",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the database in which the language is to be installed"
      },
      {
        "name": "user",
        "defaultValue": "None",
        "isRequired": false,
        "description": "System user all operations should be performed on behalf of"
      },
      {
        "name": "db_password",
        "defaultValue": "None",
        "isRequired": false,
        "description": "user password if any password for a specified user"
      },
      {
        "name": "db_host",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Database host if different from config or default"
      },
      {
        "name": "db_port",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Database port if different from config or default"
      },
      {
        "name": "db_user",
        "defaultValue": "None",
        "isRequired": false,
        "description": "database username if different from config or default"
      }
    ]
  },
  {
    "functionId": "salt.states.postgres_privileges.absent",
    "description": "Revoke the requested privilege(s) on the specificed object(s)",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Name of the role whose privileges should be revoked"
      },
      {
        "name": "object_name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Name of the object on which the revoke is to be performed"
      },
      {
        "name": "object_type",
        "defaultValue": null,
        "isRequired": true,
        "description": "The object type, which can be one of the following:\n\n*   table\n*   sequence\n*   schema\n*   tablespace\n*   language\n*   database\n*   group\n"
      },
      {
        "name": "privileges",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Comma separated list of privileges to revoke, from the list below:\n\n*   INSERT\n*   CREATE\n*   TRUNCATE\n*   CONNECT\n*   TRIGGER\n*   SELECT\n*   USAGE\n*   TEMPORARY\n*   UPDATE\n*   EXECUTE\n*   REFERENCES\n*   DELETE\n*   ALL\n\n\n\n\nnote:privileges should not be set when revoking group membership\n\n\n\n"
      },
      {
        "name": "prepend",
        "defaultValue": "'public'",
        "isRequired": false,
        "description": "Table and Sequence object types live under a schema so this should be\nprovided if the object is not under the default public schema"
      },
      {
        "name": "maintenance_db",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The name of the database in which the language is to be installed"
      },
      {
        "name": "user",
        "defaultValue": "None",
        "isRequired": false,
        "description": "System user all operations should be performed on behalf of"
      },
      {
        "name": "db_password",
        "defaultValue": "None",
        "isRequired": false,
        "description": "user password if any password for a specified user"
      },
      {
        "name": "db_host",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Database host if different from config or default"
      },
      {
        "name": "db_port",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Database port if different from config or default"
      },
      {
        "name": "db_user",
        "defaultValue": "None",
        "isRequired": false,
        "description": "database username if different from config or default"
      }
    ]
  },
  {
    "functionId": "salt.states.postgres_privileges.present",
    "description": "Grant the requested privilege(s) on the specified object to a role",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Name of the role to which privileges should be granted"
      },
      {
        "name": "object_name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Name of the object on which the grant is to be performed.\n'ALL' may be used for objects of type 'table' or 'sequence'."
      },
      {
        "name": "object_type",
        "defaultValue": null,
        "isRequired": true,
        "description": "The object type, which can be one of the following:\n\n*   table\n*   sequence\n*   schema\n*   tablespace\n*   language\n*   database\n*   group\n"
      },
      {
        "name": "privileges",
        "defaultValue": "None",
        "isRequired": false,
        "description": "List of privileges to grant, from the list below:\n\n*   INSERT\n*   CREATE\n*   TRUNCATE\n*   CONNECT\n*   TRIGGER\n*   SELECT\n*   USAGE\n*   TEMPORARY\n*   UPDATE\n*   EXECUTE\n*   REFERENCES\n*   DELETE\n*   ALL\n\n\n\n\nnote:privileges should not be set when granting group membership\n\n\n\n"
      },
      {
        "name": "grant_option",
        "defaultValue": "None",
        "isRequired": false,
        "description": "If grant_option is set to True, the recipient of the privilege can\nin turn grant it to others"
      },
      {
        "name": "prepend",
        "defaultValue": "'public'",
        "isRequired": false,
        "description": "Table and Sequence object types live under a schema so this should be\nprovided if the object is not under the default public schema"
      },
      {
        "name": "maintenance_db",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The name of the database in which the language is to be installed"
      },
      {
        "name": "user",
        "defaultValue": "None",
        "isRequired": false,
        "description": "System user all operations should be performed on behalf of"
      },
      {
        "name": "db_password",
        "defaultValue": "None",
        "isRequired": false,
        "description": "user password if any password for a specified user"
      },
      {
        "name": "db_host",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Database host if different from config or default"
      },
      {
        "name": "db_port",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Database port if different from config or default"
      },
      {
        "name": "db_user",
        "defaultValue": "None",
        "isRequired": false,
        "description": "database username if different from config or default"
      }
    ]
  },
  {
    "functionId": "salt.states.postgres_schema.absent",
    "description": "Ensure that the named schema is absent.",
    "arguments": [
      {
        "name": "dbname",
        "defaultValue": null,
        "isRequired": true,
        "description": "The database's name will work on"
      },
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the schema to remove"
      },
      {
        "name": "db_user",
        "defaultValue": "None",
        "isRequired": false,
        "description": "database username if different from config or default"
      },
      {
        "name": "db_password",
        "defaultValue": "None",
        "isRequired": false,
        "description": "user password if any password for a specified user"
      },
      {
        "name": "db_host",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Database host if different from config or default"
      },
      {
        "name": "db_port",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Database port if different from config or default"
      }
    ]
  },
  {
    "functionId": "salt.states.postgres_schema.present",
    "description": "Ensure that the named schema is present in the database.",
    "arguments": [
      {
        "name": "dbname",
        "defaultValue": null,
        "isRequired": true,
        "description": "The database's name will work on"
      },
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the schema to manage"
      },
      {
        "name": "owner",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The database user that will be the owner of the schema"
      },
      {
        "name": "db_user",
        "defaultValue": "None",
        "isRequired": false,
        "description": "database username if different from config or default"
      },
      {
        "name": "db_password",
        "defaultValue": "None",
        "isRequired": false,
        "description": "user password if any password for a specified user"
      },
      {
        "name": "db_host",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Database host if different from config or default"
      },
      {
        "name": "db_port",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Database port if different from config or default"
      }
    ]
  },
  {
    "functionId": "salt.states.postgres_tablespace.absent",
    "description": "Ensure that the named tablespace is absent.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the tablespace to remove"
      },
      {
        "name": "user",
        "defaultValue": "None",
        "isRequired": false,
        "description": "System user all operations should be performed on behalf of"
      },
      {
        "name": "maintenance_db",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Database to act on"
      },
      {
        "name": "db_user",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Database username if different from config or defaul"
      },
      {
        "name": "db_password",
        "defaultValue": "None",
        "isRequired": false,
        "description": "User password if any password for a specified user"
      },
      {
        "name": "db_host",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Database host if different from config or default"
      },
      {
        "name": "db_port",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Database port if different from config or default"
      }
    ]
  },
  {
    "functionId": "salt.states.postgres_tablespace.present",
    "description": "Ensure that the named tablespace is present with the specified properties.\nFor more information about all of these options see man\n``create_tablespace``(7).",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the tablespace to create/manage."
      },
      {
        "name": "directory",
        "defaultValue": null,
        "isRequired": true,
        "description": "The directory where the tablespace will be located, must already exist"
      },
      {
        "name": "options",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A dictionary of options to specify for the tablespace. Currently, the only tablespace options supported are seq_page_cost and random_page_cost. Default values are shown in the example below:\n\n\n\nmy_space:\n  postgres_tablespace.present:\n    - directory: /srv/my_tablespace\n    - options:\n        seq_page_cost: 1.0\n        random_page_cost: 4.0\n\n\n\n"
      },
      {
        "name": "owner",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The database user that will be the owner of the tablespace.\nDefaults to the user executing the command (i.e. the user option)"
      },
      {
        "name": "user",
        "defaultValue": "None",
        "isRequired": false,
        "description": "System user all operations should be performed on behalf of"
      },
      {
        "name": "maintenance_db",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Database to act on"
      },
      {
        "name": "db_password",
        "defaultValue": "None",
        "isRequired": false,
        "description": "User password if any password for a specified user"
      },
      {
        "name": "db_host",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Database host if different from config or default"
      },
      {
        "name": "db_port",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Database port if different from config or default"
      },
      {
        "name": "db_user",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Database username if different from config or default"
      }
    ]
  },
  {
    "functionId": "salt.states.postgres_user.absent",
    "description": "Ensure that the named user is absent",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The username of the user to remove"
      },
      {
        "name": "user",
        "defaultValue": "None",
        "isRequired": false,
        "description": "System user all operations should be performed on behalf of\n\n\n\n\nNew in version 0.17.0.\n\n\n"
      },
      {
        "name": "maintenance_db",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "db_password",
        "defaultValue": "None",
        "isRequired": false,
        "description": "user password if any password for a specified user"
      },
      {
        "name": "db_host",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Database host if different from config or default"
      },
      {
        "name": "db_port",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Database port if different from config or default"
      },
      {
        "name": "db_user",
        "defaultValue": "None",
        "isRequired": false,
        "description": "database username if different from config or default"
      }
    ]
  },
  {
    "functionId": "salt.states.postgres_user.present",
    "description": "Ensure that the named user is present with the specified privileges\nPlease note that the user/group notion in postgresql is just abstract, we\nhave roles, where users can be seens as roles with the LOGIN privilege\nand groups the others.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the system user to manage."
      },
      {
        "name": "createdb",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Is the user allowed to create databases?"
      },
      {
        "name": "createroles",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Is the user allowed to create other users?"
      },
      {
        "name": "createuser",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Alias to create roles"
      },
      {
        "name": "encrypted",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Should the password be encrypted in the system catalog?"
      },
      {
        "name": "superuser",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Should the new user be a \"superuser\""
      },
      {
        "name": "replication",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Should the new user be allowed to initiate streaming replication"
      },
      {
        "name": "inherit",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Should the group inherit permissions"
      },
      {
        "name": "login",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Should the group have login perm"
      },
      {
        "name": "password",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The system user's password. It can be either a plain string or a md5 postgresql hashed password:\n\n\n\n'md5{MD5OF({password}{role}}'\n\n\n\n\n\nIf encrypted is None or True, the password will be automatically encrypted to the previous format if it is not already done.\n"
      },
      {
        "name": "default_password",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "refresh_password",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Password refresh flag\n\nBoolean attribute to specify whether to password comparison check should be performed.\n\nIf refresh_password is True, the password will be automatically updated without extra password change check.\n\nThis behaviour makes it possible to execute in environments without superuser access available, e.g. Amazon RDS for PostgreSQL\n"
      },
      {
        "name": "groups",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A string of comma separated groups the user should be in"
      },
      {
        "name": "user",
        "defaultValue": "None",
        "isRequired": false,
        "description": "System user all operations should be performed on behalf of\n\n\n\n\nNew in version 0.17.0.\n\n\n"
      },
      {
        "name": "maintenance_db",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "db_password",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Postgres user's password, if any password, for a specified db_user."
      },
      {
        "name": "db_host",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Postgres database host, if different from config or default."
      },
      {
        "name": "db_port",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Postgres database port, if different from config or default."
      },
      {
        "name": "db_user",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Postres database username, if different from config or default."
      }
    ]
  },
  {
    "functionId": "salt.states.powerpath.license_absent",
    "description": "Ensures that the specified PowerPath license key is absent\non the host.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The license key to ensure is absent"
      }
    ]
  },
  {
    "functionId": "salt.states.powerpath.license_present",
    "description": "Ensures that the specified PowerPath license key is present\non the host.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The license key to ensure is present"
      }
    ]
  },
  {
    "functionId": "salt.states.probes.managed",
    "description": "Ensure the networks device is configured as specified in the state SLS file.\nProbes not specified will be removed, while probes not confiured as expected will trigger config updates.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "probes",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "defaults",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.process.absent",
    "description": "Ensures that the named command is not running.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The pattern to match."
      },
      {
        "name": "user",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The user process belongs"
      },
      {
        "name": "signal",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Signal to send to the process(es)."
      }
    ]
  },
  {
    "functionId": "salt.states.proxy.managed",
    "description": "Manages proxy settings for this mininon",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The proxy server to use"
      },
      {
        "name": "port",
        "defaultValue": null,
        "isRequired": true,
        "description": "The port used by the proxy server"
      },
      {
        "name": "services",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A list of the services that should use the given proxy settings, valid services include http, https and ftp.\nIf no service is given all of the valid services will be used."
      },
      {
        "name": "user",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The username to use for the proxy server if required"
      },
      {
        "name": "password",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The password to use if required by the server"
      },
      {
        "name": "bypass_domains",
        "defaultValue": "None",
        "isRequired": false,
        "description": "An array of the domains that should bypass the proxy"
      },
      {
        "name": "network_service",
        "defaultValue": "'Ethernet'",
        "isRequired": false,
        "description": "The network service to apply the changes to, this only necessary on\nmacOS"
      }
    ]
  },
  {
    "functionId": "salt.states.pushover.post_message",
    "description": "Send a message to a PushOver channel.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The unique name for this event."
      },
      {
        "name": "user",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The user or group of users to send the message to. Must be ID of user, not name\nor email address."
      },
      {
        "name": "device",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "message",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The message that is to be sent to the PushOver channel."
      },
      {
        "name": "title",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "priority",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "expire",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "retry",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "sound",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "api_version",
        "defaultValue": "1",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "token",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.pyenv.absent",
    "description": "Verify that the specified python is not installed with pyenv. pyenv\nis installed if necessary.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The version of python to uninstall"
      },
      {
        "name": "user",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.pyenv.install_pyenv",
    "description": "Install pyenv if not installed. Allows you to require pyenv be installed\nprior to installing the plugins. Useful if you want to install pyenv\nplugins via the git or file modules and need them installed before\ninstalling any rubies.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "user",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.pyenv.installed",
    "description": "Verify that the specified python is installed with pyenv. pyenv is\ninstalled if necessary.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The version of python to install"
      },
      {
        "name": "default",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Whether to make this python the default."
      },
      {
        "name": "user",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.pyrax_queues.absent",
    "description": "Ensure the named Rackspace queue is deleted.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Name of the Rackspace queue."
      },
      {
        "name": "provider",
        "defaultValue": null,
        "isRequired": true,
        "description": "Salt Cloud provider"
      }
    ]
  },
  {
    "functionId": "salt.states.pyrax_queues.present",
    "description": "Ensure the RackSpace queue exists.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Name of the Rackspace queue."
      },
      {
        "name": "provider",
        "defaultValue": null,
        "isRequired": true,
        "description": "Salt Cloud Provider"
      }
    ]
  },
  {
    "functionId": "salt.states.quota.mode",
    "description": "Set the quota for the system",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The filesystem to set the quota mode on"
      },
      {
        "name": "mode",
        "defaultValue": null,
        "isRequired": true,
        "description": "Whether the quota system is on or off"
      },
      {
        "name": "quotatype",
        "defaultValue": null,
        "isRequired": true,
        "description": "Must be user or group"
      }
    ]
  },
  {
    "functionId": "salt.states.rabbitmq_cluster.join",
    "description": "This function is an alias of joined.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Irrelevant, not used (recommended: [user@host](mailto:user%40host))"
      },
      {
        "name": "host",
        "defaultValue": null,
        "isRequired": true,
        "description": "The host of node to join to"
      },
      {
        "name": "user",
        "defaultValue": "'rabbit'",
        "isRequired": false,
        "description": "The user of node to join to (default: rabbit)"
      },
      {
        "name": "ram_node",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Join node as a RAM node"
      },
      {
        "name": "runas",
        "defaultValue": "'root'",
        "isRequired": false,
        "description": "The user to run the rabbitmq command as"
      }
    ]
  },
  {
    "functionId": "salt.states.rabbitmq_cluster.joined",
    "description": "Ensure the current node joined to a cluster with node user@host",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Irrelevant, not used (recommended: [user@host](mailto:user%40host))"
      },
      {
        "name": "host",
        "defaultValue": null,
        "isRequired": true,
        "description": "The host of node to join to"
      },
      {
        "name": "user",
        "defaultValue": "'rabbit'",
        "isRequired": false,
        "description": "The user of node to join to (default: rabbit)"
      },
      {
        "name": "ram_node",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Join node as a RAM node"
      },
      {
        "name": "runas",
        "defaultValue": "'root'",
        "isRequired": false,
        "description": "The user to run the rabbitmq command as"
      }
    ]
  },
  {
    "functionId": "salt.states.rabbitmq_plugin.disabled",
    "description": "Ensure the RabbitMQ plugin is disabled.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the plugin"
      },
      {
        "name": "runas",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The user to run the rabbitmq-plugin command as"
      }
    ]
  },
  {
    "functionId": "salt.states.rabbitmq_plugin.enabled",
    "description": "Ensure the RabbitMQ plugin is enabled.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the plugin"
      },
      {
        "name": "runas",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The user to run the rabbitmq-plugin command as"
      }
    ]
  },
  {
    "functionId": "salt.states.rabbitmq_policy.absent",
    "description": "Ensure the named policy is absent",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the policy to remove"
      },
      {
        "name": "vhost",
        "defaultValue": "'/'",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "runas",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Name of the user to run the command as"
      }
    ]
  },
  {
    "functionId": "salt.states.rabbitmq_policy.present",
    "description": "Ensure the RabbitMQ policy exists.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Policy name"
      },
      {
        "name": "pattern",
        "defaultValue": null,
        "isRequired": true,
        "description": "A regex of queues to apply the policy to"
      },
      {
        "name": "definition",
        "defaultValue": null,
        "isRequired": true,
        "description": "A json dict describing the policy"
      },
      {
        "name": "priority",
        "defaultValue": "0",
        "isRequired": false,
        "description": "Priority (defaults to 0)"
      },
      {
        "name": "vhost",
        "defaultValue": "'/'",
        "isRequired": false,
        "description": "Virtual host to apply to (defaults to '/')"
      },
      {
        "name": "runas",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Name of the user to run the command as"
      }
    ]
  },
  {
    "functionId": "salt.states.rabbitmq_user.absent",
    "description": "Ensure the named user is absent",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the user to remove"
      },
      {
        "name": "runas",
        "defaultValue": "None",
        "isRequired": false,
        "description": "User to run the command"
      }
    ]
  },
  {
    "functionId": "salt.states.rabbitmq_user.present",
    "description": "Ensure the RabbitMQ user exists.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "User name"
      },
      {
        "name": "password",
        "defaultValue": "None",
        "isRequired": false,
        "description": "User's password, if one needs to be set"
      },
      {
        "name": "force",
        "defaultValue": "False",
        "isRequired": false,
        "description": "If user exists, forcibly change the password"
      },
      {
        "name": "tags",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Optional list of tags for the user"
      },
      {
        "name": "perms",
        "defaultValue": "()",
        "isRequired": false,
        "description": "A list of dicts with vhost keys and 3-tuple values"
      },
      {
        "name": "runas",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Name of the user to run the command"
      }
    ]
  },
  {
    "functionId": "salt.states.rabbitmq_vhost.absent",
    "description": "Ensure the RabbitMQ Virtual Host is absent",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Name of the Virtual Host to remove"
      }
    ]
  },
  {
    "functionId": "salt.states.rabbitmq_vhost.present",
    "description": "Ensure the RabbitMQ VHost exists.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "VHost name"
      }
    ]
  },
  {
    "functionId": "salt.states.rbenv.absent",
    "description": "Verify that the specified ruby is not installed with rbenv. Rbenv\nis installed if necessary.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The version of ruby to uninstall"
      },
      {
        "name": "user",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.rbenv.install_rbenv",
    "description": "Install rbenv if not installed. Allows you to require rbenv be installed\nprior to installing the plugins. Useful if you want to install rbenv\nplugins via the git or file modules and need them installed before\ninstalling any rubies.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "user",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.rbenv.installed",
    "description": "Verify that the specified ruby is installed with rbenv. Rbenv is\ninstalled if necessary.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The version of ruby to install"
      },
      {
        "name": "default",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Whether to make this ruby the default."
      },
      {
        "name": "user",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.rdp.disabled",
    "description": "Disable the RDP service",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.rdp.enabled",
    "description": "Enable the RDP service and make sure access to the RDP\nport is allowed in the firewall configuration",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.redismod.absent",
    "description": "Ensure key absent from redis",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Key to ensure absent from redis"
      },
      {
        "name": "keys",
        "defaultValue": "None",
        "isRequired": false,
        "description": "list of keys to ensure absent, name will be ignored if this is used"
      },
      {
        "name": "**connection_args",
        "defaultValue": "**connection_args",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.redismod.slaveof",
    "description": "Set this redis instance as a slave.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Master to make this a slave of"
      },
      {
        "name": "sentinel_host",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Ip of the sentinel to check for the master"
      },
      {
        "name": "sentinel_port",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Port of the sentinel to check for the master"
      },
      {
        "name": "sentinel_password",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "**connection_args",
        "defaultValue": "**connection_args",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.redismod.string",
    "description": "Ensure that the key exists in redis with the value specified",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Redis key to manage"
      },
      {
        "name": "value",
        "defaultValue": null,
        "isRequired": true,
        "description": "Data to persist in key"
      },
      {
        "name": "expire",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Sets time to live for key in seconds"
      },
      {
        "name": "expireat",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Sets expiration time for key via UNIX timestamp, overrides expire"
      },
      {
        "name": "**connection_args",
        "defaultValue": "**connection_args",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.reg.absent",
    "description": "Ensure a registry value is removed. To remove a key use key_absent.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "vname",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "use_32bit_registry",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.reg.key_absent",
    "description": "Ensure a registry key is removed. This will remove a key and all value\nentries it contains. It will fail if the key contains subkeys.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "use_32bit_registry",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.reg.present",
    "description": "Ensure a registry key or value is present.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "vname",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "vdata",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "vtype",
        "defaultValue": "'REG_SZ'",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "use_32bit_registry",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.rsync.synchronized",
    "description": "Guarantees that the source directory is always copied to the target.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Name of the target directory."
      },
      {
        "name": "source",
        "defaultValue": null,
        "isRequired": true,
        "description": "Source directory."
      },
      {
        "name": "delete",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Delete extraneous files from the destination dirs (True or False)"
      },
      {
        "name": "force",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Force deletion of dirs even if not empty"
      },
      {
        "name": "update",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Skip files that are newer on the receiver (True or False)"
      },
      {
        "name": "passwordfile",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Read daemon-access password from the file (path)"
      },
      {
        "name": "exclude",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Exclude files, that matches pattern."
      },
      {
        "name": "excludefrom",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Read exclude patterns from the file (path)"
      },
      {
        "name": "prepare",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Create destination directory if it does not exists."
      },
      {
        "name": "dryrun",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Perform a trial run with no changes made. Is the same as doing test=True\n\n\n\n\nNew in version 2016.3.1.\n\n\n"
      }
    ]
  },
  {
    "functionId": "salt.states.rvm.gemset_present",
    "description": "Verify that the gemset is present.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the gemset."
      },
      {
        "name": "ruby",
        "defaultValue": "'default'",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "user",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.rvm.installed",
    "description": "Verify that the specified ruby is installed with RVM. RVM is\ninstalled when necessary.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The version of ruby to install"
      },
      {
        "name": "default",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Whether to make this ruby the default."
      },
      {
        "name": "user",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.salt_proxy.configure_proxy",
    "description": "Create the salt proxy file and start the proxy process\nif required",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "proxyname",
        "defaultValue": "'p8000'",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "start",
        "defaultValue": "True",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.saltmod.function",
    "description": "Execute a single module function on a remote minion via salt or salt-ssh",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the function to run, aka cmd.run or pkg.install"
      },
      {
        "name": "tgt",
        "defaultValue": null,
        "isRequired": true,
        "description": "The target specification, aka '*' for all minions"
      },
      {
        "name": "ssh",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Set to True to use the ssh client instead of the standard salt client"
      },
      {
        "name": "tgt_type",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "expr_form",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "ret",
        "defaultValue": "''",
        "isRequired": false,
        "description": "Optionally set a single or a list of returners to use"
      },
      {
        "name": "expect_minions",
        "defaultValue": "False",
        "isRequired": false,
        "description": "An optional boolean for failing if some minions do not respond"
      },
      {
        "name": "fail_minions",
        "defaultValue": "None",
        "isRequired": false,
        "description": "An optional list of targeted minions where failure is an option"
      },
      {
        "name": "fail_function",
        "defaultValue": "None",
        "isRequired": false,
        "description": "An optional string that points to a salt module that returns True or False\nbased on the returned data dict for individual minions"
      },
      {
        "name": "arg",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The list of arguments to pass into the function"
      },
      {
        "name": "kwarg",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The dict (not a list) of keyword arguments to pass into the function"
      },
      {
        "name": "timeout",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "batch",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.saltmod.runner",
    "description": "Execute a runner module on the master",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the function to run"
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.saltmod.state",
    "description": "Invoke a state run on a given target",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "An arbitrary name used to track the state execution"
      },
      {
        "name": "tgt",
        "defaultValue": null,
        "isRequired": true,
        "description": "The target specification for the state run.\n\nMasterless support: When running on a masterless minion, the tgt is ignored and will always be the local minion.\n"
      },
      {
        "name": "ssh",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Set to True to use the ssh client instead of the standard salt client"
      },
      {
        "name": "tgt_type",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "expr_form",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "ret",
        "defaultValue": "''",
        "isRequired": false,
        "description": "Optionally set a single or a list of returners to use"
      },
      {
        "name": "highstate",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Defaults to None, if set to True the target systems will ignore any\nsls references specified in the sls option and call state.highstate\non the targeted minions"
      },
      {
        "name": "sls",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A group of sls files to execute. This can be defined as a single string\ncontaining a single sls file, or a list of sls files"
      },
      {
        "name": "top",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Should be the name of a top file. If set state.top is called with this\ntop file instead of state.sls."
      },
      {
        "name": "saltenv",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The default salt environment to pull sls files from"
      },
      {
        "name": "test",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Pass test=true through to the state function"
      },
      {
        "name": "pillar",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Pass the pillar kwarg through to the state function"
      },
      {
        "name": "expect_minions",
        "defaultValue": "False",
        "isRequired": false,
        "description": "An optional boolean for failing if some minions do not respond"
      },
      {
        "name": "fail_minions",
        "defaultValue": "None",
        "isRequired": false,
        "description": "An optional list of targeted minions where failure is an option"
      },
      {
        "name": "allow_fail",
        "defaultValue": "0",
        "isRequired": false,
        "description": "Pass in the number of minions to allow for failure before setting\nthe result of the execution to False"
      },
      {
        "name": "concurrent",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Allow multiple state runs to occur at once.\n\nWARNING: This flag is potentially dangerous. It is designed for use when multiple state runs can safely be run at the same Do not use this flag for performance optimization.\n"
      },
      {
        "name": "timeout",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "batch",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Execute the command [in batches](../../../topics/targeting/batch.html#targeting-batch). E.g.: 10%.\n\n\n\n\nNew in version 2016.3.0.\n\n\n"
      },
      {
        "name": "queue",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Pass queue=true through to the state function"
      },
      {
        "name": "orchestration_jid",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.saltmod.wait_for_event",
    "description": "Watch Salt's event bus and block until a condition is met",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "An event tag to watch for; supports Reactor-style globbing."
      },
      {
        "name": "id_list",
        "defaultValue": null,
        "isRequired": true,
        "description": "A list of event identifiers to watch for -- usually the minion ID. Each\ntime an event tag is matched the event data is inspected for\nevent_id, if found it is removed from id_list. When id_list\nis empty this function returns success."
      },
      {
        "name": "event_id",
        "defaultValue": "'id'",
        "isRequired": false,
        "description": "The name of a key in the event data. Default is id for the minion\nID, another common value is name for use with orchestrating\nsalt-cloud events."
      },
      {
        "name": "timeout",
        "defaultValue": "300",
        "isRequired": false,
        "description": "The maximum time in seconds to wait before failing."
      },
      {
        "name": "node",
        "defaultValue": "'master'",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.saltmod.wheel",
    "description": "Execute a wheel module on the master",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the function to run"
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.schedule.absent",
    "description": "Ensure a job is absent from the schedule",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The unique name that is given to the scheduled job."
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.schedule.disabled",
    "description": "Ensure a job is disabled in the schedule",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The unique name that is given to the scheduled job."
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.schedule.enabled",
    "description": "Ensure a job is enabled in the schedule",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The unique name that is given to the scheduled job."
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.schedule.present",
    "description": "Ensure a job is present in the schedule",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The unique name that is given to the scheduled job."
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.selinux.boolean",
    "description": "Set up an SELinux boolean",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the boolean to set"
      },
      {
        "name": "value",
        "defaultValue": null,
        "isRequired": true,
        "description": "The value to set on the boolean"
      },
      {
        "name": "persist",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Defaults to False, set persist to true to make the boolean apply on a\nreboot"
      }
    ]
  },
  {
    "functionId": "salt.states.selinux.mode",
    "description": "Verifies the mode SELinux is running in, can be set to enforcing,\npermissive, or disabled",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.selinux.module",
    "description": "Enable/Disable and optionally force a specific version for an SELinux module",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the module to control"
      },
      {
        "name": "module_state",
        "defaultValue": "'Enabled'",
        "isRequired": false,
        "description": "Should the module be enabled or disabled?"
      },
      {
        "name": "version",
        "defaultValue": "'any'",
        "isRequired": false,
        "description": "Defaults to no preference, set to a specified value if required.\nCurrently can only alert if the version is incorrect."
      }
    ]
  },
  {
    "functionId": "salt.states.serverdensity_device.monitored",
    "description": "Device is monitored with Server Density.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Device name in Server Density."
      },
      {
        "name": "group",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Group name under with device will appear in Server Density dashboard.\nDefault - None."
      },
      {
        "name": "salt_name",
        "defaultValue": "True",
        "isRequired": false,
        "description": "If True (default), takes the name from the id grain. If\nFalse, the provided name is used."
      },
      {
        "name": "salt_params",
        "defaultValue": "True",
        "isRequired": false,
        "description": "If True (default), needed config parameters will be sourced from\ngrains and from [status.all_status](../../modules/all/salt.modules.status.html#salt.modules.status.all_status \"salt.modules.status.all_status\")."
      },
      {
        "name": "agent_version",
        "defaultValue": "1",
        "isRequired": false,
        "description": "The agent version you want to use. Valid values are 1 or 2.\nDefault - 1."
      },
      {
        "name": "**params",
        "defaultValue": "**params",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.service.dead",
    "description": "Ensure that the named service is dead by stopping the service if it is running",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the init or rc script used to manage the service"
      },
      {
        "name": "enable",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Set the service to be enabled at boot time, True sets the service\nto be enabled, False sets the named service to be disabled. The\ndefault is None, which does not enable or disable anything."
      },
      {
        "name": "sig",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The string to search for when looking for the service process with ps"
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.service.disabled",
    "description": "Ensure that the service is disabled on boot, only use this state if you\ndon't want to manage the running process, remember that if you want to\ndisable a service to use the enable: False option for the running or dead\nfunction.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the init or rc script used to manage the service"
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.service.enabled",
    "description": "Ensure that the service is enabled on boot, only use this state if you\ndon't want to manage the running process, remember that if you want to\nenable a running service to use the enable: True option for the running\nor dead function.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the init or rc script used to manage the service"
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.service.mod_watch",
    "description": "The service watcher, called to invoke the watch command.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the init or rc script used to manage the service"
      },
      {
        "name": "sfun",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The original function which triggered the mod_watch call\n(service.running, for example)."
      },
      {
        "name": "sig",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The string to search for when looking for the service process with ps"
      },
      {
        "name": "reload",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Use reload instead of the default restart (exclusive option with full_restart,\ndefaults to reload if both are used)"
      },
      {
        "name": "full_restart",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Use service.full_restart instead of restart (exclusive option with reload)"
      },
      {
        "name": "init_delay",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Add a sleep command (in seconds) before the service is restarted/reloaded"
      },
      {
        "name": "force",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Use service.force_reload instead of reload (needs reload to be set to True)"
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.service.running",
    "description": "Ensure that the service is running",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the init or rc script used to manage the service"
      },
      {
        "name": "enable",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Set the service to be enabled at boot time, True sets the service to\nbe enabled, False sets the named service to be disabled. The default\nis None, which does not enable or disable anything."
      },
      {
        "name": "sig",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The string to search for when looking for the service process with ps"
      },
      {
        "name": "init_delay",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Some services may not be truly available for a short period after their\nstartup script indicates to the system that they are. Provide an\n'init_delay' to specify that this state should wait an additional given\nnumber of seconds after a service has started before returning. Useful\nfor requisite states wherein a dependent state might assume a service\nhas started but is not yet fully initialized."
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.slack.post_message",
    "description": "Send a message to a Slack channel.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The unique name for this event."
      },
      {
        "name": "channel",
        "defaultValue": null,
        "isRequired": true,
        "description": "The channel to send the message to. Can either be the ID or the name."
      },
      {
        "name": "from_name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of that is to be shown in the \"from\" field."
      },
      {
        "name": "message",
        "defaultValue": null,
        "isRequired": true,
        "description": "The message that is to be sent to the Slack channel."
      },
      {
        "name": "api_key",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "icon",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.smartos.config_absent",
    "description": "Ensure configuration property is absent in /usbkey/config",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "name of property"
      }
    ]
  },
  {
    "functionId": "salt.states.smartos.config_present",
    "description": "Ensure configuration property is set to value in /usbkey/config",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "name of property"
      },
      {
        "name": "value",
        "defaultValue": null,
        "isRequired": true,
        "description": "value of property"
      }
    ]
  },
  {
    "functionId": "salt.states.smartos.image_absent",
    "description": "Ensure image is absent on the computenode",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "uuid of image"
      }
    ]
  },
  {
    "functionId": "salt.states.smartos.image_present",
    "description": "Ensure image is present on the computenode",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "uuid of image"
      }
    ]
  },
  {
    "functionId": "salt.states.smartos.image_vacuum",
    "description": "Delete images not in use or installed via image_present",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.smartos.vm_absent",
    "description": "Ensure vm is absent on the computenode",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "hostname of vm"
      },
      {
        "name": "archive",
        "defaultValue": "False",
        "isRequired": false,
        "description": "toggle archiving of vm on removal"
      }
    ]
  },
  {
    "functionId": "salt.states.smartos.vm_present",
    "description": "Ensure vm is present on the computenode",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "hostname of vm"
      },
      {
        "name": "vmconfig",
        "defaultValue": null,
        "isRequired": true,
        "description": "options to set for the vm"
      },
      {
        "name": "config",
        "defaultValue": "None",
        "isRequired": false,
        "description": "fine grain control over vm_present"
      }
    ]
  },
  {
    "functionId": "salt.states.smartos.vm_running",
    "description": "Ensure vm is in the running state on the computenode",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "hostname of vm"
      }
    ]
  },
  {
    "functionId": "salt.states.smartos.vm_stopped",
    "description": "Ensure vm is in the stopped state on the computenode",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "hostname of vm"
      }
    ]
  },
  {
    "functionId": "salt.states.smtp.send_msg",
    "description": "Send a message via SMTP",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The message to send via SMTP"
      },
      {
        "name": "recipient",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "subject",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "sender",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "profile",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "use_ssl",
        "defaultValue": "'True'",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.snapper.baseline_snapshot",
    "description": "Enforces that no file is modified comparing against a previously\ndefined snapshot identified by number.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "number",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Number of selected baseline snapshot."
      },
      {
        "name": "tag",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Tag of the selected baseline snapshot. Most recent baseline baseline\nsnapshot is used in case of multiple snapshots with the same tag.\n(tag and number cannot be used at the same time)"
      },
      {
        "name": "include_diff",
        "defaultValue": "True",
        "isRequired": false,
        "description": "Include a diff in the response (Default: True)"
      },
      {
        "name": "config",
        "defaultValue": "'root'",
        "isRequired": false,
        "description": "Snapper config name (Default: root)"
      },
      {
        "name": "ignore",
        "defaultValue": "None",
        "isRequired": false,
        "description": "List of files to ignore. (Default: None)"
      }
    ]
  },
  {
    "functionId": "salt.states.splunk.absent",
    "description": "Ensure a splunk user is absent",
    "arguments": [
      {
        "name": "email",
        "defaultValue": null,
        "isRequired": true,
        "description": "This is the email of the user in splunk"
      },
      {
        "name": "profile",
        "defaultValue": "'splunk'",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.splunk.present",
    "description": "Ensure a user is present",
    "arguments": [
      {
        "name": "email",
        "defaultValue": null,
        "isRequired": true,
        "description": "This is the email of the user in splunk"
      },
      {
        "name": "profile",
        "defaultValue": "'splunk'",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.splunk_search.absent",
    "description": "Ensure a search is absent",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "This is the name of the search in splunk"
      },
      {
        "name": "profile",
        "defaultValue": "'splunk'",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.splunk_search.present",
    "description": "Ensure a search is present",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "This is the name of the search in splunk"
      },
      {
        "name": "profile",
        "defaultValue": "'splunk'",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.sqlite3.row_absent",
    "description": "Makes sure the specified row is absent in db.  If multiple rows\nmatch where_sql, then the state will fail.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Only used as the unique ID"
      },
      {
        "name": "db",
        "defaultValue": null,
        "isRequired": true,
        "description": "The database file name"
      },
      {
        "name": "table",
        "defaultValue": null,
        "isRequired": true,
        "description": "The table name to check"
      },
      {
        "name": "where_sql",
        "defaultValue": null,
        "isRequired": true,
        "description": "The sql to select the row to check"
      },
      {
        "name": "where_args",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The list parameters to substitute in where_sql"
      }
    ]
  },
  {
    "functionId": "salt.states.sqlite3.row_present",
    "description": "Checks to make sure the given row exists. If row exists and update is True\nthen row will be updated with data. Otherwise it will leave existing\nrow unmodified and check it against data. If the existing data\ndoesn't match data_check the state will fail.  If the row doesn't\nexist then it will insert data into the table. If more than one\nrow matches, then the state will fail.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Only used as the unique ID"
      },
      {
        "name": "db",
        "defaultValue": null,
        "isRequired": true,
        "description": "The database file name"
      },
      {
        "name": "table",
        "defaultValue": null,
        "isRequired": true,
        "description": "The table name to check the data"
      },
      {
        "name": "data",
        "defaultValue": null,
        "isRequired": true,
        "description": "The dictionary of key/value pairs to check against if\nrow exists, insert into the table if it doesn't"
      },
      {
        "name": "where_sql",
        "defaultValue": null,
        "isRequired": true,
        "description": "The sql to select the row to check"
      },
      {
        "name": "where_args",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The list parameters to substitute in where_sql"
      },
      {
        "name": "update",
        "defaultValue": "False",
        "isRequired": false,
        "description": "True will replace the existing row with data\nWhen False and the row exists and data does not equal\nthe row data then the state will fail"
      }
    ]
  },
  {
    "functionId": "salt.states.sqlite3.table_absent",
    "description": "Make sure the specified table does not exist",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the table"
      },
      {
        "name": "db",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the database file"
      }
    ]
  },
  {
    "functionId": "salt.states.sqlite3.table_present",
    "description": "Make sure the specified table exists with the specified schema",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the table"
      },
      {
        "name": "db",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the database file"
      },
      {
        "name": "schema",
        "defaultValue": null,
        "isRequired": true,
        "description": "The dictionary containing the schema information"
      },
      {
        "name": "force",
        "defaultValue": "False",
        "isRequired": false,
        "description": "If the name of the table exists and force is set to False,\nthe state will fail.  If force is set to True, the existing\ntable will be replaced with the new table"
      }
    ]
  },
  {
    "functionId": "salt.states.ssh_auth.absent",
    "description": "Verifies that the specified SSH key is absent",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The SSH key to manage"
      },
      {
        "name": "user",
        "defaultValue": null,
        "isRequired": true,
        "description": "The user who owns the SSH authorized keys file to modify"
      },
      {
        "name": "enc",
        "defaultValue": "'ssh-rsa'",
        "isRequired": false,
        "description": "Defines what type of key is being used; can be ed25519, ecdsa, ssh-rsa\nor ssh-dss"
      },
      {
        "name": "comment",
        "defaultValue": "''",
        "isRequired": false,
        "description": "The comment to be placed with the SSH public key"
      },
      {
        "name": "source",
        "defaultValue": "''",
        "isRequired": false,
        "description": "The source file for the key(s). Can contain any number of public keys, in standard \"authorized_keys\" format. If this is set, comment, enc and options will be ignored.\n\n\n\n\nNew in version 2015.8.0.\n\n\n"
      },
      {
        "name": "options",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The options passed to the key, pass a list object"
      },
      {
        "name": "config",
        "defaultValue": "'.ssh/authorized_keys'",
        "isRequired": false,
        "description": "The location of the authorized keys file relative to the user's home\ndirectory, defaults to \".ssh/authorized_keys\". Token expansion %u and\n%h for username and home path supported."
      }
    ]
  },
  {
    "functionId": "salt.states.ssh_auth.present",
    "description": "Verifies that the specified SSH key is present for the specified user",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The SSH key to manage"
      },
      {
        "name": "user",
        "defaultValue": null,
        "isRequired": true,
        "description": "The user who owns the SSH authorized keys file to modify"
      },
      {
        "name": "enc",
        "defaultValue": "'ssh-rsa'",
        "isRequired": false,
        "description": "Defines what type of key is being used; can be ed25519, ecdsa, ssh-rsa\nor ssh-dss"
      },
      {
        "name": "comment",
        "defaultValue": "''",
        "isRequired": false,
        "description": "The comment to be placed with the SSH public key"
      },
      {
        "name": "source",
        "defaultValue": "''",
        "isRequired": false,
        "description": "The source file for the key(s). Can contain any number of public keys,\nin standard \"authorized_keys\" format. If this is set, comment and enc\nwill be ignored."
      },
      {
        "name": "options",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "config",
        "defaultValue": "'.ssh/authorized_keys'",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.ssh_known_hosts.absent",
    "description": "Verifies that the specified host is not known by the given user",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The host name"
      },
      {
        "name": "user",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The user who owns the ssh authorized keys file to modify"
      },
      {
        "name": "config",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The location of the authorized keys file relative to the user's home\ndirectory, defaults to \".ssh/known_hosts\". If no user is specified,\ndefaults to \"/etc/ssh/ssh_known_hosts\". If present, must be an\nabsolute path when a user is not specified."
      }
    ]
  },
  {
    "functionId": "salt.states.ssh_known_hosts.present",
    "description": "Verifies that the specified host is known by the specified user",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the remote host (e.g. \"github.com\")"
      },
      {
        "name": "user",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The user who owns the ssh authorized keys file to modify"
      },
      {
        "name": "fingerprint",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The fingerprint of the key which must be present in the known_hosts\nfile (optional if key specified)"
      },
      {
        "name": "key",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The public key which must be present in the known_hosts file\n(optional if fingerprint specified)"
      },
      {
        "name": "port",
        "defaultValue": "None",
        "isRequired": false,
        "description": "optional parameter, port which will be used to when requesting the\npublic key from the remote host, defaults to port 22."
      },
      {
        "name": "enc",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Defines what type of key is being used, can be ed25519, ecdsa ssh-rsa\nor ssh-dss"
      },
      {
        "name": "config",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The location of the authorized keys file relative to the user's home\ndirectory, defaults to \".ssh/known_hosts\". If no user is specified,\ndefaults to \"/etc/ssh/ssh_known_hosts\". If present, must be an\nabsolute path when a user is not specified."
      },
      {
        "name": "hash_known_hosts",
        "defaultValue": "True",
        "isRequired": false,
        "description": "Hash all hostnames and addresses in the known hosts file."
      },
      {
        "name": "timeout",
        "defaultValue": "5",
        "isRequired": false,
        "description": "Set the timeout for connection attempts. If timeout seconds have elapsed since a connection was initiated to a host or since the last time anything was read from that host, then the connection is closed and the host in question considered unavailable. Default is 5 seconds.\n\n\n\n\nNew in version 2016.3.0.\n\n\n"
      },
      {
        "name": "fingerprint_hash_type",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The public key fingerprint hash type that the public key fingerprint was originally hashed with. This defaults to md5 if not specified.\n\n\n\n\nNew in version 2016.11.4.\n\n\n\n\n\nNote\n\nThe default value of the fingerprint_hash_type will change to sha256 in Salt Nitrogen.\n\n\n"
      }
    ]
  },
  {
    "functionId": "salt.states.stateconf.context",
    "description": "No-op state to support state config via the stateconf renderer.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.stateconf.set",
    "description": "No-op state to support state config via the stateconf renderer.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.status.loadavg",
    "description": "Return the current load average for the specified minion. Available values\nfor name are 1-min, 5-min and 15-min. minimum and maximum values\nshould be passed in as strings.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "maximum",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "minimum",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.status.process",
    "description": "Return whether the specified signature is found in the process tree. This\ndiffers slightly from the services states, in that it may refer to a\nprocess that is not managed via the init system.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.stormpath_account.absent",
    "description": "Ensure that an account associated with the given email address is absent.\nWill search all directories for the account, unless a directory_id is\nspecified.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The email address of the account to delete."
      },
      {
        "name": "directory_id",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Optional. The ID of the directory that the account is expected to belong\nto. If not specified, then a list of directories will be retrieved, and\neach will be scanned for the account. Specifying a directory_id will\ntherefore cut down on the number of requests to Stormpath, and increase\nperformance of this state."
      }
    ]
  },
  {
    "functionId": "salt.states.stormpath_account.present",
    "description": "Ensure that an account is present and properly configured",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The email address associated with the Stormpath account"
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.supervisord.dead",
    "description": "Ensure the named service is dead (not running).",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Service name as defined in the supervisor configuration file"
      },
      {
        "name": "user",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Name of the user to run the supervisorctl command\n\n\n\n\nNew in version 0.17.0.\n\n\n"
      },
      {
        "name": "conf_file",
        "defaultValue": "None",
        "isRequired": false,
        "description": "path to supervisorctl config file"
      },
      {
        "name": "bin_env",
        "defaultValue": "None",
        "isRequired": false,
        "description": "path to supervisorctl bin or path to virtualenv with supervisor\ninstalled"
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.supervisord.running",
    "description": "Ensure the named service is running.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Service name as defined in the supervisor configuration file"
      },
      {
        "name": "restart",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Whether to force a restart"
      },
      {
        "name": "update",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Whether to update the supervisor configuration."
      },
      {
        "name": "user",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Name of the user to run the supervisorctl command\n\n\n\n\nNew in version 0.17.0.\n\n\n"
      },
      {
        "name": "conf_file",
        "defaultValue": "None",
        "isRequired": false,
        "description": "path to supervisorctl config file"
      },
      {
        "name": "bin_env",
        "defaultValue": "None",
        "isRequired": false,
        "description": "path to supervisorctl bin or path to virtualenv with supervisor\ninstalled"
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.svn.dirty",
    "description": "Determine if the working directory has been changed.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "target",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "user",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "username",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "password",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "ignore_unversioned",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.svn.export",
    "description": "Export a file or directory from an SVN repository",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Address and path to the file or directory to be exported."
      },
      {
        "name": "target",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Name of the target directory where the checkout will put the working\ndirectory"
      },
      {
        "name": "rev",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The name revision number to checkout. Enable \"force\" if the directory\nalready exists."
      },
      {
        "name": "user",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Name of the user performing repository management operations"
      },
      {
        "name": "username",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The user to access the name repository with. The svn default is the\ncurrent user"
      },
      {
        "name": "password",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Connect to the Subversion server with this password\n\n\n\n\nNew in version 0.17.0.\n\n\n"
      },
      {
        "name": "force",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Continue if conflicts are encountered"
      },
      {
        "name": "overwrite",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Overwrite existing target"
      },
      {
        "name": "externals",
        "defaultValue": "True",
        "isRequired": false,
        "description": "Change to False to not checkout or update externals"
      },
      {
        "name": "trust",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Automatically trust the remote server. SVN's --trust-server-cert"
      }
    ]
  },
  {
    "functionId": "salt.states.svn.latest",
    "description": "Checkout or update the working directory to the latest revision from the\nremote repository.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Address of the name repository as passed to \"svn checkout\""
      },
      {
        "name": "target",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Name of the target directory where the checkout will put the working\ndirectory"
      },
      {
        "name": "rev",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The name revision number to checkout. Enable \"force\" if the directory\nalready exists."
      },
      {
        "name": "user",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Name of the user performing repository management operations"
      },
      {
        "name": "username",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The user to access the name repository with. The svn default is the\ncurrent user"
      },
      {
        "name": "password",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Connect to the Subversion server with this password\n\n\n\n\nNew in version 0.17.0.\n\n\n"
      },
      {
        "name": "force",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Continue if conflicts are encountered"
      },
      {
        "name": "externals",
        "defaultValue": "True",
        "isRequired": false,
        "description": "Change to False to not checkout or update externals"
      },
      {
        "name": "trust",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Automatically trust the remote server. SVN's --trust-server-cert"
      }
    ]
  },
  {
    "functionId": "salt.states.sysctl.present",
    "description": "Ensure that the named sysctl value is set in memory and persisted to the\nnamed configuration file. The default sysctl configuration file is\n/etc/sysctl.conf",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the sysctl value to edit"
      },
      {
        "name": "value",
        "defaultValue": null,
        "isRequired": true,
        "description": "The sysctl value to apply"
      },
      {
        "name": "config",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The location of the sysctl configuration file. If not specified, the\nproper location will be detected based on platform."
      }
    ]
  },
  {
    "functionId": "salt.states.syslog_ng.config",
    "description": "Builds syslog-ng configuration.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "config",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "write",
        "defaultValue": "True",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.syslog_ng.reloaded",
    "description": "Reloads syslog-ng.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.syslog_ng.started",
    "description": "Ensures, that syslog-ng is started via the given parameters.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "user",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "group",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "chroot",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "caps",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "no_caps",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "pidfile",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "enable_core",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "fd_limit",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "verbose",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "debug",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "trace",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "yydebug",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "persist_file",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "control",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "worker_threads",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "*args",
        "defaultValue": "*args",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.syslog_ng.stopped",
    "description": "Kills syslog-ng.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.sysrc.absent",
    "description": "Ensure a sysrc variable is absent.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The variable name to set"
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.sysrc.managed",
    "description": "Ensure a sysrc variable is set to a specific value.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The variable name to set"
      },
      {
        "name": "value",
        "defaultValue": null,
        "isRequired": true,
        "description": "Value to set the variable to"
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.telemetry_alert.absent",
    "description": "Ensure the telemetry alert config is deleted",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "An optional description of the alarms (not currently supported by telemetry API)"
      },
      {
        "name": "deployment_id",
        "defaultValue": null,
        "isRequired": true,
        "description": "Specifies the ID of the root deployment resource\n(replica set cluster or sharded cluster) to which this alert definition is attached"
      },
      {
        "name": "metric_name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Specifies the unique ID of the metric to whose values these thresholds will be applied"
      },
      {
        "name": "api_key",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Telemetry api key for the user"
      },
      {
        "name": "profile",
        "defaultValue": "'telemetry'",
        "isRequired": false,
        "description": "A dict with telemetry config data. If present, will be used instead of\napi_key."
      }
    ]
  },
  {
    "functionId": "salt.states.telemetry_alert.present",
    "description": "Ensure the telemetry alert exists.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "An optional description of the alarm (not currently supported by telemetry API)"
      },
      {
        "name": "deployment_id",
        "defaultValue": null,
        "isRequired": true,
        "description": "Specifies the ID of the root deployment resource\n(replica set cluster or sharded cluster) to which this alert definition is attached"
      },
      {
        "name": "metric_name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Specifies the unique ID of the metric to whose values these thresholds will be applied"
      },
      {
        "name": "alert_config",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "api_key",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Telemetry api key for the user"
      },
      {
        "name": "profile",
        "defaultValue": "'telemetry'",
        "isRequired": false,
        "description": "A dict of telemetry config information.  If present, will be used instead of\napi_key."
      }
    ]
  },
  {
    "functionId": "salt.states.test.check_pillar",
    "description": "Checks the presence and, optionally, the type of\ngiven keys in Pillar.\nSupported kwargs for types are:\n- boolean (bool)\n- integer (int)\n- string (str)\n- listing (list)\n- dictionary (dict)",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "present",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "boolean",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "integer",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "string",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "listing",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "dictionary",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "verbose",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.test.configurable_test_state",
    "description": "A configurable test state which determines its output based on the inputs.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "changes",
        "defaultValue": "True",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "result",
        "defaultValue": "True",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "comment",
        "defaultValue": "''",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.test.fail_with_changes",
    "description": "Returns failure and changes is not empty.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.test.fail_without_changes",
    "description": "Returns failure.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.test.mod_watch",
    "description": "Call this function via a watch statement",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "sfun",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.test.nop",
    "description": "A no-op state that does nothing. Useful in conjunction with the use\nrequisite, or in templates which could otherwise be empty due to jinja\nrendering",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.test.show_notification",
    "description": "Simple notification using text argument.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "A unique string."
      },
      {
        "name": "text",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Text to return in the comment."
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.test.succeed_with_changes",
    "description": "Returns successful and changes is not empty",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.test.succeed_without_changes",
    "description": "Returns successful.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "A unique string."
      }
    ]
  },
  {
    "functionId": "salt.states.timezone.system",
    "description": "Set the timezone for the system.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the timezone to use (e.g.: America/Denver)"
      },
      {
        "name": "utc",
        "defaultValue": "True",
        "isRequired": false,
        "description": "Whether or not to set the hardware clock to UTC (default is True)"
      }
    ]
  },
  {
    "functionId": "salt.states.tls.valid_certificate",
    "description": "Verify that a TLS certificate is valid now and (optionally) will be valid\nfor the time specified through weeks, days, hours, minutes, and seconds.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "weeks",
        "defaultValue": "0",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "days",
        "defaultValue": "0",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "hours",
        "defaultValue": "0",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "minutes",
        "defaultValue": "0",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "seconds",
        "defaultValue": "0",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.tomcat.mod_watch",
    "description": "The tomcat watcher function.\nWhen called it will reload the webapp in question",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "url",
        "defaultValue": "'http://localhost:8080/manager'",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "timeout",
        "defaultValue": "180",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.tomcat.undeployed",
    "description": "Enforce that the WAR will be undeployed from the server",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The context path to undeploy."
      },
      {
        "name": "url",
        "defaultValue": "'http://localhost:8080/manager'",
        "isRequired": false,
        "description": "The URL of the server with the Tomcat Manager webapp."
      },
      {
        "name": "timeout",
        "defaultValue": "180",
        "isRequired": false,
        "description": "Timeout for HTTP request to the Tomcat Manager."
      }
    ]
  },
  {
    "functionId": "salt.states.tomcat.wait",
    "description": "Wait for the Tomcat Manager to load.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "url",
        "defaultValue": "'http://localhost:8080/manager'",
        "isRequired": false,
        "description": "The URL of the server with the Tomcat Manager webapp."
      },
      {
        "name": "timeout",
        "defaultValue": "180",
        "isRequired": false,
        "description": "Timeout for HTTP request to the Tomcat Manager."
      }
    ]
  },
  {
    "functionId": "salt.states.tomcat.war_deployed",
    "description": "Enforce that the WAR will be deployed and started in the context path,\nwhile making use of WAR versions in the filename.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The context path to deploy (incl. forward slash) the WAR to."
      },
      {
        "name": "war",
        "defaultValue": null,
        "isRequired": true,
        "description": "Absolute path to WAR file (should be accessible by the user running\nTomcat) or a path supported by the salt.modules.cp.get_url function."
      },
      {
        "name": "force",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Force deployment even if the version strings are the same.\nDisabled by default."
      },
      {
        "name": "url",
        "defaultValue": "'http://localhost:8080/manager'",
        "isRequired": false,
        "description": "The URL of the Tomcat Web Application Manager."
      },
      {
        "name": "timeout",
        "defaultValue": "180",
        "isRequired": false,
        "description": "Timeout for HTTP requests to the Tomcat Manager."
      },
      {
        "name": "temp_war_location",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Use another location to temporarily copy the WAR file to.\nBy default the system's temp directory is used."
      },
      {
        "name": "version",
        "defaultValue": "True",
        "isRequired": false,
        "description": "Specify the WAR version. If this argument is provided, it overrides the version encoded in the WAR file name, if one is present.\n\n\n\n\nNew in version 2015.8.6.\n\n\n\n\nUse False or blank value to prevent guessing the version and keeping it blank.\n\n\n\n\nNew in version 2016.11.0.\n\n\n"
      }
    ]
  },
  {
    "functionId": "salt.states.trafficserver.bounce_cluster",
    "description": "Bounce all Traffic Server nodes in the cluster. Bouncing Traffic Server\nshuts down and immediately restarts Traffic Server, node-by-node.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.trafficserver.bounce_local",
    "description": "Bounce Traffic Server on the local node. Bouncing Traffic Server shuts down\nand immediately restarts the Traffic Server node.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "drain",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.trafficserver.clear_cluster",
    "description": "Clears accumulated statistics on all nodes in the cluster.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.trafficserver.clear_node",
    "description": "Clears accumulated statistics on the local node.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.trafficserver.config",
    "description": "Set Traffic Server configuration variable values.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "value",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.trafficserver.offline",
    "description": "Mark a cache storage device as offline. The storage is identified by a path\nwhich must match exactly a path specified in storage.config. This removes\nthe storage from the cache and redirects requests that would have used this\nstorage to other storage. This has exactly the same effect as a disk\nfailure for that storage. This does not persist across restarts of the\ntraffic_server process.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "path",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.trafficserver.refresh",
    "description": "Initiate a Traffic Server configuration file reread. Use this command to\nupdate the running configuration after any configuration file modification.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.trafficserver.restart_cluster",
    "description": "Restart the traffic_manager process and the traffic_server process on all\nthe nodes in a cluster.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.trafficserver.restart_local",
    "description": "Restart the traffic_manager and traffic_server processes on the local node.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "drain",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.trafficserver.set_var",
    "description": "Set Traffic Server configuration variable values.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "value",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.trafficserver.shutdown",
    "description": "Shut down Traffic Server on the local node.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.trafficserver.startup",
    "description": "Start Traffic Server on the local node.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.trafficserver.zero_cluster",
    "description": "Reset performance statistics to zero across the cluster.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.trafficserver.zero_node",
    "description": "Reset performance statistics to zero on the local node.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.tuned.off",
    "description": "Turns 'tuned' off.\nExample tuned.sls file for turning tuned off:",
    "arguments": [
      {
        "name": "name",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.tuned.profile",
    "description": "This state module allows you to modify system tuned parameters",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "tuned profile name to set the system to"
      }
    ]
  },
  {
    "functionId": "salt.states.uptime.monitored",
    "description": "Makes sure an URL is monitored by uptime. Checks if URL is already\nmonitored, and if not, adds it.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "**params",
        "defaultValue": "**params",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.user.absent",
    "description": "Ensure that the named user is absent",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the user to remove"
      },
      {
        "name": "purge",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Set purge to True to delete all of the user's files as well as the user,\nDefault is False."
      },
      {
        "name": "force",
        "defaultValue": "False",
        "isRequired": false,
        "description": "If the user is logged in, the absent state will fail. Set the force\noption to True to remove the user even if they are logged in. Not\nsupported in FreeBSD and Solaris, Default is False."
      }
    ]
  },
  {
    "functionId": "salt.states.user.present",
    "description": "Ensure that the named user is present with the specified properties",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the user to manage"
      },
      {
        "name": "uid",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The user id to assign, if left empty then the next available user id\nwill be assigned"
      },
      {
        "name": "gid",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The default group id. Also accepts group name."
      },
      {
        "name": "gid_from_name",
        "defaultValue": "False",
        "isRequired": false,
        "description": "If True, the default group id will be set to the id of the group with\nthe same name as the user, Default is False."
      },
      {
        "name": "groups",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A list of groups to assign the user to, pass a list object. If a group\nspecified here does not exist on the minion, the state will fail.\nIf set to the empty list, the user will be removed from all groups\nexcept the default group. If unset, salt will assume current groups\nare still wanted (see issue #28706)."
      },
      {
        "name": "optional_groups",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A list of groups to assign the user to, pass a list object. If a group\nspecified here does not exist on the minion, the state will silently\nignore it."
      },
      {
        "name": "remove_groups",
        "defaultValue": "True",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "home",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "createhome",
        "defaultValue": "True",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "password",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "hash_password",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "enforce_password",
        "defaultValue": "True",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "empty_password",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "shell",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "unique",
        "defaultValue": "True",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "system",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "fullname",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "roomnumber",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "workphone",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "homephone",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "loginclass",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "date",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "mindays",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "maxdays",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "inactdays",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "warndays",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "expire",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "win_homedrive",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "win_profile",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "win_logonscript",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "win_description",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.vbox_guest.additions_installed",
    "description": "Ensure that the VirtualBox Guest Additions are installed. Uses the CD,\nconnected by VirtualBox.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name has no functional value and is only used as a tracking\nreference."
      },
      {
        "name": "reboot",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Restart OS to complete installation."
      },
      {
        "name": "upgrade_os",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Upgrade OS (to ensure the latests version of kernel and developer tools\ninstalled)."
      }
    ]
  },
  {
    "functionId": "salt.states.vbox_guest.additions_removed",
    "description": "Ensure that the VirtualBox Guest Additions are removed. Uses the CD,\nconnected by VirtualBox.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name has no functional value and is only used as a tracking\nreference."
      },
      {
        "name": "force",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Force VirtualBox Guest Additions removing."
      }
    ]
  },
  {
    "functionId": "salt.states.vbox_guest.grant_access_to_shared_folders_to",
    "description": "Grant access to auto-mounted shared folders to the users.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Name of the user to grant access to auto-mounted shared folders to."
      },
      {
        "name": "users",
        "defaultValue": "None",
        "isRequired": false,
        "description": "List of names of users to grant access to auto-mounted shared folders to.\nIf specified, name will not be taken into account."
      }
    ]
  },
  {
    "functionId": "salt.states.victorops.create_event",
    "description": "Create an event on the VictorOps service",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "This is a short description of the event."
      },
      {
        "name": "message_type",
        "defaultValue": null,
        "isRequired": true,
        "description": "One of the following values: INFO, WARNING, ACKNOWLEDGEMENT, CRITICAL, RECOVERY."
      },
      {
        "name": "routing_key",
        "defaultValue": "'everyone'",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.virt.keys",
    "description": "Manage libvirt keys.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name variable used to track the execution"
      },
      {
        "name": "basepath",
        "defaultValue": "'/etc/pki'",
        "isRequired": false,
        "description": "Defaults to /etc/pki, this is the root location used for libvirt\nkeys on the hypervisor"
      }
    ]
  },
  {
    "functionId": "salt.states.virt.powered_off",
    "description": "Stops a VM by power off.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.virt.rebooted",
    "description": "Reboots VMs",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.virt.reverted",
    "description": "Reverts to the particular snapshot.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "snapshot",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "cleanup",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.virt.running",
    "description": "Starts an existing guest, or defines and starts a new VM with specified arguments.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.virt.saved",
    "description": "Takes a snapshot of a particular VM or by a UNIX-style wildcard.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "suffix",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.virt.snapshot",
    "description": "Takes a snapshot of a particular VM or by a UNIX-style wildcard.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "suffix",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.virt.stopped",
    "description": "Stops a VM by shutting it down nicely.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.virt.unpowered",
    "description": "Stops a VM by power off.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.virtualenv_mod.managed",
    "description": "Create a virtualenv and optionally manage it with pip",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Path to the virtualenv."
      },
      {
        "name": "venv_bin",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "requirements",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "system_site_packages",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "distribute",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "use_wheel",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "clear",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "python",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Python executable used to build the virtualenv"
      },
      {
        "name": "extra_search_dir",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "never_download",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "prompt",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "user",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "no_chown",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "cwd",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "index_url",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "extra_index_url",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "pre_releases",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "no_deps",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "pip_download",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "pip_download_cache",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "pip_exists_action",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "pip_ignore_installed",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "proxy",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "use_vt",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "env_vars",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "no_use_wheel",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "pip_upgrade",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "pip_pkgs",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "pip_no_cache_dir",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "pip_cache_dir",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.win_certutil.add_store",
    "description": "Store a certificate to the given store",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The certificate to store, this can use local paths\nor salt:// paths"
      },
      {
        "name": "store",
        "defaultValue": null,
        "isRequired": true,
        "description": "The store to add the certificate to"
      },
      {
        "name": "saltenv",
        "defaultValue": "'base'",
        "isRequired": false,
        "description": "The salt environment to use, this is ignored if a local\npath is specified"
      }
    ]
  },
  {
    "functionId": "salt.states.win_certutil.del_store",
    "description": "Remove a certificate in the given store",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The certificate to remove, this can use local paths\nor salt:// paths"
      },
      {
        "name": "store",
        "defaultValue": null,
        "isRequired": true,
        "description": "The store to remove the certificate from"
      },
      {
        "name": "saltenv",
        "defaultValue": "'base'",
        "isRequired": false,
        "description": "The salt environment to use, this is ignored if a local\npath is specified"
      }
    ]
  },
  {
    "functionId": "salt.states.win_dacl.absent",
    "description": "Ensure a Linux ACL does not exist",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "objectType",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "user",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "permission",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "acetype",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "propagation",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.win_dacl.disinherit",
    "description": "Ensure an object is not inheriting ACLs from its parent",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "objectType",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "copy_inherited_acl",
        "defaultValue": "True",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.win_dacl.inherit",
    "description": "Ensure an object is inheriting ACLs from its parent",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "objectType",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "clear_existing_acl",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.win_dacl.present",
    "description": "Ensure an ACE is present",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "objectType",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "user",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "permission",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "acetype",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "propagation",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.win_dism.capability_installed",
    "description": "Install a DISM capability",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "source",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "limit_access",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "image",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "restart",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.win_dism.capability_removed",
    "description": "Uninstall a DISM capability",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "image",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "restart",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.win_dism.feature_installed",
    "description": "Install a DISM feature",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "package",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "source",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "limit_access",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "enable_parent",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "image",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "restart",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.win_dism.feature_removed",
    "description": "Disables a feature.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "remove_payload",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "image",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "restart",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.win_dism.package_installed",
    "description": "Install a package.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "ignore_check",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "prevent_pending",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "image",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "restart",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.win_dism.package_removed",
    "description": "Uninstall a package",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "image",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "restart",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.win_dns_client.dns_dhcp",
    "description": "Configure the DNS server list from DHCP Server",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "interface",
        "defaultValue": "'Local Area Connection'",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.win_dns_client.dns_exists",
    "description": "Configure the DNS server list in the specified interface",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "servers",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "interface",
        "defaultValue": "'Local Area Connection'",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "replace",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.win_dns_client.primary_suffix",
    "description": "Configure the global primary DNS suffix of a DHCP client.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "suffix",
        "defaultValue": "None",
        "isRequired": false,
        "description": "The suffix which is advertised for this client when acquiring a DHCP lease\nWhen none is set, the explicitly configured DNS suffix will be removed."
      },
      {
        "name": "updates",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Allow syncing the DNS suffix with the AD domain when the client's AD domain membership changes"
      }
    ]
  },
  {
    "functionId": "salt.states.win_firewall.add_rule",
    "description": "Add a new firewall rule (Windows only)",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "localport",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "protocol",
        "defaultValue": "'tcp'",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "action",
        "defaultValue": "'allow'",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "dir",
        "defaultValue": "'in'",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.win_firewall.disabled",
    "description": "Disable all the firewall profiles (Windows only)",
    "arguments": [
      {
        "name": "name",
        "defaultValue": "'allprofiles'",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.win_firewall.enabled",
    "description": "Enable all the firewall profiles (Windows only)",
    "arguments": [
      {
        "name": "name",
        "defaultValue": "'allprofiles'",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.win_iis.container_setting",
    "description": "Set the value of the setting for an IIS container.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "container",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "settings",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.win_iis.create_app",
    "description": "Create an IIS application.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "site",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "sourcepath",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "apppool",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.win_iis.create_apppool",
    "description": "Create an IIS application pool.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.win_iis.create_binding",
    "description": "Create an IIS binding.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "site",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "hostheader",
        "defaultValue": "''",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "ipaddress",
        "defaultValue": "'*'",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "port",
        "defaultValue": "80",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "protocol",
        "defaultValue": "'http'",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "sslflags",
        "defaultValue": "0",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.win_iis.create_cert_binding",
    "description": "Assign a certificate to an IIS binding.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "site",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "hostheader",
        "defaultValue": "''",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "ipaddress",
        "defaultValue": "'*'",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "port",
        "defaultValue": "443",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "sslflags",
        "defaultValue": "0",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.win_iis.create_vdir",
    "description": "Create an IIS virtual directory.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "site",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "sourcepath",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "app",
        "defaultValue": "'/'",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.win_iis.deployed",
    "description": "Ensure the website has been deployed.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "sourcepath",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "apppool",
        "defaultValue": "''",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "hostheader",
        "defaultValue": "''",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "ipaddress",
        "defaultValue": "'*'",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "port",
        "defaultValue": "80",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "protocol",
        "defaultValue": "'http'",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.win_iis.remove_app",
    "description": "Remove an IIS application.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "site",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.win_iis.remove_apppool",
    "description": "Remove an IIS application pool.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.win_iis.remove_binding",
    "description": "Remove an IIS binding.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "site",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "hostheader",
        "defaultValue": "''",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "ipaddress",
        "defaultValue": "'*'",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "port",
        "defaultValue": "80",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.win_iis.remove_cert_binding",
    "description": "Remove a certificate from an IIS binding.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "site",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "hostheader",
        "defaultValue": "''",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "ipaddress",
        "defaultValue": "'*'",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "port",
        "defaultValue": "443",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.win_iis.remove_site",
    "description": "Delete a website from IIS.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.win_iis.remove_vdir",
    "description": "Remove an IIS virtual directory.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "site",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "app",
        "defaultValue": "'/'",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.win_lgpo.set",
    "description": "Ensure the specified policy is set",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "the name of a single policy to configure"
      },
      {
        "name": "setting",
        "defaultValue": "None",
        "isRequired": false,
        "description": "the configuration setting for the single named policy\nif this argument is used the computer_policy/user_policy arguments will be ignored"
      },
      {
        "name": "policy_class",
        "defaultValue": "None",
        "isRequired": false,
        "description": "the policy class of the single named policy to configure\nthis can \"machine\", \"user\", or \"both\""
      },
      {
        "name": "computer_policy",
        "defaultValue": "None",
        "isRequired": false,
        "description": "a dict of policyname: value pairs of a set of computer policies to configure\nif this argument is used, the name/setting/policy_class arguments will be ignored"
      },
      {
        "name": "user_policy",
        "defaultValue": "None",
        "isRequired": false,
        "description": "a dict of policyname: value pairs of a set of user policies to configure\nif this argument is used, the name/setting/policy_class arguments will be ignored"
      },
      {
        "name": "cumulative_rights_assignments",
        "defaultValue": "True",
        "isRequired": false,
        "description": "determine if any user right assignment policies specified will be cumulative\nor explicit"
      },
      {
        "name": "adml_language",
        "defaultValue": "'en-US'",
        "isRequired": false,
        "description": "the adml language to use for AMDX policy data/display conversions"
      }
    ]
  },
  {
    "functionId": "salt.states.win_license.activate",
    "description": "Install and activate the given product key",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The 5x5 product key given to you by Microsoft"
      }
    ]
  },
  {
    "functionId": "salt.states.win_network.managed",
    "description": "Ensure that the named interface is configured properly.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The name of the interface to manage"
      },
      {
        "name": "dns_proto",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Set to static and use the dns_servers parameter to provide a\nlist of DNS nameservers. set to dhcp to use DHCP to get the DNS\nservers."
      },
      {
        "name": "dns_servers",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A list of static DNS servers."
      },
      {
        "name": "ip_proto",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Set to static and use the ip_addrs and (optionally) gateway\nparameters to provide a list of static IP addresses and the default\ngateway. Set to dhcp to use DHCP."
      },
      {
        "name": "ip_addrs",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A list of static IP addresses."
      },
      {
        "name": "gateway",
        "defaultValue": "None",
        "isRequired": false,
        "description": "A list of static IP addresses."
      },
      {
        "name": "enabled",
        "defaultValue": "True",
        "isRequired": false,
        "description": "Set to False to ensure that this interface is disabled."
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.win_path.absent",
    "description": "Remove the directory from the SYSTEM path",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.win_path.exists",
    "description": "Add the directory to the system PATH at index location",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "index",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.win_pki.import_cert",
    "description": "Import the certificate file into the given certificate store.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "cert_format",
        "defaultValue": "'cer'",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "context",
        "defaultValue": "'LocalMachine'",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "store",
        "defaultValue": "'My'",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "exportable",
        "defaultValue": "True",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "password",
        "defaultValue": "''",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "saltenv",
        "defaultValue": "'base'",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.win_pki.remove_cert",
    "description": "Remove the certificate from the given certificate store.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "thumbprint",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "context",
        "defaultValue": "'LocalMachine'",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "store",
        "defaultValue": "'My'",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.win_powercfg.set_timeout",
    "description": "Set the sleep timeouts of specific items such as disk, monitor.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The setting to change, can be one of the following: monitor, disk, standby, hibernate"
      },
      {
        "name": "value",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "power",
        "defaultValue": "'ac'",
        "isRequired": false,
        "description": "Should we set the value for AC or DC (battery)? Valid options ac,dc."
      }
    ]
  },
  {
    "functionId": "salt.states.win_servermanager.installed",
    "description": "Install the windows feature",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "recurse",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "force",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "restart",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "source",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "exclude",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.win_servermanager.removed",
    "description": "Remove the windows feature",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "remove_payload",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "restart",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.win_smtp_server.active_log_format",
    "description": "Manage the active log format for the SMTP server.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "log_format",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "server",
        "defaultValue": "'SmtpSvc/1'",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.win_smtp_server.connection_ip_list",
    "description": "Manage IP list for SMTP connections.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "addresses",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "grant_by_default",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "server",
        "defaultValue": "'SmtpSvc/1'",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.win_smtp_server.relay_ip_list",
    "description": "Manage IP list for SMTP relay connections.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "addresses",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "server",
        "defaultValue": "'SmtpSvc/1'",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.win_smtp_server.server_setting",
    "description": "Ensure the value is set for the specified setting.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "settings",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "server",
        "defaultValue": "'SmtpSvc/1'",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.win_snmp.agent_settings",
    "description": "Manage the SNMP sysContact, sysLocation, and sysServices settings.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "contact",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "location",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "services",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.win_snmp.auth_traps_enabled",
    "description": "Manage the sending of authentication traps.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "status",
        "defaultValue": "True",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.win_snmp.community_names",
    "description": "Manage the SNMP accepted community names and their permissions.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "communities",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.win_system.computer_desc",
    "description": "Manage the computer's description field",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The desired computer description"
      }
    ]
  },
  {
    "functionId": "salt.states.win_system.computer_name",
    "description": "Manage the computer's name",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The desired computer name"
      }
    ]
  },
  {
    "functionId": "salt.states.win_system.hostname",
    "description": "Manage the hostname of the computer",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The hostname to set"
      }
    ]
  },
  {
    "functionId": "salt.states.win_system.join_domain",
    "description": "Checks if a computer is joined to the Domain.\nIf the computer is not in the Domain, it will be joined.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "username",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "password",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "account_ou",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "account_exists",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "restart",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.win_update.downloaded",
    "description": "Cache updates for later install.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "categories",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "skips",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "retries",
        "defaultValue": "10",
        "isRequired": false,
        "description": "Number of retries to make before giving up. This is total, not per\nstep."
      }
    ]
  },
  {
    "functionId": "salt.states.win_update.installed",
    "description": "Install specified windows updates.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "categories",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "skips",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "retries",
        "defaultValue": "10",
        "isRequired": false,
        "description": "Number of retries to make before giving up. This is total, not per\nstep."
      }
    ]
  },
  {
    "functionId": "salt.states.winrepo.genrepo",
    "description": "Refresh the winrepo.p file of the repository (salt-run winrepo.genrepo)",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "force",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "allow_empty",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.x509.certificate_managed",
    "description": "Manage a Certificate",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "days_remaining",
        "defaultValue": "90",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "managed_private_key",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "append_certs",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.x509.crl_managed",
    "description": "Manage a Certificate Revocation List",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "signing_private_key",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "signing_private_key_passphrase",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "signing_cert",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "revoked",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "days_valid",
        "defaultValue": "100",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "digest",
        "defaultValue": "''",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "days_remaining",
        "defaultValue": "30",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "include_expired",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.x509.csr_managed",
    "description": "Manage a Certificate Signing Request",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.x509.pem_managed",
    "description": "Manage the contents of a PEM file directly with the content in text, ensuring correct formatting.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "text",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "backup",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.x509.private_key_managed",
    "description": "Manage a private key's existence.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "bits",
        "defaultValue": "2048",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "passphrase",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "cipher",
        "defaultValue": "'aes_128_cbc'",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "new",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "overwrite",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "verbose",
        "defaultValue": "True",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.xmpp.send_msg",
    "description": "Send a message to an XMPP user",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The message to send to the XMPP user"
      },
      {
        "name": "recipient",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "profile",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.xmpp.send_msg_multi",
    "description": "Send a message to an list of recipients or rooms",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "The message to send to the XMPP user"
      },
      {
        "name": "profile",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "recipients",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "rooms",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.zabbix_host.absent",
    "description": "Ensures that the host does not exists, eventually deletes host.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.zabbix_host.present",
    "description": "Ensures that the host exists, eventually creates new host.\nNOTE: please use argument visible_name instead of name to not mess with name from salt sls. This function accepts\nall standard host properties: keyword argument names differ depending on your zabbix version, see:\nhttps://www.zabbix.com/documentation/2.4/manual/api/reference/host/object#host",
    "arguments": [
      {
        "name": "host",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "groups",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "interfaces",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.zabbix_hostgroup.absent",
    "description": "Ensures that the host group does not exist, eventually delete host group.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.zabbix_hostgroup.present",
    "description": "Ensures that the host group exists, eventually creates new host group.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.zabbix_user.absent",
    "description": "Ensures that the user does not exist, eventually delete user.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.zabbix_user.present",
    "description": "Ensures that the user exists, eventually creates new user.\nNOTE: use argument firstname instead of name to not mess values with name from salt sls.",
    "arguments": [
      {
        "name": "alias",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "passwd",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "usrgrps",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "medias",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "password_reset",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.zabbix_usergroup.absent",
    "description": "Ensures that the user group does not exist, eventually delete user group.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.zabbix_usergroup.present",
    "description": "Creates new user.\nNOTE: This function accepts all standard user group properties: keyword argument names differ depending on your\nzabbix version, see:\nhttps://www.zabbix.com/documentation/2.0/manual/appendix/api/usergroup/definitions#user_group",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.zcbuildout.installed",
    "description": "Install buildout in a specific directory",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "directory to execute in"
      },
      {
        "name": "config",
        "defaultValue": "'buildout.cfg'",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "quiet",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "parts",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "user",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "env",
        "defaultValue": "()",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "buildout_ver",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "test_release",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "distribute",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "new_st",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "offline",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "newest",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "python",
        "defaultValue": "'/usr/bin/python'",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "debug",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "verbose",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "unless",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "onlyif",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "use_vt",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "loglevel",
        "defaultValue": "'debug'",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "**kwargs",
        "defaultValue": "**kwargs",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.zenoss.monitored",
    "description": "Ensure a device is monitored. The 'name' given will be used for Zenoss device name and should be resolvable.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "device_class",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "collector",
        "defaultValue": "'localhost'",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "prod_state",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.zk_concurrency.lock",
    "description": "Block state execution until you are able to get the lock (or hit the timeout)",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "zk_hosts",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "identifier",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "max_concurrency",
        "defaultValue": "1",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "timeout",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "ephemeral_lease",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.zk_concurrency.min_party",
    "description": "Ensure that there are min_nodes in the party at name, optionally blocking if not available.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "zk_hosts",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "min_nodes",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "blocking",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.zk_concurrency.unlock",
    "description": "Remove lease from semaphore.",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "Unknown"
      },
      {
        "name": "zk_hosts",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "identifier",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "max_concurrency",
        "defaultValue": "1",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "ephemeral_lease",
        "defaultValue": "False",
        "isRequired": false,
        "description": "Unknown"
      }
    ]
  },
  {
    "functionId": "salt.states.zfs.bookmark_absent",
    "description": "ensure bookmark is absent on the system",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "name of snapshot"
      },
      {
        "name": "force",
        "defaultValue": "False",
        "isRequired": false,
        "description": "try harder to destroy the dataset (zfs destroy -f)"
      },
      {
        "name": "recursive",
        "defaultValue": "False",
        "isRequired": false,
        "description": "also destroy all the child datasets (zfs destroy -r)"
      }
    ]
  },
  {
    "functionId": "salt.states.zfs.bookmark_present",
    "description": "ensure bookmark exists",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "name of bookmark"
      },
      {
        "name": "snapshot",
        "defaultValue": null,
        "isRequired": true,
        "description": "name of snapshot"
      }
    ]
  },
  {
    "functionId": "salt.states.zfs.filesystem_absent",
    "description": "ensure filesystem is absent on the system",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "name of filesystem"
      },
      {
        "name": "force",
        "defaultValue": "False",
        "isRequired": false,
        "description": "try harder to destroy the dataset (zfs destroy -f)"
      },
      {
        "name": "recursive",
        "defaultValue": "False",
        "isRequired": false,
        "description": "also destroy all the child datasets (zfs destroy -r)"
      }
    ]
  },
  {
    "functionId": "salt.states.zfs.filesystem_present",
    "description": "ensure filesystem exists and has properties set",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "name of filesystem"
      },
      {
        "name": "create_parent",
        "defaultValue": "False",
        "isRequired": false,
        "description": "creates all the non-existing parent datasets.\nany property specified on the command line using the -o option is ignored."
      },
      {
        "name": "properties",
        "defaultValue": "None",
        "isRequired": false,
        "description": "additional zfs properties (-o)"
      },
      {
        "name": "cloned_from",
        "defaultValue": "None",
        "isRequired": false,
        "description": "name of snapshot to clone"
      }
    ]
  },
  {
    "functionId": "salt.states.zfs.hold_absent",
    "description": "ensure hold is absent on the system",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "name of holdt"
      },
      {
        "name": "snapshot",
        "defaultValue": null,
        "isRequired": true,
        "description": "name of snapshot"
      },
      {
        "name": "recursive",
        "defaultValue": "False",
        "isRequired": false,
        "description": "recursively releases a hold with the given tag on the snapshots of all descendent file systems."
      }
    ]
  },
  {
    "functionId": "salt.states.zfs.hold_present",
    "description": "ensure hold is present on the system",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "name of holdt"
      },
      {
        "name": "snapshot",
        "defaultValue": null,
        "isRequired": true,
        "description": "name of snapshot"
      },
      {
        "name": "recursive",
        "defaultValue": "False",
        "isRequired": false,
        "description": "recursively add hold with the given tag on the snapshots of all descendent file systems."
      }
    ]
  },
  {
    "functionId": "salt.states.zfs.promoted",
    "description": "ensure a dataset is not a clone",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "name of fileset or volume"
      }
    ]
  },
  {
    "functionId": "salt.states.zfs.scheduled_snapshot",
    "description": "maintain a set of snapshots based on a schedule",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "name of filesystem or volume"
      },
      {
        "name": "prefix",
        "defaultValue": null,
        "isRequired": true,
        "description": "prefix for the snapshots\ne.g. 'test' will result in snapshots being named 'test-YYYYMMDD_HHMM'"
      },
      {
        "name": "recursive",
        "defaultValue": "True",
        "isRequired": false,
        "description": "create snapshots for all children also"
      },
      {
        "name": "schedule",
        "defaultValue": "None",
        "isRequired": false,
        "description": "dict holding the schedule, the following keys are available (minute, hour,\nday, month, and year) by default all are set to 0 the value indicated the\nnumber of snapshots of that type to keep around."
      }
    ]
  },
  {
    "functionId": "salt.states.zfs.snapshot_absent",
    "description": "ensure snapshot is absent on the system",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "name of snapshot"
      },
      {
        "name": "force",
        "defaultValue": "False",
        "isRequired": false,
        "description": "try harder to destroy the dataset (zfs destroy -f)"
      },
      {
        "name": "recursive",
        "defaultValue": "False",
        "isRequired": false,
        "description": "also destroy all the child datasets (zfs destroy -r)"
      }
    ]
  },
  {
    "functionId": "salt.states.zfs.snapshot_present",
    "description": "ensure snapshot exists and has properties set",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "name of snapshot"
      },
      {
        "name": "recursive",
        "defaultValue": "False",
        "isRequired": false,
        "description": "recursively create snapshots of all descendent datasets"
      },
      {
        "name": "properties",
        "defaultValue": "None",
        "isRequired": false,
        "description": "additional zfs properties (-o)"
      }
    ]
  },
  {
    "functionId": "salt.states.zfs.volume_absent",
    "description": "ensure volume is absent on the system",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "name of volume"
      },
      {
        "name": "force",
        "defaultValue": "False",
        "isRequired": false,
        "description": "try harder to destroy the dataset (zfs destroy -f)"
      },
      {
        "name": "recursive",
        "defaultValue": "False",
        "isRequired": false,
        "description": "also destroy all the child datasets (zfs destroy -r)"
      }
    ]
  },
  {
    "functionId": "salt.states.zfs.volume_present",
    "description": "ensure volume exists and has properties set",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "name of volume"
      },
      {
        "name": "volume_size",
        "defaultValue": null,
        "isRequired": true,
        "description": "size of volume"
      },
      {
        "name": "sparse",
        "defaultValue": "False",
        "isRequired": false,
        "description": "create sparse volume"
      },
      {
        "name": "create_parent",
        "defaultValue": "False",
        "isRequired": false,
        "description": "creates all the non-existing parent datasets.\nany property specified on the command line using the -o option is ignored."
      },
      {
        "name": "properties",
        "defaultValue": "None",
        "isRequired": false,
        "description": "additional zfs properties (-o)"
      },
      {
        "name": "cloned_from",
        "defaultValue": "None",
        "isRequired": false,
        "description": "name of snapshot to clone"
      }
    ]
  },
  {
    "functionId": "salt.states.zpool.absent",
    "description": "ensure storage pool is absent on the system",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "name of storage pool"
      },
      {
        "name": "export",
        "defaultValue": "False",
        "isRequired": false,
        "description": "export instread of destroy the zpool if present"
      },
      {
        "name": "force",
        "defaultValue": "False",
        "isRequired": false,
        "description": "force destroy or export"
      }
    ]
  },
  {
    "functionId": "salt.states.zpool.present",
    "description": "ensure storage pool is present on the system",
    "arguments": [
      {
        "name": "name",
        "defaultValue": null,
        "isRequired": true,
        "description": "name of storage pool"
      },
      {
        "name": "properties",
        "defaultValue": "None",
        "isRequired": false,
        "description": "optional set of properties to set for the storage pool"
      },
      {
        "name": "filesystem_properties",
        "defaultValue": "None",
        "isRequired": false,
        "description": "optional set of filesystem properties to set for the storage pool (creation only)"
      },
      {
        "name": "layout",
        "defaultValue": "None",
        "isRequired": false,
        "description": "Unknown"
      },
      {
        "name": "config",
        "defaultValue": "None",
        "isRequired": false,
        "description": "fine grain control over this state"
      }
    ]
  }
]